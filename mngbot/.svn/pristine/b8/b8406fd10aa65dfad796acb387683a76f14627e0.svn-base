<%@page contentType="text/html charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://www.nextlab.co.kr/tags/nextlab" prefix="nl"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<div class="content">
	<div class="sub_layout has_snb">
		<div class="sort_area">
			<div class="sel_item full">
				<span class="sort_tit">기간</span>
				<div class="period">
					<input type="text" class="input_date" name="startDt" v-model="criteria.startDt" readonly><span class="bar">~</span><input type="text" class="input_date" id="endDt" name="endDt" v-model="criteria.endDt" readonly >
				</div>
			</div>
			<div class="sel_item">
				<span class="sort_tit pad">대분류</span>
				<project-category-select :pid="criteria.pid" level="1" big-cate-select-text="선택" :change-fn="setCateId"></project-category-select>
			</div>
			<div class="sel_item">
				<span class="sort_tit pad">중요도</span>
				<nl:checkboxes name="importance" v-model="criteria.importanceArray" codeType="B100" />
			</div>	
			<div class="sel_item">
				<span class="sort_tit pad">결과</span>
				<nl:select v-model = "criteria.bmtResult">
					<nl:option value="">- 전체 -</nl:option>
					<nl:options codeType="B300"/>
				</nl:select>
			</div>
			<div class="sel_item full">
				<span class="sort_tit">측정모델</span>	
				<div class="sel_model">
					<project-model-select ref="modelSelect" :change-fn="addModelList" :pid="criteria.pid"></project-model-select>						
					<div class="reg_list" v-if="modelList.length > 0">
						<ul>
							<li v-for="(list, index) in modelList">
								<span>{{list.modelNm}}({{list.modelVer}})</span>
								<button class="del" @click="delModelList(index)"></button>
							</li>
						</ul>
					</div>				
				</div>
			</div>
			<button class="g_btn01" @click="btnSearch">조회</button>
		</div>
		<div class="tab_wrap">
			<ul class="g_tab">
				<li><a href="#" @click="getProjectXqmsMngBmtList">TESTCASE</a></li>
				<li><a href="#" @click="getProjectXqmsMngChannelList">채널변경시간</a></li>
				<li><a href="#" @click="getProjectXqmsMngUiReactionList" >UI 반응시간</a></li>
				<!-- <li><a href="#" @click="getProjectXqmsMngLkfsList">LKFS</a></li>
				<li><a href="#" @click="getProjectXqmsMngRemoconRobotList" >리모컨 로봇 테스트</a></li> -->	
			</ul>
			<div class="tab_con_wrap">
				<div class="tab_con">
					<div class="tb_desc">
						<p>조회결과 : {{ projectXqmsMngBmtList.length | number(0) }}건 </p>		
						<button v-if="prjVo.projectStat != 'C304'" class="g_btn03" @click="selectDelete">선택삭제</button>
					</div>
					<div class="g_table">
						<table>
							<caption>츨정일시, 구분, Test Case 이름 등으로 구성된 표 입니다.</caption>
							<colgroup>
								<col style="width:4%;">
								<col>
								<col style="width:9%;">
								<col style="width:7%;">
								<col style="width:8%;">
								<col style="width:3.5%;">
								<col style="width:8%;">
								<col style="width:6%;">
								<col style="width:12%;">
								<col style="width:7.5%;">
								<col style="width:4%;">
							</colgroup>
							<thead>
								<tr>
									<th><input type="checkbox" v-model="selectBmtAll"></th>
									<th>Test Case 이름</th>
									<th>측정모델</th>
									<th>중요도</th>
									<th>대분류</th>
									<th>차수</th>
									<th>리모컨</th>
									<th>담당자</th>
									<th>측정일시</th>
									<th>측정 결과</th>
									<th>수정</th>
								</tr>
							</thead>
							<tbody>
								<tr v-for="(list,index) in bmtPagingList " >
									<td><input type="checkbox" v-model="selectXqmsSeq.xqmsSeqArray" :value="list.xqmsSeq"></td>
									<td class="l_align">{{ list.testcase }}</td>
									<td>{{ list.modelNm}}({{list.modelVer}})</td>
									<td>{{ list.importance | code(importanceCodeNm) }}</td>
									<td>{{ list.bigCateNm}}</td>
									<td>{{ list.prjChasu }}차</td>
									<td>{{ list.remocon }} </td>
									<td>{{ list.person}} </td>
									<td>{{ list.xqmsDtm | dateTimeFormat }}</td>		
									<td><span :class="{state01:list.bmtResult==='B302', state02:list.bmtResult==='B301' , state04:list.bmtResult==='B303' || list.bmtResult==='B304'}">{{ list.bmtResult | code(resultCodeNm) }}</span></td>
									<td><a v-if="prjVo.projectStat != 'C304'" class="btn_edit" @click="showPopupLayer('/bmt/xqms/xqmsMngForm?xqmsSeq=' + list.xqmsSeq + '&xqmsType=' + list.xqmsType + '&pid=' + criteria.pid); return false;"></a></td>
								</tr>
								<tr v-if="bmtPagingList.length == 0">
									<td colspan="11">조회된 데이터가 없습니다.</td>
								</tr>								
							</tbody>
						</table>
						<paginator ref="bmtPaginator" :go-fn="getBmtPagingList"></paginator>
					</div>
				</div>
				<div class="tab_con">
					<div class="tb_desc">
						<p>조회결과 : {{ projectXqmsMngChannelList.length | number(0) }}건<span class="unit">단위 : ms</span></p>	
						<button v-if="prjVo.projectStat != 'C304'" class="g_btn03" @click="selectDelete">선택삭제</button>
					</div>
					
					<div class="g_table">
						<table>
							<caption>대상 프로젝트, 측정일시, 측정모델 등 정보로 구성된 표 입니다.</caption>
							<colgroup>
								<col style="width:4%;">
								<col>
								<col style="width:8%;">
								<col style="width:6%;">
								<col style="width:7%;">
								<col style="width:3.5%;">
								<col style="width:8%;">
								<col style="width:6%;">
								<col style="width:10%;">
								<col style="width:6%;">
								<col style="width:6%;">
								<col style="width:6%;">
								<col style="width:6%;">
								<col style="width:6%;">
								<col style="width:5%;">
								<col style="width:4%;">
							</colgroup>
							<thead>
								<tr>
									<th rowspan="2"><input type="checkbox" v-model="selectChannelAll"></th>
									<th rowspan="2">Test Case 이름</th>
									<th rowspan="2">측정모델</th>
									<th rowspan="2">중요도</th>
									<th rowspan="2">대분류</th>
									<th rowspan="2">차수</th>
									<th rowspan="2">리모컨</th>
									<th rowspan="2">담당자</th>
									<th rowspan="2">측정일시</th>
									<th colspan="7">측정 결과</th>		
								</tr>
								<tr>
									<th>A구간</th>
									<th>B구간</th>
									<th>C구간</th>
									<th>총소요</th>
									<th>네트워크</th>
									<th>결과</th>
									<th>수정</th>			
								</tr>								
							</thead>
							<tbody>
								<tr v-for="list in channelPagingList">
									<td><input type="checkbox" v-model="selectXqmsSeq.xqmsSeqArray" :value="list.xqmsSeq"></td>
									<td class="l_align">{{ list.testcase }}</td>
									<td>{{ list.modelNm }}({{list.modelVer}})</td>
									<td>{{ list.importance | code(importanceCodeNm) }}</td>
									<td>{{ list.bigCateNm}}</td>														
									<td>{{ list.prjChasu }}차</td>
									<td>{{ list.remocon }}</td>
									<td>{{ list.person }}</td>
									<td>{{ list.xqmsDtm | dateTimeFormat }}</td>
									<td class="r_align">{{ list.remoconReactTime | number(0) }}</td>
									<td class="r_align">{{ list.firstStopTime | number(0) }}</td>
									<td class="r_align">{{ list.secondStopTime | number(0) }}</td>
									<td class="r_align">{{ list.totTime | number(0) }}</td>
									<td class="r_align">{{ list.ntwTime | number(0) }}</td>
									<td><span :class="{state01:list.channelResult==='B302' , state02:list.channelResult==='B301' , state04:list.channelResult==='B303' || list.channelResult==='B304'}">{{ list.channelResult | code(resultCodeNm) }}</span></td>
									<td><a v-if="prjVo.projectStat != 'C304'" class="btn_edit" @click="showPopupLayer('/bmt/xqms/xqmsMngForm?xqmsSeq=' + list.xqmsSeq + '&xqmsType=' + list.xqmsType + '&pid=' + criteria.pid); return false;"></a></td>
								</tr>
								<tr v-if="channelPagingList == 0">
									<td colspan="16">조회된 데이터가 없습니다.</td>
								</tr>
							</tbody>
						</table>
						<paginator ref="channelPaginator" :go-fn="getChannelPagingList"></paginator>
					</div>
				</div>
				<div class="tab_con">
					<div class="tb_desc">
						<p>조회결과 : {{ projectXqmsMngUiReactionList.length | number(0) }}건<span class="unit">단위 : ms</span></p>
						<button v-if="prjVo.projectStat != 'C304'" class="g_btn03" @click="selectDelete">선택삭제</button>
					</div>
					<div class="g_table">
						<table>
							<caption>대상 프로젝트, 측정일시, 측정모델 등 정보로 구성된 표 입니다.</caption>
							<colgroup>
								<col style="width:4%;">
								<col>
								<col style="width:8%;">
								<col style="width:6%;">
								<col style="width:8%;">
								<col style="width:3.5%;">
								<col style="width:8%;">
								<col style="width:6%;">
								<col style="width:10%;">
								<col style="width:6%;">
								<col style="width:6%;">
								<col style="width:6%;">
								<col style="width:5%;">
								<col style="width:4%;">
							</colgroup>

							<thead>
								<tr>
									<th rowspan="2"><input type="checkbox" v-model="selectUiReactionAll"></th>
									<th rowspan="2">Test Case 이름</th>
									<th rowspan="2">측정모델</th>
									<th rowspan="2">중요도</th>
									<th rowspan="2">대분류</th>
									<th rowspan="2">차수</th>
									<th rowspan="2">리모컨</th>
									<th rowspan="2">담당자</th>
									<th rowspan="2">측정일시</th>
									<th colspan="5">측정 결과</th>
								</tr>
								<tr>
									<th>매칭</th>
									<th>커서</th>
									<th>변화율</th>
									<th>결과</th>
									<th>수정</th>
								</tr>								
							</thead>
							<tbody>
								<tr v-for="list in uiReactionPagingList">
									<td><input type="checkbox" v-model="selectXqmsSeq.xqmsSeqArray" :value="list.xqmsSeq"></td>
									<td class="l_align">{{ list.testcase }}</td>
									<td>{{ list.modelNm }}({{list.modelVer}})</td>
									<td>{{ list.importance | code(importanceCodeNm) }}</td>
									<td>{{ list.bigCateNm}}</td>														
									<td>{{ list.prjChasu }}차</td>
									<td>{{ list.remocon }}</td>
									<td>{{ list.person }}</td>
									<td>{{ list.xqmsDtm | dateTimeFormat }}</td>
									<td class="r_align">{{ list.matchTime | number(0) }}</td>
									<td class="r_align">{{ list.reactTime | number(0) }}</td>
									<td class="r_align">{{ list.diffTime | number(0) }}</td>
									<td><span :class="{state01:list.coldResetResult==='B302', state02:list.coldResetResult==='B301' , state04:list.coldResetResult==='B303' || list.coldResetResult==='B304'}">{{ list.coldResetResult | code(resultCodeNm) }}</span></td>
									<td><a v-if="prjVo.projectStat != 'C304'" class="btn_edit" @click="showPopupLayer('/bmt/xqms/xqmsMngForm?xqmsSeq=' + list.xqmsSeq + '&xqmsType=' + list.xqmsType + '&pid=' + criteria.pid); return false;"></a></td>
								</tr>
								<tr v-if="uiReactionPagingList == 0">
									<td colspan="14">조회된 데이터가 없습니다.</td>
								</tr>
							</tbody>
						</table>
						<paginator ref="uiReactionPaginator" :go-fn="getUiReactionPagingList" ></paginator>
					</div>
				</div>
					<!-- LKFS -->
				<div class="tab_con">
					<div class="tb_desc">
						<p>조회결과 : {{ projectXqmsMngLkfsList.length | number(0) }}건<span class="unit">단위 : lkfs</span></p>
						<button v-if="prjVo.projectStat != 'C304'" class="g_btn03" @click="selectDelete">선택삭제</button>
					</div>				
					<div class="g_table">
						<table>
							<caption>츨정일시, 구분, Test Case 이름 등으로 구성된 표 입니다.</caption>
							<colgroup>
								<col style="width:4%;">
								<col>
								<col style="width:10%;">
								<col style="width:7%;">
								<col style="width:8%;">
								<col style="width:6%;">
								<col style="width:10%;">
								<col style="width:8%;">
								<col style="width:10%;">
								<col style="width:8%;">
								<col style="width:8%;">
								<col style="width:5.5%;">
							</colgroup>
							<thead>
								<tr>
									<th rowspan="2"><input type="checkbox" v-model="selectLkfsAll"></th>
									<th rowspan="2">Test Case 이름</th>
									<th rowspan="2">측정모델</th>
									<th rowspan="2">중요도</th>
									<th rowspan="2">대분류</th>
									<th rowspan="2">차수</th>
									<th rowspan="2">리모컨</th>
									<th rowspan="2">담당자</th>
									<th rowspan="2">측정일시</th>
									<th rowspan="2">측정 결과<br>(I-lkfs)</th>
									<th rowspan="2">측정결과 상세보기</th>
									<th rowspan="2">수정</th>
								</tr>
							</thead>
							<tbody>
								<tr v-for="list in lkfsPagingList">
									<td><input type="checkbox" v-model="selectXqmsSeq.xqmsSeqArray" :value="list.xqmsSeq"></td>
									<td class="l_align">{{list.testcase}}</td>
									<td>{{ list.modelNm }}({{ list.modelVer }})</td>
									<td>{{ list.importance | code(importanceCodeNm) }}</td>
									<td>{{ list.bigCateNm }}</td>
									<td>{{ list.prjChasu }}차</td>
									<td>{{ list.remocon }}</td>
									<td>{{ list.person }}</td>
									<td>{{ list.xqmsDtm | dateTimeFormat }}</td>
									<td>{{list.lastILkfs}}</td>		
									<td><button class="btn_show"></button></td>
									<td><a v-if="prjVo.projectStat != 'C304'" class="btn_edit" @click="showPopupLayer('/bmt/xqms/xqmsMngForm?xqmsSeq=' + list.xqmsSeq + '&xqmsType=' + list.xqmsType + '&pid=' + criteria.pid); return false;"></a></td>
								</tr>
								<tr v-if="lkfsPagingList == 0">
									<td colspan="12">조회된 데이터가 없습니다.</td>
								</tr>								
							</tbody>
						</table>
						<paginator ref="lkfsPaginator" :go-fn="getLkfsPagingList"></paginator>
					</div>
				</div>	
				<div class="tab_con">
					<div class="tb_desc">
						<p>조회결과 : {{ projectXqmsMngRemoconRobotList.length | number(0) }}건 <span class="unit">단위 : ms</span></p>
						<button v-if="prjVo.projectStat != 'C304'" class="g_btn03" @click="selectDelete">선택삭제</button>
					</div>
					<div class="g_table">
						<table>
							<caption>대상 프로젝트, 측정일시, 측정모델 등 정보로 구성된 표 입니다.</caption>
							<colgroup>
								<col style="width:4%;">
								<col>
								<col style="width:8%;">
								<col style="width:5%;">
								<col style="width:6%;">
								<col style="width:4%;">
								<col style="width:8%;">
								<col style="width:7%;">
								<col style="width:12%;">
								<col style="width:6%;">
								<col style="width:6%;">
								<col style="width:6%;">
								<col style="width:6%;">
								<col style="width:6%;">
								<col style="width:6%;">
							</colgroup>
							<thead>
								<tr>
									<th rowspan="2"><input type="checkbox" v-model="selectRemoconRobotAll"></th>
									<th rowspan="2">Test Case 이름</th>
									<th rowspan="2">측정모델</th>
									<th rowspan="2">중요도</th>
									<th rowspan="2">대분류</th>
									<th rowspan="2">차수</th>
									<th rowspan="2">리모컨</th>
									<th rowspan="2">담당자</th>
									<th rowspan="2">측정일시</th>
									<th colspan="6">측정 결과</th>
								</tr>
								<tr>
									<th>측정모델 요청</th>
									<th>측정모델 이동</th>
									<th>리모컨 요청</th>
									<th>리모컨 이동</th>
									<th>결과</th>
									<th>수정</th>
								</tr>
							</thead>
							<tbody>
								<tr v-for="list in remoconRobotPagingList">
									<td><input type="checkbox" v-model="selectXqmsSeq.xqmsSeqArray" :value="list.xqmsSeq"></td>
									<td class="l_align">{{list.testcase}}</td>
									<td>{{ list.modelNm }}({{ list.modelVer }})</td>
									<td>{{ list.importance | code(importanceCodeNm) }}</td>
									<td>{{ list.bigCateNm }}</td>
									<td>{{ list.prjChasu }}차</td>
									<td>{{ list.remocon }}</td>
									<td>{{ list.person }}</td>
									<td>{{ list.xqmsDtm | dateTimeFormat }}</td>
									<td class="r_align">{{ list.targetRepeat | number(0) }}</td>
									<td class="r_align">{{ list.resultRepeat | number(0) }}</td>
									<td class="r_align">{{ list.targetDaq | number(0) }}</td>
									<td class="r_align">{{ list.resultDaq | number(0) }}</td>
									<td><span :class="{state01:list.repeatResult==='B302', state02:list.repeatResult==='B301' , state04:list.repeatResult==='B303' || list.repeatResult==='B304'}">{{ list.repeatResult | code(resultCodeNm) }}</span></td>
									<td><a v-if="prjVo.projectStat != 'C304'" class="btn_edit" @click="showPopupLayer('/bmt/xqms/xqmsMngForm?xqmsSeq=' + list.xqmsSeq + '&xqmsType=' + list.xqmsType + '&pid=' + criteria.pid); return false;"></a></td>
								</tr>
								<tr v-if="remoconRobotPagingList == 0">
									<td colspan="15">조회된 데이터가 없습니다.</td>
								</tr>
							</tbody>
						</table>
						<paginator ref="remoconRobotPaginator" :go-fn="getRemoconRobotPagingList"></paginator>
					</div>
				</div>		
			</div>
		</div>
	</div>
</div>

<script>
	var xqmsMng = new Vue({
		el: '.content'
		, data: {
			projectXqmsMngBmtList: []
			, projectXqmsMngChannelList: []
			, projectXqmsMngUiReactionList: []
			, projectXqmsMngRemoconRobotList: []
			, projectXqmsMngLkfsList: []
			, bmtPagingList: []
			, channelPagingList: []
			, uiReactionPagingList: []	
			, remoconRobotPagingList: []
			, lkfsPagingList: []
			, importanceCodeNm: '<nl:codeListJson codeType="B100" />'
			, resultCodeNm: '<nl:codeListJson codeType="B300" />'	
			, criteria: {
				startDt: '<c:out value="${startDt}"/>'
				, endDt: '<c:out value="${endDt}"/>'
				, importanceArray: []
				, modelSeqArray: []
				, pidArray: ['<c:out value="${param.pid}"/>']
				, pid: '<c:out value="${param.pid}"/>'
				, bigCateId: ''	
				, bmtResult: ''
			}
			, modelList: []
			, chkBox: false
			, searchChk: true
			, selectXqmsSeq: {
				xqmsSeqArray: []
				, seqArray: []
				, pid: '<c:out value="${param.pid}"/>'
			}
			, currTab: 'bmt'
			, prjVo:{
				projectStat: '<c:out value="${projectView.projectStat}"/>'
			} 
		}
		, mounted: function(){
			this.$nextTick(function(){
				this.getProjectXqmsMngBmtList();
				$('.input_date').on('change', function() {
					xqmsMng["criteria"][this.name] = $(this).val();
				});
			});
		}
		, computed: {
			// chkBoxAll
			selectBmtAll: {
				get: function(){
					if (this.bmtPagingList.length == 0){
						return false;
					}
					if (this.selectXqmsSeq.xqmsSeqArray.length > 0) {
						var seqArray = [];
						this.bmtPagingList.forEach(function(list){
							var chk = xqmsMng.selectXqmsSeq.xqmsSeqArray.some(function(xqmsSeq){
								if(xqmsSeq == list.xqmsSeq) {
									seqArray.push(list.seq);
								}
								return;
							});
						})
						xqmsMng.selectXqmsSeq.seqArray = seqArray;
					}
					return this.bmtPagingList ? this.selectXqmsSeq.xqmsSeqArray.length == this.bmtPagingList.length : false;
				}
				, set: function(value) {
					var bmtXqmsSeqArray = [];
					var seqArray = [];
					if (value){
						this.bmtPagingList.forEach(function (list){
							bmtXqmsSeqArray.push(list.xqmsSeq);
							seqArray.push(list.seq);
						});
					}
					xqmsMng.selectXqmsSeq.xqmsSeqArray = bmtXqmsSeqArray;
					xqmsMng.selectXqmsSeq.seqArray = seqArray;
				}
			}
			, selectChannelAll: {
				get: function(){
					if (this.channelPagingList.length == 0){
						return false;
					}
					if (this.selectXqmsSeq.xqmsSeqArray.length > 0) {
						var seqArray = [];
						this.channelPagingList.forEach(function(list){
							var chk = xqmsMng.selectXqmsSeq.xqmsSeqArray.some(function(xqmsSeq){
								if(xqmsSeq == list.xqmsSeq) {
									seqArray.push(list.seq);
								}
								return;
							});
						})
						xqmsMng.selectXqmsSeq.seqArray = seqArray;
					}					
					return this.channelPagingList ? this.selectXqmsSeq.xqmsSeqArray.length == this.channelPagingList.length : false;
				}
				, set: function(value) {
					var channelSeqArray = [];
					var seqArray = [];
					if (value){
						this.channelPagingList.forEach(function(list){
							channelSeqArray.push(list.xqmsSeq);
							seqArray.push(list.seq);
						});
					}
					xqmsMng.selectXqmsSeq.xqmsSeqArray = channelSeqArray;
					xqmsMng.selectXqmsSeq.seqArray = seqArray;
				}
			}
			, selectUiReactionAll: {
				get: function(){
					if (this.uiReactionPagingList.length == 0){
						return false;
					}
					if (this.selectXqmsSeq.xqmsSeqArray.length > 0) {
						var seqArray = [];
						this.uiReactionPagingList.forEach(function(list){
							var chk = xqmsMng.selectXqmsSeq.xqmsSeqArray.some(function(xqmsSeq){
								if(xqmsSeq == list.xqmsSeq) {
									seqArray.push(list.seq);
								}
								return;
							});
						})
						xqmsMng.selectXqmsSeq.seqArray = seqArray;
					}						
					return this.uiReactionPagingList ? this.selectXqmsSeq.xqmsSeqArray.length == this.uiReactionPagingList.length : false;
				}
				, set: function(value) {
					var uiReactionSeqArray = [];
					var seqArray = [];
					if (value){
						this.uiReactionPagingList.forEach(function(list){
							uiReactionSeqArray.push(list.xqmsSeq);
							seqArray.push(list.seq);
						});
					}
					xqmsMng.selectXqmsSeq.xqmsSeqArray = uiReactionSeqArray;
					xqmsMng.selectXqmsSeq.seqArray = seqArray;
				}
			}
			, selectRemoconRobotAll: {
				get: function(){
					if (this.remoconRobotPagingList.length == 0){
						return false;
					}
					if (this.selectXqmsSeq.xqmsSeqArray.length > 0) {
						var seqArray = [];
						this.remoconRobotPagingList.forEach(function(list){
							var chk = xqmsMng.selectXqmsSeq.xqmsSeqArray.some(function(xqmsSeq){
								if(xqmsSeq == list.xqmsSeq) {
									seqArray.push(list.seq);
								}
								return;
							});
						})
						xqmsMng.selectXqmsSeq.seqArray = seqArray;
					}						
					return this.remoconRobotPagingList ? this.selectXqmsSeq.xqmsSeqArray.length == this.remoconRobotPagingList.length : false;
				}
				, set: function(value) {
					var remoconRobotSeqArray = [];
					var seqArray = [];
					if (value){
						this.remoconRobotPagingList.forEach(function(list){
							remoconRobotSeqArray.push(list.xqmsSeq);
							seqArray.push(list.seq);
						});
					}
					xqmsMng.selectXqmsSeq.xqmsSeqArray = remoconRobotSeqArray;
					xqmsMng.selectXqmsSeq.seqArray = seqArray;
				}
			}
			, selectLkfsAll: {
				get: function(){
					if (this.lkfsPagingList.length == 0){
						return false;
					}
					if (this.selectXqmsSeq.xqmsSeqArray.length > 0) {
						var seqArray = [];
						this.lkfsPagingList.forEach(function(list){
							var chk = xqmsMng.selectXqmsSeq.xqmsSeqArray.some(function(xqmsSeq){
								if(xqmsSeq == list.xqmsSeq) {
									seqArray.push(list.seq);
								}
								return;
							});
						})
						xqmsMng.selectXqmsSeq.seqArray = seqArray;
					}						
					return this.lkfsPagingList ? this.selectXqmsSeq.xqmsSeqArray.length == this.lkfsPagingList.length : false;
				}
				, set: function(value) {
					var lkfsSeqArray = [];
					var seqArray = [];
					if (value){
						this.lkfsPagingList.forEach(function(list){
							lkfsSeqArray.push(list.xqmsSeq);
							seqArray.push(list.seq);
						});
					}
					xqmsMng.selectXqmsSeq.xqmsSeqArray = lkfsSeqArray;
					xqmsMng.selectXqmsSeq.seqArray = seqArray;
				}
			}
		}		
		, methods: {
			// bmt
			getProjectXqmsMngBmtList: function(){
				if (xqmsMng.searchChk){
					xqmsMng.currTab = 'bmt'
					jQuery.ajaxSettings.traditional = true;
					$.post("/bmt/xqms/getProjectXqmsBmtList", xqmsMng.criteria, function(data){
						xqmsMng.projectXqmsMngBmtList = data.projectXqmsBmtList;
						xqmsMng.getBmtPagingList();
						xqmsMng.$refs.bmtPaginator.goPage(xqmsMng.$refs.bmtPaginator.page);
					});					
				}
			}
			, getBmtPagingList: function(){
				xqmsMng.selectXqmsSeq.xqmsSeqArray = [];
				this.bmtPagingList = this.$refs.bmtPaginator.pagingList(this.projectXqmsMngBmtList);
			}
			//lkfs
			, getProjectXqmsMngLkfsList: function(){
				if (xqmsMng.searchChk){
					xqmsMng.currTab = "lkfs";
					jQuery.ajaxSettings.traditional = true;	
					$.post("/bmt/xqms/getProjectXqmsLkfsList", xqmsMng.criteria,function(data){
						xqmsMng.projectXqmsMngLkfsList = data.projectXqmsLkfsList;
						xqmsMng.getLkfsPagingList();
						xqmsMng.$refs.lkfsPaginator.goPage(xqmsMng.$refs.lkfsPaginator.page);
					});
				}			
			}
			, getLkfsPagingList: function(){
				xqmsMng.selectXqmsSeq.xqmsSeqArray = [];
				this.lkfsPagingList = this.$refs.lkfsPaginator.pagingList(this.projectXqmsMngLkfsList);
			}
			//리모콘 로봇 테스트
			, getProjectXqmsMngRemoconRobotList: function(){
				if (xqmsMng.searchChk){
					xqmsMng.currTab = "remoconRobot";
					jQuery.ajaxSettings.traditional = true;	
					$.post("/bmt/xqms/getProjectXqmsRemoconRobotList", xqmsMng.criteria,function(data){
						xqmsMng.projectXqmsMngRemoconRobotList = data.projectXqmsRemoconRobotList;
						xqmsMng.getRemoconRobotPagingList();
						xqmsMng.$refs.remoconRobotPaginator.goPage(xqmsMng.$refs.remoconRobotPaginator.page);
					});
				}
			}
			, getRemoconRobotPagingList: function(){
				xqmsMng.selectXqmsSeq.xqmsSeqArray = [];
				this.remoconRobotPagingList = this.$refs.remoconRobotPaginator.pagingList(this.projectXqmsMngRemoconRobotList);
			}
			// Channel 
			, getProjectXqmsMngChannelList: function(){
				if (xqmsMng.searchChk){
					xqmsMng.currTab = "channel"
					jQuery.ajaxSettings.traditional = true;		
					$.post("/bmt/xqms/getProjectXqmsChannelList", xqmsMng.criteria, function(data){
						xqmsMng.projectXqmsMngChannelList = data.projectXqmsChannelList;
						xqmsMng.getChannelPagingList();
						xqmsMng.$refs.channelPaginator.goPage(xqmsMng.$refs.channelPaginator.page);
					});					
				}
			}
			, getChannelPagingList: function(){
				xqmsMng.selectXqmsSeq.xqmsSeqArray = [];
				this.channelPagingList = this.$refs.channelPaginator.pagingList(this.projectXqmsMngChannelList);
			}
			
			// UiReaction
			, getProjectXqmsMngUiReactionList: function(){
				if (xqmsMng.searchChk){
					xqmsMng.currTab = "uiReacion"
					jQuery.ajaxSettings.traditional = true;
					$.post("/bmt/xqms/getProjectXqmsUiReactionList", xqmsMng.criteria, function(data){
						xqmsMng.projectXqmsMngUiReactionList = data.projectXqmsUiReactionList;
						xqmsMng.getUiReactionPagingList();
						xqmsMng.$refs.uiReactionPaginator.goPage(xqmsMng.$refs.uiReactionPaginator.page);
					});					
				}
			}
			, getUiReactionPagingList: function(){
				xqmsMng.selectXqmsSeq.xqmsSeqArray = [];
				this.uiReactionPagingList = this.$refs.uiReactionPaginator.pagingList(this.projectXqmsMngUiReactionList);
			}	
			, selectDelete: function(){
				if (xqmsMng.currTab == "bmt"){
					if(xqmsMng.projectXqmsMngBmtList.length > 0 && xqmsMng.selectXqmsSeq.xqmsSeqArray.length > 0){
						var cmsg = "선택한 측정이력 결과를 삭제 하시겠습니까?";
						if (confirm(cmsg)){
							jQuery.ajaxSettings.traditional = true;
							$.post("/bmt/xqms/delXqmsMngBmtPrc", xqmsMng.selectXqmsSeq, function(data){
								if (data.del){
									alert("삭제가 완료되었습니다.");
									xqmsMng.selectXqmsSeq.xqmsSeqArray = [];
									parent.xqmsMng.getProjectXqmsMngBmtList();
								}
							});
						}
					}
					else {
						alert("선택된 측정이력이 없습니다.");
					}
				} else if (xqmsMng.currTab == "channel"){
					if(xqmsMng.projectXqmsMngChannelList.length > 0 && xqmsMng.selectXqmsSeq.xqmsSeqArray.length > 0){
						var cmsg = "선택한 측정이력 결과를 삭제 하시겠습니까?";
						if (confirm(cmsg)){
							jQuery.ajaxSettings.traditional = true;
							$.post("/bmt/xqms/delXqmsMngChannelPrc", xqmsMng.selectXqmsSeq, function(data){
								if (data.del){
									alert("삭제가 완료되었습니다.");
									xqmsMng.selectXqmsSeq.xqmsSeqArray = [];
									parent.xqmsMng.getProjectXqmsMngChannelList();
								}
							});
						}
					}
					else {
						alert("선택된 측정이력이 없습니다.");
					}
				} else if (xqmsMng.currTab == "uiReacion") {
					if(xqmsMng.projectXqmsMngUiReactionList.length > 0 && xqmsMng.selectXqmsSeq.xqmsSeqArray.length > 0){
						var cmsg = "선택한 측정이력 결과를 삭제 하시겠습니까?";
						if (confirm(cmsg)){
							jQuery.ajaxSettings.traditional = true;
							$.post("/bmt/xqms/delXqmsMngUiReactionPrc", xqmsMng.selectXqmsSeq, function(data){
								if (data.del){
									alert("삭제가 완료되었습니다.");
									xqmsMng.selectXqmsSeq.xqmsSeqArray = [];
									parent.xqmsMng.getProjectXqmsMngUiReactionList();
								}
							});
						}
					}
					else {
						alert("선택된 측정이력이 없습니다.");
					}
				} else if(xqmsMng.currTab == "remoconRobot"){
					if(xqmsMng.projectXqmsMngRemoconRobotList.length > 0 && xqmsMng.selectXqmsSeq.xqmsSeqArray.length > 0){
						var cmsg = "선택한 측정이력 결과를 삭제 하시겠습니까?";
						if (confirm(cmsg)){
							jQuery.ajaxSettings.traditional = true;
							$.post("/bmt/xqms/delXqmsMngRemoconRobotPrc", xqmsMng.selectXqmsSeq, function(data){
								if (data.del){
									alert("삭제가 완료되었습니다.");
									xqmsMng.selectXqmsSeq.xqmsSeqArray = [];
									parent.xqmsMng.getProjectXqmsMngRemoconRobotList();
								}
							});
						}
					}
					else {
						alert("선택된 측정이력이 없습니다.");
					}
				} else if(xqmsMng.currTab == "lkfs"){
					if(xqmsMng.projectXqmsMngLkfsList.length > 0 && xqmsMng.selectXqmsSeq.xqmsSeqArray.length > 0){
						var cmsg = "선택한 측정이력 결과를 삭제 하시겠습니까?";
						if (confirm(cmsg)){
							jQuery.ajaxSettings.traditional = true;
							$.post("/bmt/xqms/delXqmsMngLkfsPrc", xqmsMng.selectXqmsSeq, function(data){
								if (data.del){
									alert("삭제가 완료되었습니다.");
									xqmsMng.selectXqmsSeq.xqmsSeqArray = [];
									parent.xqmsMng.getProjectXqmsMngLkfsList();
								}
							});
						}
					}
					else {
						alert("선택된 측정이력이 없습니다.");
					}
				}
			}
			
			, changeTab: function(currTab){
				xqmsMng.currTab = currTab;
			}
			// 검색조회
			, btnSearch: function(){
				if (xqmsMng.criteria.startDt > xqmsMng.criteria.endDt){
					alert("시작일자와 종료일자를 확인해주세요.");
					xqmsMng.searchChk = false;
					return;
				} else {
					xqmsMng.searchChk = true;
					if (xqmsMng.currTab == 'bmt'){
						this.getProjectXqmsMngBmtList();
					} else if (xqmsMng.currTab == 'channel'){
						this.getProjectXqmsMngChannelList();
					} else if(xqmsMng.currTab == "uiReacion"){
						this.getProjectXqmsMngUiReactionList();
					} else if(xqmsMng.currTab == "remoconRobot"){
						this.getProjectXqmsMngRemoconRobotList();
					} else if(xqmsMng.currTab == "lkfs"){
						this.getProjectXqmsMngLkfsList();
					}					
				}

			}			
			// 측정모델 검색조건
			, addModelList: function(data){
				var chk = true;
				var modelSeqArray = xqmsMng.criteria.modelSeqArray;
				
				for (var i=0; i < modelSeqArray.length; i++) {
					if (modelSeqArray[i] == data.modelSeq) {
						chk = false;
						break;
					}
				}			
				if (chk) {
					this.modelList.push(data);
					this.criteria.modelSeqArray.push(data.modelSeq);
				} else {
					alert("이미 추가된 측정모델입니다.");
				}
			}
			, delModelList: function(index){
				this.modelList.splice(index,1);
				this.criteria.modelSeqArray.splice(index, 1);
			}
			, setCateId: function(obj) {
				this.criteria.bigCateId = obj.bigCateId;
			}
		}
	})
</script>
