<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.nextlab.bmt.mapper.IssueMapper">

	<select id="selectIssueList" parameterType="issueCriteria" resultType="issueVo">
		SELECT	a.issue_id
				, a.pid
				, a.issue_subject
				, a.issue_cont
				, a.progress_stat
				, a.importance
				, a.reg_id 
				, (SELECT user_nm FROM tb_user WHERE user_id = a.reg_id) AS reg_nm
				, a.reg_dtm
				, ISNULL((SELECT TOP 1 DATEDIFF(HH, REG_DTM, GETDATE()) as condition FROM dbo.TB_ISSUE_COMMENT b WHERE b.ISSUE_ID = a.ISSUE_ID ORDER BY b.REG_DTM DESC), -1) AS condition
		FROM	tb_issue a
		WHERE	a.pid = #{pid}
				AND a.reg_dtm BETWEEN CONVERT(DATETIME,#{startDt}+' 00:00:00') AND CONVERT(DATETIME,#{endDt}+' 23:59:59')
				<if test=" chkMyIssue ">
				AND a.reg_id = #{partiId}
				</if>
				<if test="tcCateId != null and tcCateId != ''">
					AND EXISTS (
						SELECT 1
						FROM TB_issue_cate b
						WHERE a.issue_id = b.issue_id
						AND b.tc_cate_id = #{tcCateId}
					)
				</if>
				<if test="importanceArray != null and importanceArray.length > 0">
					AND a.importance IN 
					<foreach collection="importanceArray" item="array" open="(" separator="," close=")">
						#{array}
					</foreach>
				</if>
				<if test="progressStatArray != null and progressStatArray.length > 0">
					AND a.progress_stat IN 
					<foreach collection="progressStatArray" item="array" open="(" separator="," close=")">
						#{array}
					</foreach>
				</if>
				<if test="issueSubject != null and issueSubject != ''">
					AND (
						a.issue_subject LIKE '%' + REPLACE(REPLACE(REPLACE(#{issueSubject},'[','\['), ']','\]'),'_','\_') + '%' ESCAPE '\' 
						OR a.issue_cont LIKE '%' + REPLACE(REPLACE(REPLACE(#{issueSubject},'[','\['), ']','\]'),'_','\_') + '%' ESCAPE '\'
						)
				</if>
				<if test="modelList.size() > 0"> 
					AND a.ISSUE_ID in (
							SELECT c.issue_id  
							FROM dbo.tb_issue c 
							JOIN dbo.tb_issue_model b ON (c.ISSUE_ID = b.ISSUE_ID) 
 							WHERE c.pid = #{pid} 
							AND  
							<foreach collection="modelList" item="model" open="(" separator="or" close=")"> 
 								(b.model_id = #{model.modelId} and b.model_ver = #{model.modelVer}) 
 							</foreach> 							
						) 
 				</if> 
		ORDER BY a.issue_id DESC
	</select>
	
	<select id="selectIssueView" parameterType="String" resultType="issueVo">
		SELECT	issue_id
				, issue_subject
				, issue_cont
				, progress_stat
				, importance
				, pid
				, chasu
				, reg_id
				, reg_dtm 
		FROM	tb_issue
		WHERE	issue_id = #{issueId}
	</select>
	
	<select id="selectIssueTcList" parameterType="String" resultType="issueTcVo">
		SELECT	a.issue_id
				, b.seq
				, b.pid
				, b.tc_id
				, b.tc
				, b.big_cate_id
				, b.middle_cate_id
				, b.small_cate_id
				, b.importance
				, b.tc_division
		FROM	tb_issue_tc a 
				JOIN tb_bmt_tc_info b ON (a.seq=b.seq)
		WHERE	a.issue_id = #{issueId}
	</select>
	
	<select id="selectIssuePartiList" parameterType="String" resultType="issuePartiVo">
		SELECT	a.issue_id
				, a.parti_id
				, b.user_nm
				, (SELECT user_group_nm FROM tb_user_group WHERE user_group_id = b.user_group_id) AS user_group_nm
		FROM	tb_issue_parti a
				JOIN tb_user b ON (b.user_id = a.parti_id)
		WHERE	issue_id = #{issueId}
	</select>
	
	<select id="selectIssueFileList" parameterType="String" resultType="issueFileVo">
		SELECT	issue_id
				, seq
				, file_nm
				, file_path
				, org_file_nm
		FROM	tb_issue_file
		WHERE	issue_id = #{issueId}
	</select>
	
	<select id="selectIssueCommentList" parameterType="String" resultType="issueCommentVo">
		SELECT	a.seq
				, a.issue_id
				, a.comment
				, a.reg_id
				, b.user_nm AS reg_nm
				, (SELECT user_group_nm FROM tb_user_group WHERE user_group_id = b.user_group_id) AS reg_group_nm
				, a.reg_dtm
		FROM	tb_issue_comment a
				JOIN tb_user b ON (b.user_id = a.reg_id)
		WHERE	issue_id = #{issueId}
		ORDER BY a.seq DESC
	</select>
	
	<select id="selectIssueCateList" parameterType="String" resultType="issueCateVo">
		SELECT	a.tc_cate_id
				, a.issue_id
				, a.mod_dtm
				, a.mod_id
				, b.pid
				, c.tc_cate_nm
		FROM	tb_issue_cate a
				JOIN tb_issue b
				ON (b.issue_id = a.issue_id)
				JOIN tb_bmt_tc_category c
				ON (c.pid = b.pid
					AND c.tc_cate_id = a.tc_cate_id)
		WHERE	a.issue_id = #{issueId}
	</select>
	
	<select id="selectIssueCategoryList" parameterType="String" resultType="issueCateVo">
		SELECT   a.TC_CATE_ID ,
		         c.TC_CATE_NM
		FROM     dbo.TB_issue_cate a
		JOIN dbo.TB_issue b ON (a.ISSUE_ID = b.ISSUE_ID)
		JOIN tb_bmt_tc_category c ON (a.TC_CATE_ID = C.TC_CATE_ID)
		WHERE    b.PID = #{pid}
		GROUP by a.TC_CATE_ID, c.TC_CATE_NM
	</select>
	
	<select id="selectIssueModelList" parameterType="String" resultType="issueModelVo">
		SELECT	a.model_id
				, a.model_ver
				, a.issue_id
				, a.mod_dtm
				, a.mod_id
				, b.model_nm
		FROM	tb_issue_model a
				JOIN tb_model b
				ON (b.model_id = a.model_id)
		WHERE	issue_id = #{issueId}
	</select>
	
	<insert id="insertIssue" parameterType="issueVo">
		INSERT INTO	tb_issue
			(issue_id, issue_subject, issue_cont, progress_stat, importance, pid
			, chasu
			, reg_id, reg_dtm)
		VALUES
			(#{issueId}, #{issueSubject}, #{issueCont}, #{progressStat}, #{importance}, #{pid}
			, (SELECT project_chasu FROM tb_project WHERE pid = #{pid})
			, #{regId}, GETDATE())
	</insert>
	
	<insert id="insertIssueTc" parameterType="issueTcVo">
		INSERT INTO tb_issue_tc (issue_id, seq)
		VALUES (#{issueId}, #{seq})
	</insert>
	
	<insert id="insertIssueParti" parameterType="issuePartiVo">
		INSERT INTO tb_issue_parti (issue_id, parti_id, reg_id, reg_dtm)
		VALUES (#{issueId}, #{partiId}, #{regId}, GETDATE())
	</insert>
	
	<insert id="deleteIssueParti" parameterType="String">
		DELETE FROM tb_issue_parti 
		WHERE issue_id = #{issueId}
	</insert>
	
	<insert id="insertIssueFile" parameterType="issueFileVo">
		INSERT INTO tb_issue_file 
			(issue_id
			, seq
			, file_nm, file_path, org_file_nm)
		VALUES 
			(#{issueId}
			, (SELECT ISNULL(CONVERT(INT,MAX(seq)+1), 1) FROM tb_issue_file WHERE issue_id = #{issueId})
			, #{fileNm}, #{filePath}, #{orgFileNm})
	</insert>
	
	<insert id="insertIssueComment" parameterType="issueCommentVo">
		INSERT INTO tb_issue_comment 
			(issue_id, comment, reg_id, reg_dtm)
		VALUES
			(#{issueId}, #{comment}, #{regId}, GETDATE())
	</insert>
	
	<insert id="insertIssueCate" parameterType="issueVo">
		INSERT INTO tb_issue_cate
			(tc_cate_id, issue_id, mod_id, mod_dtm)
		VALUES
			(#{tcCateId}, #{issueId}, #{regId}, GETDATE())
	</insert>
	
	<insert id="insertIssueModel" parameterType="issueVo">
		INSERT INTO tb_issue_model
			(model_id, model_ver, issue_id, mod_id, mod_dtm)
		VALUES
			(#{modelId}, #{modelVer}, #{issueId}, #{modId}, GETDATE())
	</insert>
	
	<update id="updateIssueComment" parameterType="issueCommentVo">
		UPDATE tb_issue_comment SET
			comment = #{comment}
			, reg_id = #{regId}
			, reg_dtm = GETDATE()
		WHERE seq = #{seq}
	</update>
	
	<update id="updateIssueProgressStat" parameterType="issueVo">
		UPDATE	tb_issue SET
				progress_stat = #{progressStat}
				, mod_id = #{modId}
				, mod_dtm = GETDATE()
		WHERE	issue_id = #{issueId}
	</update>
	<update id="updateIssueProgressStatComment" parameterType="issueVo">
		UPDATE	tb_issue SET
				progress_stat = #{progressStat}
				, mod_dtm = GETDATE()
		WHERE	issue_id = #{issueId}
	</update>
	<delete id="deleteIssuePrc" parameterType="String">
		DELETE FROM tb_issue
		WHERE issue_id = #{issueId}
	</delete>
	<delete id="deleteIssueTc" parameterType="String">
		DELETE FROM tb_issue_tc
		WHERE issue_id = #{issueId}
	</delete>

	<delete id="deleteIssueFile" parameterType="String">
		DELETE FROM tb_issue_file
		WHERE issue_id = #{issueId}
	</delete>
	
	<delete id="deleteIssueCate" parameterType="String">
		DELETE FROM tb_issue_cate
		WHERE issue_id = #{issueId}
	</delete>
	
	<delete id="deleteIssueModel" parameterType="String">
		DELETE FROM tb_issue_model
		WHERE issue_id = #{issueId}
	</delete>
	
	<update id="updateIssuePrc" parameterType="issueVo">
		UPDATE	tb_issue SET
			issue_subject = #{issueSubject}
			, importance = #{importance}
			, issue_cont = #{issueCont}
		WHERE issue_id = #{issueId}
	</update>

</mapper>