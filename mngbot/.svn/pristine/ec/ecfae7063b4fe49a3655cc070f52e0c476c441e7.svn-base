<%@ page contentType="text/html" pageEncoding="UTF-8" %>
<%@ taglib uri="http://www.nextlab.co.kr/tags/nextlab" prefix="nl"%>
<div class="content" id="appData">
	<div class="sub_layout has_snb">
		<div class="cont_wrap">
			<div class="sort_area">
				<div class="sel_item full">
					<span class="sort_tit">검색어</span>
					<input type="text" class="full" v-model="scenarioFileVo.fileNm" placeholder="파일명 혹은 파일정보 입력" />
				</div>
				<button class="g_btn01" @click="getList()">조회</button>
			</div>
			
			<div class="tb_desc">
				<p>조회결과 : {{scenarioList.length | number}}건</p>
				<div class="btn_wrap">
					<button class="g_btn01">삭제</button>	
					<button class="g_btn03" @click="goScenarioFileForm">업로드</button>
				</div>
			</div>
			<div class="g_table">
				<table>
					<caption>중요도, 진행사황, 이슈제목 등으로 구성된 표입니다.</caption>
					<colgroup>
						<col style="width:5%;">
						<col style="width:5%;">
						<col style="width:15%;">
						<col>
						<col style="width:15%;">
						<col style="width:15%;">
					</colgroup>
					<thead>
						<tr>
							<th><input type="checkbox" v-model="selectAll"></th>
							<th>No.</th>
							<th>파일명</th>
							<th>파일정보</th>
							<th>등록자</th>
							<th>등록일시</th>
						</tr>
					</thead>
					<tbody>
						<tr v-for="(list,idx) in pagingList">
							<td @click="chk(list.seq)"><input type="checkbox" :value="list.seq" v-model="chkArray" @click.stop></td>
							<td>{{getFirstPage - idx}}</td>
							<td><a @click="getFileDown(list)" class="link">{{list.orgFileNm}}</a></td>
							<td class="l_align"><span v-html="list.fileInfo"></span></td>
							<td>{{list.regNm}}</td>
							<td>{{list.regDtm | dateTimeFormat}}</td>
						</tr>
						<tr v-if="pagingList.length == 0">
							<td colspan="6">검색 결과가 없습니다.</td>
						</tr>
					</tbody>
				</table>
				<paginator ref="paginator" :go-fn="getPagingList"></paginator>
			</div>
		</div>
	</div>
</div>

<script>

var list = new Vue({
	el: '#appData'
	, data: {
		scenarioList: []
		, pagingList: []
		, scenarioFileVo: {
			fileNm: ''
		}
		, chkArray: []
	}
	, beforeMount: function() {
		this.$nextTick(function() {
			this.getList();
		});
	}
	, computed: {
		getFirstPage: function(){
			return this.$refs.paginator.pageNumDesc;
		}
		, selectAll: {
			get: function () {
				var total = this.pagingList.length;
				var cnt = 0;
				for (var i=0; i< total; i++) {
					for (var j=0; j<this.chkArray.length; j++) {
						if (this.pagingList[i].seq == this.chkArray[j]) {
							cnt++;
							break;
						}
					}
				}
				return total == cnt && cnt > 0;
			}
			, set: function (value) {
				var chkArray = [];
				if (value) {
					this.pagingList.forEach(function (tc) {
						chkArray.push(tc.seq);
					});
				}
				this.chkArray = chkArray;
			}
		}
	}
	, methods: {
		getList: function() {
			var param = this.scenarioFileVo;
			$.ajax({
				type: "post"
				, url : "/bot/scenario/getScenarioList"
				, contentType: "application/json"
				, data : JSON.stringify(param)
				, success: function(data) {
					for (var i=0; i<data.scenarioList.length; i++) {
						var scenario = data.scenarioList[i];
						scenario.fileInfo = scenario.fileInfo.replace(/(?:\n)/g, '<br>');
						scenario.fileInfo.split('\n').join('<br>');
					}
					list.scenarioList = data.scenarioList;
					list.getPagingList();
					list.goPage(1);
				}
				, error: function(xhr, status, error) {
					alert($(xhr.responseText).text());
				}
			});
		}
		, getPagingList: function () {
			this.pagingList = this.$refs.paginator.pagingList(this.scenarioList);
		}
		, goPage: function(page){
			this.$refs.paginator.goPage(page);
		}
		, chk: function(seq) {
			var _chkArray = this.chkArray;
			
			if (_chkArray.indexOf(seq) == -1) { // 배열에 존재 하지 않으면
				_chkArray.push(seq);
			} else if (_chkArray.indexOf(seq) != -1) { // 배열에 존재 하면
				_chkArray.splice(_chkArray.indexOf(seq), 1);
			}
		}
		, getFileDown: function(list) {
			fileDown(list.filePath, list.fileNm, list.orgFileNm);
		}
		, goScenarioFileForm: function() {
			showPopupLayer('/bot/scenario/scenarioFileForm');
		}
	}
});

</script>
