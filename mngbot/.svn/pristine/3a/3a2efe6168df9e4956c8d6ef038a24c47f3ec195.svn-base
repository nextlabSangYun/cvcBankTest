/**
 * @title	: QA project service 구현
 * @package	: kr.co.nextlab.qa.service.impl
 * @file	: QaProjectServiceImpl.java
 * @author	: winolonam
 * @date	: 2018. 07. 10.
 * @desc	: 
 */
package kr.co.nextlab.qa.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ejb.access.EjbAccessException;
import org.springframework.stereotype.Service;

import kr.co.nextlab.comm.service.SequenceService;
import kr.co.nextlab.qa.mapper.QaProjectMapper;
import kr.co.nextlab.qa.model.QaModelVerHstVo;
import kr.co.nextlab.qa.model.QaProjectChasuHstVo;
import kr.co.nextlab.qa.model.QaProjectCriteria;
import kr.co.nextlab.qa.model.QaProjectModelVo;
import kr.co.nextlab.qa.model.QaProjectPartiVo;
import kr.co.nextlab.qa.model.QaProjectVo;
import kr.co.nextlab.qa.service.QaProjectService;

@Service
public class QaProjectServiceImpl implements QaProjectService {
	
	@Autowired
	private QaProjectMapper qaProjectMapper;
	
	@Autowired
	private SequenceService sequenceService;

	/**
	 * 참여한 프로젝트 리스트 차수 조회
	 * @param qaProjectVo
	 * @return 참여한 프로젝트 차수 리스트
	 */
	@Override
	public List<QaProjectVo> selectMyProjectChasuList(QaProjectVo qaProjectVo) {
		return qaProjectMapper.selectMyProjectChasuList(qaProjectVo);
	}

	/**
	 * 프로젝트 진행현황 리스트 조회
	 * @param qaProjectVo
	 * @return 프로젝트 진행현황 리스트
	 */
	@Override
	public List<QaProjectVo> selectProjectStatusList(QaProjectVo qaProjectVo) {
		return qaProjectMapper.selectProjectStatusList(qaProjectVo);
	}
	
	/**
	 * 참여한 프로젝트 리스트 조회
	 * @param qaProjectVo
	 * @return 참여한 프로젝트 리스트
	 */
	@Override
	public List<QaProjectVo> selectMyProjectList(QaProjectVo qaProjectVo) {
		return qaProjectMapper.selectMyProjectList(qaProjectVo);
	}
	
	/**
	 * 참여한 프로젝트 overview 리스트 조회
	 * @param qaProjectVo
	 * @return 참여한 프로젝트 리스트
	 */
	@Override
	public List<QaProjectVo> selectMyProjectOverviewList(QaProjectVo qaProjectVo) {
		return qaProjectMapper.selectMyProjectOverviewList(qaProjectVo);
	}

	/**
	 * 전체프로젝트 조회
	 * @param qaProjectCriteria
	 * @return
	 */
	@Override
	public List<QaProjectVo> selectProjectList(QaProjectCriteria qaProjectCriteria) {
		return qaProjectMapper.selectProjectList(qaProjectCriteria);
	}

	/**
	 * 프로젝트태그 중복 확인
	 * @param tcPrefix
	 * @return
	 */
	@Override
	public boolean selectCheckTcPrefix(String tcPrefix) {
		int cnt = 0;
		cnt = qaProjectMapper.selectCheckTcPrefix(tcPrefix);
		if (cnt == 0) {
			return false;
		}
		return true;
	}

	/**
	 * 프로젝트 기본정보 등록
	 * @param qaProjectVo 프로젝트 정보
	 * @return
	 */
	@Override
	public boolean insertProject(QaProjectVo qaProjectVo) {
		/**
		 * 등록값 체크 용 변수
		 */
		int cnt = 0;
		int cntModel = 0;
		int cntModelHst = 0;
		int cntParti = 0;
		int cntChasu = 0;
		
		/**
		 * 프로젝트 아이디 생성
		 */
		qaProjectVo.setPid(sequenceService.getQaProjectId());
		qaProjectVo.setChasu(1);
		qaProjectVo.setProjectStatCd("C301");
		/**
		 * 기본정보 생성
		 */
		cnt = qaProjectMapper.insertProject(qaProjectVo);
		
		/**
		 * 측정모델정보 생성
		 */
		for (QaProjectModelVo qaProjectModelVo : qaProjectVo.getModelList()) {
			qaProjectModelVo.setPid(qaProjectVo.getPid());
			qaProjectModelVo.setRegId(qaProjectVo.getRegId());
			qaProjectModelVo.setModId(qaProjectVo.getRegId());
			cntModel += qaProjectMapper.insertQaProjectModel(qaProjectModelVo);
			
			QaModelVerHstVo qaModelVerHstVo = new QaModelVerHstVo();
			qaModelVerHstVo.setModelSeq(qaProjectModelVo.getModelSeq());
			qaModelVerHstVo.setModelVer(qaProjectModelVo.getModelVer());
			qaModelVerHstVo.setRegId(qaProjectVo.getRegId());
			cntModelHst += qaProjectMapper.insertQaModelVerHst(qaModelVerHstVo);
		}
		
		/**
		 * 참여자정보 생성
		 */
		for (QaProjectPartiVo qaProjectPartiVo : qaProjectVo.getPartiList()) {
			qaProjectPartiVo.setPid(qaProjectVo.getPid());
			qaProjectPartiVo.setRegId(qaProjectVo.getRegId());
			cntParti += qaProjectMapper.insertQaProjectParti(qaProjectPartiVo);
		}
		
		/**
		 * 차수히스토리 등록
		 */
		QaProjectChasuHstVo qaProjectChasuHstVo = new QaProjectChasuHstVo();
		qaProjectChasuHstVo.setPid(qaProjectVo.getPid());
		qaProjectChasuHstVo.setRegId(qaProjectVo.getRegId());
		qaProjectChasuHstVo.setChasuStDtm(qaProjectVo.getProjectStDt());
		cntChasu = qaProjectMapper.insertQaProjectChasuHst(qaProjectChasuHstVo);
		
		/**
		 * 등록결과 확인
		 */
		if (cnt <= 0 
				|| cntModel != qaProjectVo.getModelList().size()
				|| cntModelHst != qaProjectVo.getModelList().size()
				|| cntParti != qaProjectVo.getPartiList().size()
				|| cntChasu <= 0) {
			throw new EjbAccessException("새 프로젝트 등록이 실패하였습니다.");
		}
		
		return true;
	}

	/**
	 * 프로젝트 기본정보 조회
	 * @param pid
	 * @return
	 */
	@Override
	public QaProjectVo selectProjectView(String pid) {
		return qaProjectMapper.selectProjectView(pid);
	}

	/**
	 * 프로젝트 모델 리스트 조회
	 * @param pid
	 * @return
	 */
	@Override
	public List<QaProjectModelVo> selectQaProjectModelList(String pid) {
		return qaProjectMapper.selectQaProjectModelList(pid);
	}

	/**
	 * 측정모델 버전 변경이력 리스트 조회
	 * @param modelSeq
	 * @return
	 */
	@Override
	public List<QaProjectModelVo> selectProjectModelHstList(Integer modelSeq) {
		return qaProjectMapper.selectProjectModelHstList(modelSeq);
	}

	/**
	 * 프로젝트 참여인력 조회
	 * @param pid
	 * @return
	 */
	@Override
	public List<QaProjectPartiVo> selectProjectPartiList(String pid) {
		return qaProjectMapper.selectProjectPartiList(pid);
	}
}
