<%@ page contentType="text/html" pageEncoding="UTF-8" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ taglib uri="http://www.nextlab.co.kr/tags/nextlab" prefix="nl"%>
<link href="/css/kendo.common-material.min.css" rel="stylesheet">
<link href="/css/kendo.material.min.css" rel="stylesheet">
<script type="text/javascript" src="/js/kendo.all.min.js"></script>
<div class="content">
	<div class="sub_layout has_snb" v-if="decisionMaking.voteStat == 'C304'">
		<div class="tit_wrap">
			<p class="cate_tit">투표 설정</p>
		</div>
		<div class="g_table04">
			<table>
				<caption></caption>
				<colgroup>
					<col style="width: 170px;">
					<col>
				</colgroup>
				<tbody>
					<tr>
						<th>등록일시</th>
						<td>{{decisionMaking.regDtm | dateTimeFormat}}</td>
					</tr>
					<tr>
						<th>투표제목</th>
						<td class="reg insert_con">{{decisionMaking.voteSubject}}</td>
					</tr>
					<tr>
						<th>투표내용</th>
						<td class="reg insert_con"><div class="long_txt" v-html="decisionMaking.voteCont"></div></td>
					</tr>
					<tr>
						<th>투표대상</th>
						<td class="reg_button">
							<div class="reg_list border_none" v-show="decisionMaking.voterList.length>0">
								<ul>
									<li v-for="(p, index) in decisionMaking.voterList"><span>{{p.userNm}}({{p.userGroupNm}})</span></li>
								</ul>
							</div>
						</td>
					</tr>
					<tr>
						<th>진행상황<strong>*</strong></th>
						<td class="insert_con">{{decisionMaking.voteStat | code(voteStatCodeStr)}}</td>
					</tr>
					<tr>
						<th>최종결과<strong>*</strong></th>
						<td :class="decisionMaking.lastResultCd == 'B301' ? 'insert_con pass' : 'insert_con fail'">{{decisionMaking.lastResultCd | code(lastResultCodeStr)}}</td>
					</tr>
					<tr>
						<th>총평<strong>*</strong></th>
						<td class="reg insert_con"><div class="long_txt" v-html="decisionMaking.voteGeneralReview"></div></td>
					</tr>
				</tbody>
			</table>
		</div>
		<div class="tit_wrap mgtop40">
			<p class="cate_tit">이슈 목록</p>
		</div>
		<div class="issue_list" v-for="(issue, index) in decisionMaking.issueList">
			<div class="list_title">
				<p># {{index + 1}}</p>
			</div>
			<div class="table_wrap">
				<div class="g_table04 target_height">
					<table>
						<caption></caption>
						<colgroup>
							<col style="width: 150px;">
							<col>
						</colgroup>
						<tbody>
							<tr>
								<th>이슈제목</th>
								<td>{{issue.issueSubject}}</td>
							</tr>
							<tr>
								<th>측정모델</th>
								<td class="insert_con">{{issue.issueModel}}</td>
							</tr>
<!-- 							<tr> -->
<!-- 								<th>중요도</th> -->
<!-- 								<td>{{ issue.importance | code(issueImportanceCode) }}</td> -->
<!-- 							</tr> -->
							<tr>
								<th>대분류</th>
								<td>{{issue.issueLcateCd | code(lCateNm)}}</td>
							</tr>
							<tr>
								<th>이슈내용</th>
								<td><span v-html="issue.issueCont"></span></td>
							</tr>
							<tr>
								<th>첨부파일</th>
								<td class="insert_con">
									<ul class="inc_file">
										<li v-for="(file, index) in issue.issueFileList"><a @click="getFileDown(file)">{{file.orgFileNm}}</a></li>
									</ul>
								</td>
							</tr>
						</tbody>
					</table>
				</div>
				<div class="vote_result mirror_height">
					<p class="th_title">투표현황</p>
					<div class="back_circle">
						<div>
							<p class="vote_num pass">{{issue.passCnt}}</p>
							<p>Pass</p>
						</div>
						<div>
							<p class="vote_num fail">{{issue.failCnt}}</p>
							<p>Fail</p>
						</div>
						<div>
							<p class="vote_num">{{issue.totalVoterCnt - issue.passCnt - issue.failCnt}}</p>
							<p>미응답</p>
						</div>
					</div>
				</div>
			</div>
			<div class="g_table">
				<table>
					<caption></caption>
					<colgroup>
						<col style="width: 5%;">
						<col style="width: 17%;">
						<col style="width: 8%;">
						<col>
						<col style="width: 15%;">
					</colgroup>
					<thead>
						<th>No.</th>
						<th>투표자</th>
						<th>투표결과</th>
						<th>총평</th>
						<th>투표일시</th>
					</thead>
					<tbody>
						<tr v-for="(management, index) in issue.voteManagementList">
							<td>{{index + 1}}</td>
							<td>{{management.userNm}}({{management.userGroupNm}})</td>
							<td :class="management.voteResultCd == 'B301' ? 'pass' : 'fail'">{{ management.voteResultCd | code(lastResultCodeStr) }}</td>
							<td class="l_align"><div class="long_txt" v-html="management.voteComment"></div></td>
							<td>{{management.regDtm | dateTimeFormat}}</td>
						</tr>
						<tr v-if="issue.voteManagementList.length == 0">
							<td colspan="5">투표 내역이 없습니다.</td>
						</tr>
					</tbody>
				</table>
			</div>
		</div>
		<div class="tit_wrap mgtop40">
			<p class="cate_tit">이슈 별 투표현황</p>
		</div>
		<div class="issue_list" v-for="(issue, index) in decisionMaking.issueList">
			<div class="list_title">
				<p># {{index + 1}}</p>
			</div>
			<div class="table_wrap">
				<div class="g_table04">
					<table>
						<caption></caption>
						<colgroup>
							<col style="width: 150px;">
							<col>
						</colgroup>
						<tbody>
							<tr>
								<th>이슈제목</th>
								<td>{{issue.issueSubject}}</td>
							</tr>
							<tr>
								<th>측정모델</th>
								<td class="insert_con">{{issue.issueModel}}</td>
							</tr>
<!-- 							<tr> -->
<!-- 								<th>중요도</th> -->
<!-- 								<td>{{ issue.importance | code(issueImportanceCode) }}</td> -->
<!-- 							</tr> -->
							<tr>
								<th>대분류</th>
								<td>{{issue.issueLcateCd | code(lCateNm)}}</td>
							</tr>
							<tr>
								<th>투표현황</th>
								<td>
									<div class="back_circle">
										<div>
											<p class="vote_num pass">{{issue.passCnt}}</p>
											<p>Pass</p>
										</div>
										<div>
											<p class="vote_num fail">{{issue.failCnt}}</p>
											<p>Fail</p>
										</div>
										<div>
											<p class="vote_num">{{issue.totalVoterCnt - issue.passCnt - issue.failCnt}}</p>
											<p>미응답</p>
										</div>
									</div>
								</td>
							</tr>
						</tbody>
					</table>
				</div>
				<div class="chart">
					<div class="chartPointer" :id="issue.issueId"></div>
				</div>
			</div>
		</div>
	</div>
	<div class="sub_layout has_snb" v-else-if="isCheck">
		<div class="tit_wrap">
			<p class="cate_tit">투표 개요</p>
		</div>
		<div class="g_table04">
			<table>
				<caption></caption>
				<colgroup>
					<col style="width: 170px;">
					<col>
				</colgroup>
				<tbody>
					<tr>
						<th>등록일시</th>
						<td>{{decisionMaking.regDtm | dateTimeFormat}}</td>
					</tr>
					<tr>
						<th>투표제목</th>
						<td>{{decisionMaking.voteSubject}}</td>
					</tr>
					<tr>
						<th>투표내용</th>
						<td><div class="long_txt" v-html="decisionMaking.voteCont"></div></td>
					</tr>
					<tr>
						<th>투표대상</th>
						<td class="reg_button">
							<div class="reg_list border_none" v-show="decisionMaking.voterList.length>0">
								<ul>
									<li v-for="(p, index) in decisionMaking.voterList"><span>{{p.userNm}}({{p.userGroupNm}})</span></li>
								</ul>
							</div>
						</td>
					</tr>
					<tr>
						<th>진행상황</th>
						<td>{{ decisionMaking.voteStat | code(voteStatCodeStr) }}</td>
					</tr>
				</tbody>
			</table>
		</div>
		<div class="tit_wrap mgtop40">
			<p class="cate_tit">이슈 목록</p>
			<div class="btn_wrap">
				<button class="g_btn03" @click="getCheckVoter">저장</button>
			</div>
		</div>
		<div class="issue_list" v-for="(issue, index) in decisionMaking.issueList">
			<div class="list_title">
				<p># {{index + 1}}</p>
			</div>
			<div class="table_wrap">
				<div class="g_table04 w100">
					<table class="voteTable" :issueId="issue.issueId">
						<caption></caption>
						<colgroup>
							<col style="width: 170px;">
							<col>
							<col style="width: 170px;">
							<col>
						</colgroup>
						<tbody>
							<tr>
								<th>이슈제목</th>
								<td colspan="3">{{issue.issueSubject}}</td>
							</tr>
							<tr>
								<th>측정모델</th>
								<td colspan="3" class="insert_con">{{issue.issueModel}}</td>
							</tr>
							<tr>
								<th>중요도</th>
								<td>{{ issue.importance | code(issueImportanceCode) }}</td>
								<th>대분류</th>
								<td>{{issue.issueLcateCd | code(lCateNm)}}</td>
							</tr>
							<tr>
								<th>첨부파일</th>
								<td colspan="3" class="insert_con">
									<ul class="inc_file">
										<li v-for="(file, index) in issue.issueFileList"><a @click="getFileDown(file)">{{file.orgFileNm}}</a></li>
									</ul>
								</td>
							</tr>
							<tr>
								<th>이슈내용</th>
								<td colspan="3"><span v-html="issue.issueCont"></span></td>
							</tr>
							<tr>
								<th>결과</th>
								<td colspan="3" class="reg insert_con">
									<select name="voteResultCd">
										<option value="">- 선택 -</option>
										<option v-for="list in getLastResultCodeList" :value="list.codeId">{{list.codeNm}}</option>
									</select>
								</td>
							</tr>
							<tr>
								<th>코멘트</th>
								<td colspan="3" class="reg insert_con">
									<textarea class="full" cols="30" rows="5" name="voteComment" placeholder="코멘트를 입력하세요."></textarea>
								</td>
							</tr>
						</tbody>
					</table>
				</div>
			</div>
		</div>
	</div>
	<div class="sub_layout has_snb" v-else>
		<div class="cont_wrap">
			<div class="vote_none">
				<p>등록된 투표가 없습니다.</p>
				<button class="big_btn01" @click="addVote">투표 개설하기</button>
			</div>
		</div>
	</div>
</div>
<script>
	var view = new Vue({
		el: '.content'
		, data: {
			pid: '<c:out value="${param.pid}"/>'
			, authId: '<c:out value="${authId}"/>'
			, userId: '<c:out value="${userId}"/>'
			, isCheck: false
			, isAdmin: false
			, isChart: false
			, isVote: false
			, decisionMaking: {
			}
			, voteStatCodeStr: '<nl:codeListJson codeType="C300" />'
			, voteStatFilter: ['C301', 'C304']
			, voteStatCodeList: []
			, lastResultCodeStr: '<nl:codeListJson codeType="B300" />'
			, lastResultFilter: ['B301', 'B302']
			, lastResultCodeList: []
			, issueImportanceCode: '<nl:codeListJson codeType="B100" />'
			, lCateNm: '<nl:codeListJson codeType="D500" />'
		}
		, beforeMount: function() {
			this.$nextTick(function() {
				this.voteStatCodeList = JSON.parse(decodeURIComponent(this.voteStatCodeStr));
				this.lastResultCodeList = JSON.parse(decodeURIComponent(this.lastResultCodeStr));
				this.getVote();
			});
		}
		, mounted: function() {
		}
		, updated: function() {
			if (!this.isChart) {
				this.setIssueChart();
				this.isChart = true;
			}
			if (!this.isVote) {
				this.setVoteTable();
				this.isVote = true;
			}
			voteStateHeight();
		}
		, computed: {
			getVoteStatCodeList: function() {
				var voteStatFilter = this.voteStatFilter;
				return this.voteStatCodeList.filter(function(voteStatCode) {
					return voteStatFilter.some(function(m) {
						return voteStatCode.codeId === m;
					});
				}).sort(function(a,b) {
					return a.menuOrder - b.menuOrder;
				});
			}
			, getLastResultCodeList: function() {
				var lastResultFilter = this.lastResultFilter;
				return this.lastResultCodeList.filter(function(lastResultCode) {
					return lastResultFilter.some(function(m) {
						return lastResultCode.codeId === m;
					});
				}).sort(function(a,b) {
					return a.menuOrder - b.menuOrder;
				});
			}
		}
		, methods: {
			getVote: function() {
				$.get("/bmt/issue/getVote?pid="+ pid, function(data){
					if (data.decisionMaking != null) {
						view.isCheck = true;
					} else {
						data.decisionMaking = {};
					}
					view.decisionMaking = data.decisionMaking;
// 					if (view.authId === 'AU002') {
// 						view.isAdmin = true;
// 						if (view.decisionMaking.issueList != null) {
// 							for (var i=0; i<view.decisionMaking.issueList.length; i++) {
// 								var issue = view.decisionMaking.issueList[i];
// 								if (issue.voteManagementList.length > 0) {
// 									for (var j=0; j<issue.voteManagementList.length; j++) {
// 										var voteManagement = issue.voteManagementList[j];
// 										var voteCommentStr = '<span>';
// 										voteCommentStr += voteManagement.voteComment.split('\n').join('</span><span>');
// 										voteCommentStr += '</span>';
// 										voteManagement.voteComment = voteCommentStr;
// 									}
// 								}
// 							}
// 						}
// 					} else 
					if (view.decisionMaking.voteStat == 'C304') {
						for (var i=0; i<view.decisionMaking.issueList.length; i++) {
							var issue = view.decisionMaking.issueList[i];
							
							issue.issueCont = issue.issueCont.replace(/(?:\n)/g, '<br>');
							issue.issueCont.split('\n').join('<br>');
							
							if (issue.voteManagementList.length > 0) {
								for (var j=0; j<issue.voteManagementList.length; j++) {
									var voteManagement = issue.voteManagementList[j];
									var voteCommentStr = '<span>';
									voteCommentStr += voteManagement.voteComment.split('\n').join('</span><span>');
									voteCommentStr += '</span>';
									voteManagement.voteComment = voteCommentStr;
								}
							}
						}
						
						var voteGeneralReviewStr = '<span>';
						voteGeneralReviewStr += view.decisionMaking.voteGeneralReview.split('\n').join('</span><span>');
						voteGeneralReviewStr += '</span>';
						view.decisionMaking.voteGeneralReview = voteGeneralReviewStr;
						
						var voteContStr = '<span>';
						voteContStr += view.decisionMaking.voteCont.split('\n').join('</span><span>');
						voteContStr += '</span>';
						view.decisionMaking.voteCont = voteContStr;
					} else {
						for (var i=0; i<view.decisionMaking.issueList.length; i++) {
							var issue = view.decisionMaking.issueList[i];
							issue.issueCont = issue.issueCont.replace(/(?:\n)/g, '<br>');
							issue.issueCont.split('\n').join('<br>');
						}
						
						if (view.decisionMaking.voteCont != null) {
							var voteContStr = '<span>';
							voteContStr += view.decisionMaking.voteCont.split('\n').join('</span><span>');
							voteContStr += '</span>';
							view.decisionMaking.voteCont = voteContStr;
						}
					}
					if (view.decisionMaking.lastResultCd === null) {
						view.decisionMaking.lastResultCd = "";
					}
				});
			}
			, addVoterList: function(data) {
				var chk = this.decisionMaking.voterList.some(function(p) {
					return p.voterId == data.userId;
				});
				
				if (!chk) {
					data.voterId = data.userId;
					this.decisionMaking.voterList.push(data);
				} else {
					alert("이미 추가된 참여인력입니다.");
				}
			}
			, delVoterList: function(index) {
				this.decisionMaking.voterList.splice(index, 1);
			}
			, btnSave: function() {
				var param = this.decisionMaking;
				if (param.voteSubject.length < 1){
					alert("투표 제목을 입력하세요.");
					return false;
				}
				
				if (param.voteCont.length < 1){
					alert("투표 내용을 입력하세요.");
					return false;
				}
				
				if (param.voterList.length < 1) {
					alert("투표 대상자를 추가해 주세요.");
					return false;
				}
				
				if (param.voteStat == '') {
					alert("투표 진행상황을 선택해주세요.");
					return false;
				}
				
				if (param.voteStat == 'C304') {
					if (param.lastResultCd == '') {
						alert("투표 최종결과를 선택해주세요.");
						return false;
					}
					
					if (isEmpty(param.voteGeneralReview) || param.voteGeneralReview.length < 1) {
						alert("총평을 입력해주세요.");
						return false;
					}
				}
				
				var cmsg = "수정하시겠습니까?";
				if (confirm(cmsg)){
					$.ajax({
						type: "post"
						, url: "/bmt/issue/modVotePrc"
						, contentType: "application/json"
						, data : JSON.stringify(param)
						, success: function(data){
							if (data.save){
								alert("수정되었습니다.");
								location.reload();
							} else {
								alert(data.message);
							}
						}
						, error: function(xhr, status, error){
							alert($(xhr.responseText).text());
						}
					});
				}
			}
			, getFileDown: function(list) {
				fileDown(list.filePath, list.fileNm, list.orgFileNm);
			}
			, addVote: function() {
				if (this.authId === 'AU002') {
					var pid = this.pid;
					$.get("/bmt/issue/getCheckVote?pid="+ pid, function(data){
						if (data.isCheck) {
							alert('이미 등록된 투표가 있습니다.');
							location.href = '/bmt/issue/decisionMaking?pid='+pid;
						} else {
							popup('/bmt/issue/voteForm?pid='+pid, '의사결정지원', 1080, 500, 'yes');
						}
					});
				} else {
					alert('접근권한이 없습니다.');
					return;
				}
			}
			, btnCommentSave: function() {
				var voteManagementList = [];
				var voteResultCdData = [];
				var voteCommentData = [];
				$("[name='voteResultCd']").each(function() {
					voteResultCdData.push({
						'issueId' : $(this).parent().parent().parent().parent('table').attr('issueId')
						, 'voteResultCd' : $(this).val()
					});
				});
				$("[name='voteComment']").each(function() {
					voteCommentData.push({
						'issueId' : $(this).parent().parent().parent().parent('table').attr('issueId')
						, 'voteComment' : $(this).val()
					});
				});
				
				var isOk = true;
				for (var i = 0; i < voteResultCdData.length; i++) {
					for (var j = 0; j < voteCommentData.length; j++) {
						if (voteResultCdData[i].issueId === voteCommentData[j].issueId) {
							if (isEmpty(voteResultCdData[i].voteResultCd) || isEmpty(voteCommentData[j].voteComment)) {
								if (isEmpty(voteResultCdData[i].voteResultCd) && !isEmpty(voteCommentData[j].voteComment)) {
									isOk = false;
								}
								if (!isEmpty(voteResultCdData[i].voteResultCd) && isEmpty(voteCommentData[j].voteComment)) {
									isOk = false;
								}
							} else {
								voteManagementList.push({
									'pid' : this.pid
									, 'voteSeq' : this.decisionMaking.voteSeq
									, 'issueId' : voteResultCdData[i].issueId
									, 'voteResultCd' : voteResultCdData[i].voteResultCd
									, 'voteComment' : voteCommentData[j].voteComment
								});
							}
						}
					}
				}
				
				if (!isOk || voteManagementList.length == 0) {
					alert("투표한 이슈의 코멘트와 결과를 모두 입력해주세요.");
					return false;
				}
				
				var cmsg = "저장 하시겠습니까?";
				if (confirm(cmsg)){
					$.ajax({
						type: "post"
						, url: "/bmt/issue/regVoteManagementPrc"
						, contentType: "application/json"
						, data : JSON.stringify(voteManagementList)
						, success: function(data){
							if (data.save){
								alert("투표가 완료되었습니다. 완료 이전까지 입력값의 수정이 가능합니다.");
							} else {
								alert(data.message);
							}
						}
						, error: function(xhr, status, error){
							alert($(xhr.responseText).text());
						}
					});
				}
			}
			, getCheckVoter: function() {
				var pid = this.pid;
				var voteSeq = this.decisionMaking.voteSeq;
				$.get("/bmt/issue/getCheckVoter?pid="+ pid+"&voteSeq="+voteSeq, function(data){
					if (data.isCheck) {
						view.btnCommentSave();
					} else {
						alert('투표 대상자가 아닙니다.');
					}
				});
			}
			, setVoteTable: function() {
				$('.voteTable').each(function() {
					var issueId = $(this).attr('issueId');
					for (var i=0; i < view.decisionMaking.issueList.length; i++){
	 					var issue = view.decisionMaking.issueList[i];
	 					if (issueId === issue.issueId) {
	 						for (var j=0; j < issue.voteManagementList.length; j++) {
	 							var voteManagement = issue.voteManagementList[j];
	 							if (view.userId === voteManagement.voterId) {
	 								$(this).find('[name="voteResultCd"]').val(voteManagement.voteResultCd);
	 								$(this).find('[name="voteComment"]').val(voteManagement.voteComment);
	 							}
	 						}
	 					}
					}
				});
			}
			, setIssueChart: function() {
				if (this.decisionMaking.issueList == null) {
					return false;
				}
				
				var _visible = true;
				var series, categories= [];
				
 				for (var i=0; i < this.decisionMaking.issueList.length; i++){
 					var issue = view.decisionMaking.issueList[i];
 					var issueId = issue.issueId;
 					var passCnt = issue.passCnt;
 					var failCnt = issue.failCnt;
 					var noVoteCnt = issue.totalVoterCnt - issue.failCnt - issue.passCnt;
 					var passPercent = parseInt(issue.passCnt / issue.totalVoterCnt * 100);
 					var failPercent = parseInt(issue.failCnt / issue.totalVoterCnt * 100);
 					var noVotePercent = parseInt((issue.totalVoterCnt - issue.failCnt - issue.passCnt) / issue.totalVoterCnt * 100);
 					
 					categories = ['issue'];
 					
 					var data = [];
					data.push({ "source": "Pass", "percentage": passPercent + "% \n" + "(" + passCnt + "건" + ")" });
					data.push({ "source": "Fail", "percentage": failPercent + "% \n" + "(" + failCnt + "건" + ")" });
					data.push({ "source": "미응답", "percentage": noVotePercent + "% \n" + "(" + noVoteCnt + "건" + ")" });
					
					$("#" + issueId).kendoChart({
						dataSource: {
							data: data
						},
						legend: {
							position: "custom"
							,orientation: "horizontal"
							,offsetY: 250
							,offsetX: 80
						},
						seriesDefaults: {
							labels: {
								visible: _visible
								, background: "transparent"
								, template: "#= category # \n #= value#"
								, distance: 20
							}
						}
						, chartArea: {
							height: 300
						}
						, series: [{
							type: "pie"
							, field: "percentage"
							, categoryField: "source"
							, startAngle: 150
						}],
						seriesColors: ["#4a66cc","#f45858","#c5c5c5"],
						seriesClick: function() {
						},
						valueAxis: {
							line: {
								visible: false
							}
							,min: 0
							,max : 1
						},
						categoryAxis: {
							categories: categories,
							majorGridLines: {
								visible: false
							}
						},
						tooltip: {
							visible: true,
							template: "#= category # - #= value #"
						},
						overlay: {
							gradient: "none"
						}
					});
				}
			}
			, addIssueLargeAdd: function() {
				popup('/bmt/issue/issueLargeAddForm?pid='+this.pid, '이슈 추가', 1200, 500, 'yes');
			}
			, selectIssue: function(issueIds) {
				var issueList = this.decisionMaking.issueList;
				for (var i = issueIds.length-1; i>=0; i--) {
					var isOk = false;
					for (var j=0; j<issueList.length; j++) {
						if (issueIds[i] === issueList[j].issueId) {
							isOk = true;
							break;
						}
					}
					
					if (isOk) {
						issueIds.splice(i, 1);
					}
				}
				
				if (issueIds.length > 0) {
					var pid = this.pid;
					var voteSeq = this.decisionMaking.voteSeq;
					var param = {
							issueIds : issueIds
							, pid : pid
							, voteSeq : voteSeq
						};
					$.ajax({
						type: "post"
						, url: "/bmt/issue/regVoteIssuePrc"
						, contentType: "application/json"
						, data : JSON.stringify(param)
						, success: function(data){
							if (data.save){
								alert("이슈가 등록되었습니다.");
								location.reload();
							} else {
								alert(data.message);
							}
						}
						, error: function(xhr, status, error){
							alert($(xhr.responseText).text());
						}
					});
				}
			}
			, btnIssueDel: function(issueId) {
				var pid = this.pid;
				var voteSeq = this.decisionMaking.voteSeq;
				var param = {
						issueId : issueId
						, pid : pid
						, voteSeq : voteSeq
					};
				var cmsg = "이슈를 삭제하시겠습니까?";
				if (confirm(cmsg)){
					$.ajax({
						type: "post"
						, url: "/bmt/issue/delVoteIssuePrc"
						, contentType: "application/json"
						, data : JSON.stringify(param)
						, success: function(data){
							if (data.del){
								alert("이슈가 삭제되었습니다.");
								location.reload();
							} else {
								alert(data.message);
							}
						}
						, error: function(xhr, status, error){
							alert($(xhr.responseText).text());
						}
					});
				}
			}
		}
	});
</script>