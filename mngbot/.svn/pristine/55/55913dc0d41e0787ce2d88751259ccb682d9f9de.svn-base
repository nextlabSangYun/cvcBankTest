/**
 * @title	: (엑셀 업로드)엑셀 데이터 파싱 가상클래스
 * @package	: kr.co.nextlab.excel
 * @file	: ExcelParser.java
 * @desc	: 
 */
package kr.co.nextlab.excel;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.springframework.web.multipart.MultipartFile;

import kr.co.nextlab.annotation.excel.CodeValid;
import kr.co.nextlab.annotation.excel.ExcelValid;
import kr.co.nextlab.comm.model.CodeVo;
import kr.co.nextlab.component.CodeComponent;
import kr.co.nextlab.excel.model.ExcelResult;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public abstract class ExcelParser<E extends ExcelResult> {

	private final static String METHOD_PREFIX_SET = "set";

	/**
	 * 헤더 목록
	 */
	private List<String> headerList;

	/**
	 * 메소드 목록(헤더에 set붙은 메소드)
	 */
	private List<String> methodNamesList;

	/**
	 * 업로드된 엑셀 파일
	 */
	private MultipartFile excelFile;

	/**
	 * 헤더가 시작되는 row
	 */
	private final int headerStartRow;

	/**
	 * 데이터 시작되는 row
	 */
	private final int dataStartRow;

	/**
	 * 최대 입력 가능 값
	 */
	private final int maxInsertCount;

	public abstract Method[] getMethods();

	public abstract E getNewObject();

	/**
	 * construct
	 * @param headerList
	 * @param headerStartRow
	 * @param dataStartRow
	 * @param maxInsertCount
	 */
	public ExcelParser(List<String> headerList, int headerStartRow, int dataStartRow, int maxInsertCount) {
		this.headerList = headerList;
		this.headerStartRow = headerStartRow;
		this.dataStartRow = dataStartRow;
		this.maxInsertCount = maxInsertCount;
		this.setMethodNamesList();
	}

	/**
	 * 엑셀의 데이터를 해당 객체의 List 형태로 반환 해줌
	 * 
	 * @return
	 */
	public List<E> getDataList() {
		List<E> list = new ArrayList<E>();
		try {
			Workbook workbook = WorkbookFactory.create(this.excelFile.getInputStream());
			Sheet sheet = workbook.getSheetAt(0);

			for (int rowIndex = this.getDataStartRow(); rowIndex < sheet.getPhysicalNumberOfRows(); rowIndex++) {
				Row row = sheet.getRow(rowIndex);
				E e = getNewObject();

				for (int cellIndex = 0; cellIndex < this.getHeaderList().size(); cellIndex++) {
					String headerName = this.getMethodNamesList().get(cellIndex);
					for (Method method : getMethods()) {
						if (StringUtils.equals(headerName, method.getName())) {
							String value = getCellValue(row.getCell(cellIndex));
							setData(e, method, value);
						}
					}
				}

				list.add(e);
			}
		} catch (Exception e) {
			new RuntimeException(e);
		}

		return list;
	}

	/**
	 * 모델의 필수 NeedYn 정보, 코드값 체크
	 */
	@SuppressWarnings("hiding")
	private <E> void validateField(Class<E> clazz, E e, List<String> tempList) throws Exception {
		CodeComponent codeComponent = new CodeComponent();

		// 해당 클래스, 부모 클래스 Field 조회
		Field[] fields = clazz.getDeclaredFields();
		Class<?> superClazz = clazz.getSuperclass();

		// 필드병합
		fields = ArrayUtils.addAll(fields, superClazz.getDeclaredFields());

		// Field 정보체크
		if (fields == null) {
			return;
		}

		// 오류발생시 메시지 저장 변수
		String exceptionMessage = "";

		for (Field field : fields) {
			// 필수정보 조회
			ExcelValid excelValid = field.getDeclaredAnnotation(ExcelValid.class);
			if (excelValid == null) {
				continue;
			}

			// field access 세팅
			field.setAccessible(true);

			String headerName = excelValid.headerName();
			String needYn = excelValid.needYn();
			int digitsCechk = excelValid.digitsCheck();
			String uniqueKeyYn = excelValid.uniqueKeyYn();
			Object value = field.get(e);

			if (log.isDebugEnabled()) {
				log.debug(headerName + " : " + value);
			}

			// 필수 Field 체크
			if (StringUtils.equals(needYn, "Y")) {
				if (value == null || value.equals("")) {
					if (log.isDebugEnabled()) {
						log.debug("[" + headerName + "] 필수값이 없습니다.");
					}
					if (exceptionMessage.isEmpty())
						exceptionMessage = "[" + headerName + "] 필수값이 없습니다.";
				}
			}

			// 중복 체크
			if (exceptionMessage.isEmpty()) {
				if (StringUtils.equals(uniqueKeyYn, "Y")) {
					if (value != null && !value.equals("")) {
						if (tempList.contains(value.toString())) {
							if (log.isDebugEnabled()) {
								log.debug("[" + headerName + "] 중복된 값이 존재합니다.");
							}
							if (exceptionMessage.isEmpty())
								exceptionMessage = "[" + headerName + "] 중복된 값이 존재합니다.";
						} else {
							tempList.add(value.toString());
						}
					}
				}
			}

			// 상위 체크에서 오류가 없을때만 코드 유효성 체크
			if (exceptionMessage.isEmpty()) {
				// 코드정보 조회
				CodeValid codeValid = field.getAnnotation(CodeValid.class);
				// 코드값 체크
				if (codeValid != null && codeValid.codeType() != null && value != null) {
					// 코드 정보 조회
					CodeVo code = codeComponent.getCode(codeValid.codeType(), value.toString());
					if (code == null) {
						if (value == null || value.equals("")) {
							if (log.isDebugEnabled()) {
								log.debug("[" + codeValid.codeName() + "] 필수값이 없습니다.");
							}
							if (exceptionMessage.isEmpty())
								exceptionMessage = "[" + codeValid.codeName() + "] 필수값이 없습니다.";
						}
						if (exceptionMessage.isEmpty())
							exceptionMessage = "[" + codeValid.codeName() + "] 사용할 수 없는 코드값입니다.";
					}
				}
			}

			// 자릿수 Field 체크
			if (digitsCechk > 0) {
				if (value != null && !value.equals("")) {
					if (digitsCechk < value.toString().length()) {
						field.set(e, null);
						if (exceptionMessage.isEmpty())
							exceptionMessage = "[" + headerName + "] 자릿수 초과 하였습니다. (" + value + ")";
					}
				}
			}
		}

		// 유효성 체크시 발견된 오류 메시지가 있을때 exception 처리
		if (!exceptionMessage.isEmpty())
			throw new Exception(exceptionMessage);
	}

	/**
	 * 필수값 체크, 공통코드 체크 후 결과 반환
	 */
	public List<E> validResultList(Class<E> clazz, List<E> eList) {
		List<E> resultList = new ArrayList<>();
		List<String> tempList = new ArrayList<String>();

		if (eList.size() > 0) {
			for (E e : eList) {
				try {
					this.validateField(clazz, e, tempList);
				} catch (Exception e1) {
					e.setResultMsg(e1.getMessage());
					e1.printStackTrace();
				}
				resultList.add(e);
			}
		}
		return resultList;
	}

	public void setData(E e, Method method, String value) {
		Class<?> parameterTypes[] = method.getParameterTypes();
		String parameterType = parameterTypes[0].getSimpleName();

		try {
			if (parameterType.equals("int")) {
				if (StringUtils.isNumeric(value)) {
					method.invoke(e, Integer.parseInt(value));
				} else {
					method.invoke(e, 0);
				}
			} else if (parameterType.equals("boolean")) {
				if (StringUtils.equals(value, "Y")) {
					method.invoke(e, Boolean.TRUE);
				} else {
					method.invoke(e, Boolean.FALSE);
				}
			} else if (!StringUtils.isEmpty(value)) {
				method.invoke(e, value);
			} else {
				method.invoke(e, value);
			}
		} catch (Exception exception) {
			new RuntimeException(exception);
		}
	}

	/**
	 * 파싱 가능한지 확인
	 * 
	 * @return
	 */
	public boolean isValidExcelFile() {
		try {
			if (!org.springframework.util.StringUtils.endsWithIgnoreCase(this.excelFile.getOriginalFilename(),
					"xlsx")) {
				log.debug("파일명 이상");
				return false;
			}

			if (!this.isFormalExcelForm()) {
				log.debug("엑셀파일이 아님");
				return false;
			}

			if (!this.isInMaxInsertCount()) {
				log.debug("등록 가능한 개수 아님");
				return false;
			}

			return true;
		} catch (Exception e) {
			return false;
		}
	}

	/**
	 * 엑셀파일 여부 확인
	 * 
	 * @param dataStartRow
	 * @return
	 */
	private boolean isFormalExcelForm() {
		try {
			Workbook workbook = WorkbookFactory.create(this.excelFile.getInputStream());
			Sheet sheet = workbook.getSheetAt(0);
			Row row = sheet.getRow(this.getHeaderStartRow());

			if (this.getHeaderList().size() != row.getLastCellNum()) {
				throw new Exception();
			}
			/*
			 * int index = 0; Iterator<?> it = row.cellIterator();
			 * while(it.hasNext()) { if
			 * (!StringUtils.equals(it.next().toString(),
			 * this.getHeaderList().get(index++))) { throw new Exception(); } }
			 */

		} catch (Exception e) {
			return false;
		}

		return true;
	}

	/**
	 * 등록 가능한 개수인지 체크
	 * 
	 * @return
	 */
	private boolean isInMaxInsertCount() {
		try {
			Workbook workbook = WorkbookFactory.create(this.excelFile.getInputStream());
			Sheet sheet = workbook.getSheetAt(0);

			if ((sheet.getPhysicalNumberOfRows() - dataStartRow) > maxInsertCount) {
				return false;
			}

		} catch (Exception e) {
			return false;
		}

		return true;
	}

	/**
	 * 엑셀 cell값 가져오기
	 * 
	 * @param cell
	 * @return
	 */
	private String getCellValue(Cell cell) {
		String value = "";

		if (cell != null) {
			switch (cell.getCellTypeEnum()) {
			case FORMULA:
				value = cell.getCellFormula();
				break;
			case NUMERIC:
				value = "" + cell.getNumericCellValue();
				break;
			case STRING:
				value = cell.getStringCellValue();
				break;
			case BOOLEAN:
				value = "" + cell.getBooleanCellValue();
				break;
			default:
				break;
			}
		}

		return value;
	}

	public List<String> getHeaderList() {
		return headerList;
	}

	public MultipartFile getExcelFile() {
		return excelFile;
	}

	public void setExcelFile(MultipartFile excelFile) {
		this.excelFile = excelFile;
	}

	public int getDataStartRow() {
		return dataStartRow;
	}

	public void setMethodNamesList() {
		List<String> methodNamesList = new ArrayList<String>();

		if (this.getHeaderList() != null) {
			for (String header : this.getHeaderList()) {
				String setterName = METHOD_PREFIX_SET + Character.toUpperCase(header.charAt(0)) + header.substring(1);
				methodNamesList.add(setterName);
			}
		}

		this.methodNamesList = methodNamesList;
	}

	public List<String> getMethodNamesList() {
		return this.methodNamesList;
	}

	public int getMaxInsertCount() {
		return maxInsertCount;
	}

	public int getHeaderStartRow() {
		return headerStartRow;
	}

	public void setHeaderList(List<String> headerList) {
		this.headerList = headerList;
	}

	public void setMethodNamesList(List<String> methodNamesList) {
		this.methodNamesList = methodNamesList;
	}
	
}
