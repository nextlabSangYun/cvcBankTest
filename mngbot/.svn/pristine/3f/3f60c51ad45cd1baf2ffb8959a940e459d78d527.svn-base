/**
 * @title	: 프로젝트 게시판 관련 컨트롤러
 * @package	: kr.co.nextlab.qa.controller
 * @file	: QaBoardController.java
 * @author	: winolonam
 * @date	: 2018. 07. 23.
 * @desc	: 
 */
package kr.co.nextlab.qa.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.View;
import org.springframework.web.servlet.view.json.MappingJackson2JsonView;

import kr.co.nextlab.annotation.security.Auth;
import kr.co.nextlab.comm.controller.BaseController;
import kr.co.nextlab.qa.model.QaBoardCommentVo;
import kr.co.nextlab.qa.model.QaBoardVo;
import kr.co.nextlab.qa.service.QaBoardService;
import kr.co.nextlab.qa.service.QaProjectService;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
public class QaBoardController extends BaseController {
	
	@Autowired
	private QaProjectService qaProjectService;
	
	@Autowired
	private QaBoardService qaBoardService;

	/** 
	 * 프로젝트 게시판 목록 페이지;
	 * @param model
	 */
	@RequestMapping("/qa/board/boardList")
	public void boardlist(Model model, String pid){
		model.addAttribute("projectView", qaProjectService.selectProjectView(pid));
	}
	
	/**
	 * pid에 해당되는 게시판 조회
	 * @param model
	 * @param pid (프로젝트 아이디)
	 * @return 
	 */
	@RequestMapping("/qa/board/getBoardList")
	public View getBoardList(Model model, String pid){
		model.addAttribute("boardList", qaBoardService.selectBoardList(pid));
		return new MappingJackson2JsonView();
	}
	
	/**
	 * 프로젝트 게시판 등록,수정 폼 
	 * @param model
	 */
	@Auth(url={"/qa/board/boardList"})
	@RequestMapping("/qa/board/boardForm")
	public void boardForm(Model model, String pid){
		model.addAttribute("projectView", qaProjectService.selectProjectView(pid));
		model.addAttribute("user", super.getUser());
	}
	
	/**
	 * 프로젝트 게시판 상세조회
	 * @param model
	 * @param seq
	 * @return 
	 */
	@RequestMapping("/qa/board/getBoardView")
	public View getBoardView(Model model, int seq){
		model.addAttribute("view", qaBoardService.selectBoardView(seq));
		model.addAttribute("fileList", qaBoardService.selectBoardFileList(seq));
		model.addAttribute("commentList", qaBoardService.selectBoardCommentList(seq));
		return new MappingJackson2JsonView();
	}
	
	/**
	 * 프로젝트 게시판 게시글 등록 프로세스
	 * @param model
	 * @param vo
	 * @return
	 */
	@Auth(url={"/qa/board/boardList"})
	@RequestMapping("/qa/board/regBoardPrc")
	public View regBoardPrc(Model model, @RequestBody QaBoardVo qaboardVo){
		boolean save = false;
		int chk = 0;
		qaboardVo.setRegId(super.getUser().getUserId());
		chk = qaBoardService.insertBoard(qaboardVo);
		if (chk == 0){
			model.addAttribute("message", "저장 실패");
		}else{
			save = true;
		}
		model.addAttribute("save",save);
		return new MappingJackson2JsonView();
	}
	
	/**
	 * 프로젝트 게시판 파일조회 화면
	 * @param model
	 */
	@Auth(url={"/qa/board/boardList"})
	@RequestMapping("/qa/board/boardAttachList")
	public void boardAttachList(Model model){
	}
	
	/**
	 * boarSeq에 맞는 게시판 첨부파일 리스트조회
	 * @param model
	 * @param boardSeq
	 * @return
	 */
	@RequestMapping("/qa/board/getBoardAttachList")
	public View getBoardAttachList(Model model, int seq){
		model.addAttribute("boardAttachList", qaBoardService.selectBoardFileList(seq));
		return new MappingJackson2JsonView();
	}
	
	/**
	 * 프로젝트 게시판 게시글 수정 프로세스
	 * @param model
	 * @param vo
	 * @return
	 */
	@Auth(url={"/qa/board/boardList"})
	@RequestMapping("/qa/board/modBoardPrc")
	public View modBoardPrc(Model model, @RequestBody QaBoardVo qaBoardVo){
		
		boolean save = false;
		if(qaBoardVo.getRegId().contains(super.getUser().getUserId())){
			qaBoardVo.setModId(super.getUser().getUserId());
			qaBoardService.updateBoard(qaBoardVo);
			save = true;
		}
		model.addAttribute("save",save);
		return new MappingJackson2JsonView();
	}
	
	/**
	 * 프로젝트 게시판 해당 seq 게시글 삭제
	 * @param model
	 * @param seq
	 * @return
	 */
	@Auth(url={"/qa/board/boardList"})
	@RequestMapping("/qa/board/delBoardPrc")
	public View delBoardPrc(Model model, int seq){
		boolean del = false;
		int delChk = 0;
		delChk = qaBoardService.deleteBoardPrc(seq);
		if(delChk != 0){
			del = true;
		}
		model.addAttribute("del",del);
		return new MappingJackson2JsonView();
	}
	
	/**
	 * 게시판에 해당하는 commentSeq에 코맨트 저장
	 * @param model
	 * @param seq
	 * @param comment
	 * @return
	 */
	@Auth(url={"/qa/board/boardList"})
	@RequestMapping("/qa/board/regBoardCommentPrc")
	public View regBoardCommentPrc(Model model, Integer seq, String comment){
		QaBoardCommentVo qaBoardCommentVo = new QaBoardCommentVo();
		qaBoardCommentVo.setRegId(super.getUser().getUserId());
		qaBoardCommentVo.setSeq(seq);
		qaBoardCommentVo.setComment(comment);
		boolean save = false;
		try {
			// 코멘트 등록
			save = qaBoardService.insertBoardComment(qaBoardCommentVo);
			model.addAttribute("commentList", qaBoardService.selectBoardCommentList(seq));

		} catch (Exception e) {
			log.error(e.getMessage());
			if (e.getCause() != null) model.addAttribute("message", "저장 실패");
			else model.addAttribute("message", e.getMessage());
		}
		
		model.addAttribute("save", save);
		return new MappingJackson2JsonView();
	}
	
	/**
	 * 게시판에 해당하는 commentSeq에 코맨트 수정
	 * @param model
	 * @param seq
	 * @param comment
	 * @return
	 */
	@Auth(url={"/qa/board/boardList"})
	@RequestMapping("/qa/board/modBoardCommentPrc")
	public View modBoardCommentPrc(Model model, Integer seq, String comment, Integer commentSeq){
		QaBoardCommentVo qaBoardCommentVo = new QaBoardCommentVo();
		qaBoardCommentVo.setRegId(super.getUser().getUserId());
		qaBoardCommentVo.setSeq(seq);
		qaBoardCommentVo.setComment(comment);
		qaBoardCommentVo.setCommentSeq(commentSeq);
		boolean save = false;
		try {
			// 코멘트 등록
			save = qaBoardService.updateBoardComment(qaBoardCommentVo);
			model.addAttribute("commentList", qaBoardService.selectBoardCommentList(seq));

		} catch (Exception e) {
			log.error(e.getMessage());
			if (e.getCause() != null) model.addAttribute("message", "저장 실패");
			else model.addAttribute("message", e.getMessage());
		}
		
		model.addAttribute("save", save);
		return new MappingJackson2JsonView();
	}
	
}
