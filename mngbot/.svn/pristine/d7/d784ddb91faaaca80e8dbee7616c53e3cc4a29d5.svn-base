/**
 * @title	: bmt접수관리 controller
 * @package	: kr.co.nextlab.bmt.controller
 * @file	: RequestController.java
 * @author	: winolonam
 * @date	: 2018. 4. 17.
 * @desc	: 
 */
package kr.co.nextlab.bmt.controller;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.time.DateUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.View;
import org.springframework.web.servlet.view.json.MappingJackson2JsonView;

import kr.co.nextlab.annotation.security.Auth;
import kr.co.nextlab.bmt.model.BmtRequestVo;
import kr.co.nextlab.bmt.model.ReqCommentVo;
import kr.co.nextlab.bmt.model.RequestCriteria;
import kr.co.nextlab.bmt.service.RequestService;
import kr.co.nextlab.bot.model.MessageVo;
import kr.co.nextlab.comm.controller.BaseController;
import kr.co.nextlab.component.MailComponent;
import kr.co.nextlab.component.MessageComponent;
import kr.co.nextlab.util.JsonUtil;
import kr.co.nextlab.util.ObjectUtil;

@Controller
public class RequestController extends BaseController {
	
	@Autowired
	private RequestService requestService;
	
	@Autowired
	private MessageComponent messageComponent;
	
	@Autowired
	private MailComponent mailComponent;
	
	/**
	 * bmt접수 리스트 화면
	 * @param model
	 * @param reqId
	 */
	@RequestMapping("/bmt/request/requestList")
	public void requestList(Model model, String reqId) {
		model.addAttribute("startDt", new SimpleDateFormat("yyyy-MM-dd").format(DateUtils.addDays(new Date(), -7)));
		model.addAttribute("endDt", new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
		model.addAttribute("reqId", reqId);
	}
	
	/**
	 * bmt접수 리스트 조회
	 * @param model
	 * @param requestCriteria
	 * @return
	 */
	@RequestMapping("/bmt/request/getRequestList")
	public View getRequestList(Model model, RequestCriteria requestCriteria) {
		model.addAttribute("requestList", requestService.selectRequestList(requestCriteria));
		return new MappingJackson2JsonView();
	}
	
	/**
	 * bmt접수 상세조회
	 * @param model
	 * @param reqId
	 */
	@Auth(url={"/bmt/request/requestList"})
	@RequestMapping("/bmt/request/requestForm")
	public void requestForm(Model model, String reqId) {
		model.addAttribute("user", super.getUser());
	}
	
	/**
	 * bmt접수 등록
	 * @param model
	 * @param bmtRequestVo
	 * @return
	 */
	@Auth(url={"/bmt/request/requestList"})
	@RequestMapping("/bmt/request/regRequest")
	public View regRequest(Model model, @RequestBody BmtRequestVo bmtRequestVo){
		boolean save = false;
		int chk = 0;
		
		bmtRequestVo.setRegId(super.getUser().getUserId());
		bmtRequestVo.setModId(super.getUser().getUserId());
		bmtRequestVo.setPetitorNm(super.getUser().getUserNm());
		bmtRequestVo.setPetitorGroupNm(super.getUser().getUserGroupNm());
		chk = requestService.insertRequest(bmtRequestVo);
		if (chk == 0){
			model.addAttribute("message", "저장 실패");
		}else{
			save = true;
			/**
			 * CVCBANK@nextlab.co.kr 메일주소 구성원
			 */
			String userId = "U0001";
			String [] managerArray = ObjectUtil.getStringArrayFromList(bmtRequestVo.getManagerList(), "managerId");
			
			/**
			 * 메시지 알림 등록
			 */
			MessageVo messageVo = messageComponent.setMessageCreateBmtRequest(bmtRequestVo, super.getAppId(), super.getUser());
			messageComponent.sendMessage(messageVo, managerArray);
			
			mailComponent.sendMailUser("/mail/bmt/bmtRequetProject", managerArray, "BMT 요청 알림", JsonUtil.getJsonStrFromObject(bmtRequestVo));
			/**
			 * CVCBANK@nextlab.co.kr에만 메일전송
			 */
			mailComponent.sendMailUser("/mail/bmt/bmtRequetProject", userId, "BMT 요청 알림!", JsonUtil.getJsonStrFromObject(bmtRequestVo));
		}
		
		model.addAttribute("save",save);
		return new MappingJackson2JsonView();
	}
	
	/**
	 * bmt접수 등록
	 * @param model
	 * @param bmtRequestVo
	 * @return
	 */
	@Auth(url={"/bmt/request/requestList"})
	@RequestMapping("/bmt/request/modRequest")
	public View modRequest(Model model, @RequestBody BmtRequestVo bmtRequestVo){
		boolean save = false;
		int chk = 0;
		
		bmtRequestVo.setModId(super.getUser().getUserId());
		chk = requestService.updateRequest(bmtRequestVo);
		if (chk == 0){
			model.addAttribute("message", "저장 실패");
		}else{
			save = true;
		}
		
		model.addAttribute("save",save);
		return new MappingJackson2JsonView();
	}
	
	/**
	 * bmt 요청 상태 변경
	 * @param model
	 * @param bmtRequestVo
	 * @return
	 */
	@RequestMapping("/bmt/request/modReqProgrssStat")
	public View modReqProgrssStat(Model model, BmtRequestVo bmtRequestVo){
		boolean save = false;
		int chk = 0;
		String reqId = "";
		BmtRequestVo proStatChk = new BmtRequestVo();
		bmtRequestVo.setModId(super.getUser().getUserId());
		reqId = bmtRequestVo.getReqId();
		proStatChk = requestService.selectReqView(reqId);
	
		if(!proStatChk.getProgressStat().equals("D201")){
			model.addAttribute("save",save);
			model.addAttribute("messsage",proStatChk.getProgressStat());
			return new MappingJackson2JsonView();
		}
		chk = requestService.updateReqProgrssStat(bmtRequestVo);
		if(chk == 0){
			model.addAttribute("message", "저장 실패");
		}else{
			save = true;
			/**
			 * CVCBANK@nextlab.co.kr 메일주소 구성원
			 */
			bmtRequestVo = requestService.selectReqView(reqId);
			String userId = "U0001";
			MessageVo messageVo = null;
			String mailTemplate = null;
			String mailSubject = null;
			if (StringUtils.equals(bmtRequestVo.getProgressStat(), "D203")) {
				messageVo = messageComponent.setMessageCompleteBmtRequest(bmtRequestVo, super.getAppId(), super.getUser());
				mailTemplate = "/mail/bmt/bmtRequestApprovalProject";
				mailSubject = "BMT 요청 승인완료";
			} else {
				messageVo = messageComponent.setMessageCancelBmtRequest(bmtRequestVo, super.getAppId(), super.getUser());
				mailTemplate = "/mail/bmt/bmtRequestReturnProject";
				mailSubject = "BMT 요청 반려";
			}
			
			/**
			 * 메시지 알림 등록
			 */
			messageComponent.sendMessage(messageVo, new String[]{bmtRequestVo.getRegId()});

			mailComponent.sendMailUser(mailTemplate, bmtRequestVo.getRegId(), mailSubject, JsonUtil.getJsonStrFromObject(bmtRequestVo));
			/**
			 * CVCBANK@nextlab.co.kr에만 메일전송
			 */
			mailComponent.sendMailUser(mailTemplate, userId, mailSubject+'!', JsonUtil.getJsonStrFromObject(bmtRequestVo));

			
		}
		
		model.addAttribute("save",save);
		return new MappingJackson2JsonView();
	}
	
	/**
	 * bmt 요청 파일조회 화면
	 * @param model
	 */
	@Auth(url={"/bmt/request/requestList"})
	@RequestMapping("/bmt/request/reqFileList")
	public void reqFileList(Model model){
	}
	
	/**
	 * bmt 요청 첨부파일 리스트조회
	 * @param model
	 * @param reqId
	 * @return
	 */
	@RequestMapping("/bmt/request/getReqFileList")
	public View getReqFileList(Model model, String reqId){
		model.addAttribute("reqFileList", requestService.selectReqFileList(reqId));
		return new MappingJackson2JsonView();
	}
	
	/**
	 * bmt 요청 상세 조회
	 * @param model
	 * @param reqId
	 * @return
	 */
	@RequestMapping("/bmt/request/getRequestView")
	public View getRequestView(Model model, String reqId){
		model.addAttribute("bmtRequest", requestService.selectBmtRequestDetail(reqId));
		return new MappingJackson2JsonView();
	}
	
	/**
	 * bmt 요청 코멘트 등록
	 * @param model
	 * @param reqId
	 * @return
	 */
	@Auth(url={"/bmt/request/requestList"})
	@RequestMapping("/bmt/request/regReqComment")
	public View regReqComment(Model model, ReqCommentVo reqCommentVo){
		reqCommentVo.setRegId(super.getUser().getUserId());
		List<ReqCommentVo> reqCommentList = requestService.insertReqComment(reqCommentVo);
		
		if (reqCommentList == null || reqCommentList.size() <= 0) {
			model.addAttribute("message", "저장 실패");
		} else {
			
			/**
			 * 메시지 알림 등록 (등록자, 담당자)
			 */
			BmtRequestVo bmtRequestVo = requestService.selectBmtRequestDetail(reqCommentVo.getReqId());
			String[] managerArray = ObjectUtil.getStringArrayFromList(bmtRequestVo.getManagerList(), "managerId");
			String[] msgArray = new String[managerArray.length + 1];
			for (int i=0; i<managerArray.length; i++) {
				msgArray[i] = managerArray[i];
			}
			msgArray[managerArray.length] = bmtRequestVo.getRegId();
			
			MessageVo messageVo = messageComponent.setMessageCreateReqComment(bmtRequestVo, super.getAppId(), super.getUser());
			messageComponent.sendMessage(messageVo, msgArray);
		}
		
		model.addAttribute("reqCommentList", reqCommentList);
		return new MappingJackson2JsonView();
	}
	
	/**
	 * bmt 요청 코멘트 등록
	 * @param model
	 * @param reqId
	 * @return
	 */
	@Auth(url={"/bmt/request/requestList"})
	@RequestMapping("/bmt/request/modReqComment")
	public View modReqComment(Model model, ReqCommentVo reqCommentVo){
		List<ReqCommentVo> reqCommentList = requestService.updateReqComment(reqCommentVo);
		
		if (reqCommentList == null || reqCommentList.size() <= 0) {
			model.addAttribute("message", "저장 실패");
		}
		
		model.addAttribute("reqCommentList", reqCommentList);
		return new MappingJackson2JsonView();
	}
	
	/**
	 * bmt 요청 반려 처리 페이지
	 * @param model
	 */
	@Auth(url={"/bmt/request/requestList"})
	@RequestMapping("/bmt/request/requestCancel")
	public void requestCancel(Model model, String reqId){
		model.addAttribute("reqId", reqId);
	}
}
