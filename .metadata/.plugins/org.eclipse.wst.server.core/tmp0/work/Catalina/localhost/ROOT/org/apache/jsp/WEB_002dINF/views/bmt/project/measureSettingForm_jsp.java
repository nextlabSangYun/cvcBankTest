/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.30
 * Generated at: 2018-11-28 06:38:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.bmt.project;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class measureSettingForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/D:/cvcbank/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/mngbot/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1524211722455L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<link href=\"/css/kendo.common-material.min.css\" rel=\"stylesheet\">\r\n");
      out.write("<link href=\"/css/kendo.material.min.css\" rel=\"stylesheet\">\r\n");
      out.write("<script type=\"text/javascript\" src=\"/js/kendo.all.min.js\"></script>\r\n");
      out.write("<div class=\"content\">\r\n");
      out.write("\t<div class=\"sub_layout has_snb\">\r\n");
      out.write("\t\t<p class=\"cate_tit\">측정모델 버전변경</p>\r\n");
      out.write("\t\t<div class=\"g_table\">\r\n");
      out.write("\t\t\t<table>\r\n");
      out.write("\t\t\t\t<colgroup>\r\n");
      out.write("\t\t\t\t\t<col style=\"width:50%\">\r\n");
      out.write("\t\t\t\t\t<col>\r\n");
      out.write("\t\t\t\t</colgroup>\r\n");
      out.write("\t\t\t\t<thead>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<th>측정모델</th>\r\n");
      out.write("\t\t\t\t\t\t<th>모델버전</th>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t</thead>\r\n");
      out.write("\t\t\t\t<tbody>\r\n");
      out.write("\t\t\t\t\t<tr v-for=\"list in projectBmtModelList\">\r\n");
      out.write("\t\t\t\t\t\t<td>{{ list.modelNm }}</td>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"verify\">\r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"text\" :value=\"list.modelVer\" maxlength=\"30\"  v-show=\"list.performYn=='N'\">\r\n");
      out.write("\t\t\t\t\t\t\t<button class=\"g_btn01\" @click=\"saveModelVer(event)\" :value=\"list.modelSeq\" :name=\"list.modelId\" :id=\"list.modelVer\" v-show=\"list.performYn=='N'\">저장</button>\r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"hidden\" v-once v-model=\"list.modelVer\">\r\n");
      out.write("\t\t\t\t\t\t\t<span v-if=\"list.performYn=='Y'\">{{ list.modelVer }} 버전은 성능평가가 완료된 버전입니다.</span>\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t</tbody>\r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"btm_con\">\r\n");
      out.write("\t\t\t<p class=\"cate_tit\">측정환경 구성</p>\r\n");
      out.write("\t\t\t<div class=\"com_cond\">\r\n");
      out.write("\t\t\t\t<div class=\"sel_cond con_col2\">\r\n");
      out.write("\t\t\t\t\t<div class=\"l_cont\">\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t<div class=\"r_cont\">\r\n");
      out.write("\t\t\t\t\t\t<button class=\"g_btn01\" @click=\"goJoinCompose\">관리</button>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"cond_frame\" id=\"diagram\"></div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("<script>\r\n");
      out.write("\tvar cont = new Vue({\r\n");
      out.write("\t\tel: '.content'\r\n");
      out.write("\t\t, data: {\r\n");
      out.write("\t\t\tprojectBmtModelList: []\r\n");
      out.write("\t\t\t, pid: '");
      if (_jspx_meth_c_005fout_005f0(_jspx_page_context))
        return;
      out.write("'\r\n");
      out.write("\t\t\t, changeModelVer: ''\r\n");
      out.write("\t\t\t, shapesDataSource: {\r\n");
      out.write("\t\t\t\tbatch : false,\r\n");
      out.write("\t\t\t\tdata : [],\r\n");
      out.write("\t\t\t\tschema : { model : { children : \"items\" } }\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, mounted: function() {\r\n");
      out.write("\t\t\tthis.$nextTick(function() {\r\n");
      out.write("\t\t\t\tthis.getProjectBmtModelList();\r\n");
      out.write("\t\t\t\tthis.setJoinComposeDiagram();\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, methods: {\r\n");
      out.write("\t\t\tgetProjectBmtModelList: function() {\r\n");
      out.write("\t\t\t\t$.get(\"/bmt/project/getProjectBmtModelList?pid=\"+cont.pid, function(data){\r\n");
      out.write("\t\t\t\t\tcont.projectBmtModelList = data.projectBmtModelList;\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, saveModelVer: function(event) {\r\n");
      out.write("\t\t\t\tvar chk = true;\r\n");
      out.write("\t\t\t\tvar e = event.target;\r\n");
      out.write("\t\t\t\tvar currModelVer = e.nextElementSibling.value;\r\n");
      out.write("\t\t\t\tvar param = {\r\n");
      out.write("\t\t\t\t\tmodelId: e.name\r\n");
      out.write("\t\t\t\t\t, modelVer: e.previousElementSibling.value\r\n");
      out.write("\t\t\t\t\t, modelSeq: e.value\r\n");
      out.write("\t\t\t\t\t, pid: cont.pid\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif(param.modelVer.match(\";\")){\r\n");
      out.write("\t\t\t\t\talert(\"모델 버전에는 세미콜론(;)을 입력하실 수 없습니다.\");\r\n");
      out.write("\t\t\t\t\treturn e.previousElementSibling.value = currModelVer;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tif (param.modelVer == currModelVer) { // 기존버전과 수정한버전의 값이 같을때\r\n");
      out.write("\t\t\t\t\tchk = false;\r\n");
      out.write("\t\t\t\t\talert(\"현재버전과 동일한 버전입니다.\");\r\n");
      out.write("\t\t\t\t} else { // 수정한버전의 값과 같은 모델의 버전이 같을때\r\n");
      out.write("\t\t\t\t\tthis.projectBmtModelList.forEach(function(i){\r\n");
      out.write("\t\t\t\t\t\tif (param.modelId == i.modelId && param.modelVer == i.modelVer) {\r\n");
      out.write("\t\t\t\t\t\t\tchk = false;\r\n");
      out.write("\t\t\t\t\t\t\talert(\"이미 등록된 버전이 있습니다.\");\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif (chk) {\r\n");
      out.write("\t\t\t\t\t$.post('/bmt/project/modProjectBmtModelVerPrc', param, function(data) {\r\n");
      out.write("\t\t\t\t\t\tif (data.save) {\r\n");
      out.write("\t\t\t\t\t\t\talert(\"저장되었습니다.\");\r\n");
      out.write("\t\t\t\t\t\t\tcont.getProjectBmtModelList();\r\n");
      out.write("\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\talert(\"저장실패하였습니다.\");\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, setJoinComposeDiagram: function() {\r\n");
      out.write("\t\t\t\tvar nowJoinCompose = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projectView.nowJoinCompose}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';\r\n");
      out.write("\t\t\t\tif (isEmpty(nowJoinCompose)) return;\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tvar array = JSON.parse(nowJoinCompose);\r\n");
      out.write("\t\t\t\tthis.shapesDataSource.data = convertJsonTree(array, \"id\", \"parentId\");\r\n");
      out.write("\t\t\t\tthis.setDiagram();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, setDiagram: function() {\r\n");
      out.write("\t\t\t\tvar diagramElement = $(\"#diagram\").kendoDiagram({\r\n");
      out.write("\t\t\t\t\tdataSource : this.shapesDataSource\r\n");
      out.write("\t\t\t\t\t, layout : {\r\n");
      out.write("\t\t\t\t\t\ttype : \"tree\"\r\n");
      out.write("\t\t\t\t\t\t, subtype: \"down\"\r\n");
      out.write("\t\t\t\t\t\t, horizontalSeparation : 50\r\n");
      out.write("\t\t\t\t\t\t, verticalSeparation : 30\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t, shapeDefaults : {\r\n");
      out.write("\t\t\t\t\t\tvisual : this.visualTemplate\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tdiagram = diagramElement.data(\"kendoDiagram\");\r\n");
      out.write("\t\t\t\tdiagramElement.css(\"height\", \"450\");\r\n");
      out.write("\t\t\t\tdiagramElement.css(\"width\", \"1118\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, visualTemplate: function(options) {\r\n");
      out.write("\t\t\t\tvar dataviz = kendo.dataviz;\r\n");
      out.write("\t\t\t\tvar g = new dataviz.diagram.Group();\r\n");
      out.write("\t\t\t\tvar dataItem = options.dataItem;\r\n");
      out.write("\t\t\t\tg.append(new dataviz.diagram.Rectangle({\r\n");
      out.write("\t\t\t\t\twidth : 170\r\n");
      out.write("\t\t\t\t\t, height : 60\r\n");
      out.write("\t\t\t\t\t, stroke : {\r\n");
      out.write("\t\t\t\t\t\twidth : 2\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t, fill : {\r\n");
      out.write("\t\t\t\t\t\tcolor : \"#fff\"\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}));\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tg.append(new dataviz.diagram.TextBlock({\r\n");
      out.write("\t\t\t\t\ttext : dataItem.model.modelGroupNm\r\n");
      out.write("\t\t\t\t\t, x : 60\r\n");
      out.write("\t\t\t\t\t, y : 8\r\n");
      out.write("\t\t\t\t\t, fill : \"#333\"\r\n");
      out.write("\t\t\t\t}));\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tg.append(new dataviz.diagram.TextBlock({\r\n");
      out.write("\t\t\t\t\ttext : \"(\" + dataItem.model.modelNm + \")\"\r\n");
      out.write("\t\t\t\t\t, x : 60\r\n");
      out.write("\t\t\t\t\t, y : 28\r\n");
      out.write("\t\t\t\t\t, fill : \"#333\"\r\n");
      out.write("\t\t\t\t}));\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif (!isEmpty(dataItem.model.icon)) {\r\n");
      out.write("\t\t\t\t\tg.append(new dataviz.diagram.Image({\r\n");
      out.write("\t\t\t\t\t\tsource : \"/images/bot/ico_model_\" + dataItem.model.icon + \".png\"\r\n");
      out.write("\t\t\t\t\t\t, x : 2\r\n");
      out.write("\t\t\t\t\t\t, y : 4\r\n");
      out.write("\t\t\t\t\t\t, width : 52\r\n");
      out.write("\t\t\t\t\t\t, height : 52\r\n");
      out.write("\t\t\t\t\t}));\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\treturn g;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, goJoinCompose: function() {\r\n");
      out.write("\t\t\t\tvar url = \"/bmt/project/joinComposeForm?pid=\" + this.pid;\r\n");
      out.write("\t\t\t\tgoShowPopupLayer(url);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, setJoinCompose: function(joinCompose) {\r\n");
      out.write("\t\t\t\tthis.shapesDataSource.data = convertJsonTree(joinCompose, \"id\", \"parentId\");\r\n");
      out.write("\t\t\t\tthis.setDiagram();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fout_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f0 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    _jspx_th_c_005fout_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fout_005f0.setParent(null);
    // /WEB-INF/views/bmt/project/measureSettingForm.jsp(54,11) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fout_005f0.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.pid}", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
    int _jspx_eval_c_005fout_005f0 = _jspx_th_c_005fout_005f0.doStartTag();
    if (_jspx_th_c_005fout_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
    return false;
  }
}
