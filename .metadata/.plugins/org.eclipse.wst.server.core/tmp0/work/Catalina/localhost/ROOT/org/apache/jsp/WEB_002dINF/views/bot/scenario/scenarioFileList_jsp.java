/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.30
 * Generated at: 2018-08-27 08:29:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.bot.scenario;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class scenarioFileList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/WEB-INF/nextlab.tld", Long.valueOf(1524211545637L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"content\" id=\"appData\">\r\n");
      out.write("\t<div class=\"sub_layout has_snb\">\r\n");
      out.write("\t\t<div class=\"cont_wrap\">\r\n");
      out.write("\t\t\t<div class=\"sort_area\">\r\n");
      out.write("\t\t\t\t<div class=\"sel_item full\">\r\n");
      out.write("\t\t\t\t\t<span class=\"sort_tit\">검색어</span>\r\n");
      out.write("\t\t\t\t\t<input type=\"text\" class=\"full\" v-model=\"scenarioFileVo.fileNm\" placeholder=\"파일명 혹은 파일정보 입력\" />\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<button class=\"g_btn01\" @click=\"getList()\">조회</button>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<div class=\"tb_desc\">\r\n");
      out.write("\t\t\t\t<p>조회결과 : {{scenarioList.length | number}}건</p>\r\n");
      out.write("\t\t\t\t<div class=\"btn_wrap\">\r\n");
      out.write("\t\t\t\t\t<button class=\"g_btn01\" @click=\"btnDelete\">삭제</button>\t\r\n");
      out.write("\t\t\t\t\t<button class=\"g_btn03\" @click=\"goScenarioFileForm\">업로드</button>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"g_table\">\r\n");
      out.write("\t\t\t\t<table>\r\n");
      out.write("\t\t\t\t\t<caption>중요도, 진행사황, 이슈제목 등으로 구성된 표입니다.</caption>\r\n");
      out.write("\t\t\t\t\t<colgroup>\r\n");
      out.write("\t\t\t\t\t\t<col style=\"width:5%;\">\r\n");
      out.write("\t\t\t\t\t\t<col style=\"width:5%;\">\r\n");
      out.write("\t\t\t\t\t\t<col style=\"width:15%;\">\r\n");
      out.write("\t\t\t\t\t\t<col>\r\n");
      out.write("\t\t\t\t\t\t<col style=\"width:15%;\">\r\n");
      out.write("\t\t\t\t\t\t<col style=\"width:15%;\">\r\n");
      out.write("\t\t\t\t\t</colgroup>\r\n");
      out.write("\t\t\t\t\t<thead>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<th><input type=\"checkbox\" v-model=\"selectAll\"></th>\r\n");
      out.write("\t\t\t\t\t\t\t<th>No.</th>\r\n");
      out.write("\t\t\t\t\t\t\t<th>파일명</th>\r\n");
      out.write("\t\t\t\t\t\t\t<th>파일정보</th>\r\n");
      out.write("\t\t\t\t\t\t\t<th>등록자</th>\r\n");
      out.write("\t\t\t\t\t\t\t<th>등록일시</th>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t</thead>\r\n");
      out.write("\t\t\t\t\t<tbody>\r\n");
      out.write("\t\t\t\t\t\t<tr v-for=\"(list,idx) in pagingList\">\r\n");
      out.write("\t\t\t\t\t\t\t<td @click=\"chk(list.seq)\"><input type=\"checkbox\" :value=\"list.seq\" v-model=\"chkArray\" @click.stop></td>\r\n");
      out.write("\t\t\t\t\t\t\t<td>{{getFirstPage - idx}}</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td><a @click=\"getFileDown(list)\" class=\"link\">{{list.orgFileNm}}</a></td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"l_align\"><span v-html=\"list.fileInfo\"></span></td>\r\n");
      out.write("\t\t\t\t\t\t\t<td>{{list.regNm}}</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td>{{list.regDtm | dateTimeFormat}}</td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t<tr v-if=\"pagingList.length == 0\">\r\n");
      out.write("\t\t\t\t\t\t\t<td colspan=\"6\">검색 결과가 없습니다.</td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t</tbody>\r\n");
      out.write("\t\t\t\t</table>\r\n");
      out.write("\t\t\t\t<paginator ref=\"paginator\" :go-fn=\"getPagingList\"></paginator>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("var list = new Vue({\r\n");
      out.write("\tel: '#appData'\r\n");
      out.write("\t, data: {\r\n");
      out.write("\t\tscenarioList: []\r\n");
      out.write("\t\t, pagingList: []\r\n");
      out.write("\t\t, scenarioFileVo: {\r\n");
      out.write("\t\t\tfileNm: ''\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, chkArray: []\r\n");
      out.write("\t}\r\n");
      out.write("\t, beforeMount: function() {\r\n");
      out.write("\t\tthis.$nextTick(function() {\r\n");
      out.write("\t\t\tthis.getList();\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("\t, computed: {\r\n");
      out.write("\t\tgetFirstPage: function(){\r\n");
      out.write("\t\t\treturn this.$refs.paginator.pageNumDesc;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, selectAll: {\r\n");
      out.write("\t\t\tget: function () {\r\n");
      out.write("\t\t\t\tvar total = this.pagingList.length;\r\n");
      out.write("\t\t\t\tvar cnt = 0;\r\n");
      out.write("\t\t\t\tfor (var i=0; i< total; i++) {\r\n");
      out.write("\t\t\t\t\tfor (var j=0; j<this.chkArray.length; j++) {\r\n");
      out.write("\t\t\t\t\t\tif (this.pagingList[i].seq == this.chkArray[j]) {\r\n");
      out.write("\t\t\t\t\t\t\tcnt++;\r\n");
      out.write("\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\treturn total == cnt && cnt > 0;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, set: function (value) {\r\n");
      out.write("\t\t\t\tvar chkArray = [];\r\n");
      out.write("\t\t\t\tif (value) {\r\n");
      out.write("\t\t\t\t\tthis.pagingList.forEach(function (tc) {\r\n");
      out.write("\t\t\t\t\t\tchkArray.push(tc.seq);\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tthis.chkArray = chkArray;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\t, methods: {\r\n");
      out.write("\t\tgetList: function() {\r\n");
      out.write("\t\t\tvar param = this.scenarioFileVo;\r\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\ttype: \"post\"\r\n");
      out.write("\t\t\t\t, url : \"/bot/scenario/getScenarioList\"\r\n");
      out.write("\t\t\t\t, contentType: \"application/json\"\r\n");
      out.write("\t\t\t\t, data : JSON.stringify(param)\r\n");
      out.write("\t\t\t\t, success: function(data) {\r\n");
      out.write("\t\t\t\t\tfor (var i=0; i<data.scenarioList.length; i++) {\r\n");
      out.write("\t\t\t\t\t\tvar scenario = data.scenarioList[i];\r\n");
      out.write("\t\t\t\t\t\tscenario.fileInfo = scenario.fileInfo.replace(/(?:\\n)/g, '<br>');\r\n");
      out.write("\t\t\t\t\t\tscenario.fileInfo.split('\\n').join('<br>');\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tlist.scenarioList = data.scenarioList;\r\n");
      out.write("\t\t\t\t\tlist.getPagingList();\r\n");
      out.write("\t\t\t\t\tlist.goPage(1);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t, error: function(xhr, status, error) {\r\n");
      out.write("\t\t\t\t\talert($(xhr.responseText).text());\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, getPagingList: function () {\r\n");
      out.write("\t\t\tthis.pagingList = this.$refs.paginator.pagingList(this.scenarioList);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, goPage: function(page){\r\n");
      out.write("\t\t\tthis.$refs.paginator.goPage(page);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, chk: function(seq) {\r\n");
      out.write("\t\t\tvar _chkArray = this.chkArray;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif (_chkArray.indexOf(seq) == -1) { // 배열에 존재 하지 않으면\r\n");
      out.write("\t\t\t\t_chkArray.push(seq);\r\n");
      out.write("\t\t\t} else if (_chkArray.indexOf(seq) != -1) { // 배열에 존재 하면\r\n");
      out.write("\t\t\t\t_chkArray.splice(_chkArray.indexOf(seq), 1);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, getFileDown: function(list) {\r\n");
      out.write("\t\t\tfileDown(list.filePath, list.fileNm, list.orgFileNm);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, goScenarioFileForm: function() {\r\n");
      out.write("\t\t\tshowPopupLayer('/bot/scenario/scenarioFileForm');\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, btnDelete: function() {\r\n");
      out.write("\t\t\tif (list.chkArray.length < 1) {\r\n");
      out.write("\t\t\t\talert(\"Test Case 삭제을 위해 선택된 Test Case가 없습니다. \");\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tvar cmsg = \"삭제하시겠습니까?\";\r\n");
      out.write("\t\t\tif (confirm(cmsg)){\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\ttype: \"post\"\r\n");
      out.write("\t\t\t\t\t, url : \"/bot/scenario/delScenarioFile\"\r\n");
      out.write("\t\t\t\t\t, contentType: \"application/json\"\r\n");
      out.write("\t\t\t\t\t, data : JSON.stringify({seqList : list.chkArray})\r\n");
      out.write("\t\t\t\t\t, success: function(data) {\r\n");
      out.write("\t\t\t\t\t\tif(data.del){\r\n");
      out.write("\t\t\t\t\t\t\talert('삭제 되었습니다.');\r\n");
      out.write("\t\t\t\t\t\t\tlist.getList();\r\n");
      out.write("\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\talert('삭제에 실패하였습니다.');\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t, error: function(xhr, status, error) {\r\n");
      out.write("\t\t\t\t\t\talert($(xhr.responseText).text());\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
