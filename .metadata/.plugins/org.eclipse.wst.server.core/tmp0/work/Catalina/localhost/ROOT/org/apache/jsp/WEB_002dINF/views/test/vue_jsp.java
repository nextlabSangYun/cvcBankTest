/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.30
 * Generated at: 2018-06-07 05:12:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.test;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class vue_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<div id=\"app\">\r\n");
      out.write("\t<h2>v-model</h2>\r\n");
      out.write("\t<input v-model=\"message\" /> -> {{ message }}\r\n");
      out.write("\t\r\n");
      out.write("\t<br/><h2>v-model.number (숫자형데이터)</h2>\r\n");
      out.write("\t<input v-model.number=\"num1\" /> + 1 = {{ num2 }}\r\n");
      out.write("\t\r\n");
      out.write("\t<br/><h2>v-show</h2>\r\n");
      out.write("\t<button v-show=\"message\">메시지확인</button>\r\n");
      out.write("\t\r\n");
      out.write("\t<br/><h2>v-if / v-else</h2>\r\n");
      out.write("\t<button v-if=\"!message\">메시지없음</button>\r\n");
      out.write("\t<button v-else>메시지있음</button>\r\n");
      out.write("\t<template v-if=\"message\">\r\n");
      out.write("\t\t템플릿 영역 v-show 사용불가\r\n");
      out.write("\t</template>\r\n");
      out.write("\t\r\n");
      out.write("\t<br/><h2>v-for</h2>\r\n");
      out.write("\t<ul>\r\n");
      out.write("\t\t<li v-for=\"i in 10\">\r\n");
      out.write("\t\t\t{{ i }}\r\n");
      out.write("\t\t</li>\r\n");
      out.write("\t</ul>\r\n");
      out.write("\t<ul>\r\n");
      out.write("\t\t<li v-for=\"l in list\">\r\n");
      out.write("\t\t\t{{ l.id }} - {{ l.name }}\r\n");
      out.write("\t\t</li>\r\n");
      out.write("\t</ul>\r\n");
      out.write("\t<ul>\r\n");
      out.write("\t\t<li v-for=\"(l, idx) in list\">\r\n");
      out.write("\t\t\t{{ idx }} :: {{ l.id }} - {{ l.name }}\r\n");
      out.write("\t\t</li>\r\n");
      out.write("\t</ul>\r\n");
      out.write("\t<ul>\r\n");
      out.write("\t\t<li v-for=\"(m, key, idx) in map\">\r\n");
      out.write("\t\t\t{{ idx }} :: {{ key }} - {{ m }}\r\n");
      out.write("\t\t</li>\r\n");
      out.write("\t</ul>\r\n");
      out.write("\t\r\n");
      out.write("\t<br/><h2>v-on:click (기본형) / @click (축약형) / @click.prevent (form auto submit 방지)</h2>\r\n");
      out.write("\t<button v-on:click=\"upvote\">\r\n");
      out.write("\t\tUpvote! {{ upvotes }}\r\n");
      out.write("\t</button>\r\n");
      out.write("\t<button @click=\"upvote\">\r\n");
      out.write("\t\tUpvote! {{ upvotes }}\r\n");
      out.write("\t</button>\r\n");
      out.write("\t\r\n");
      out.write("\t<br/><h2>@keyup (enter, tab, delete, esc, space, up, down, left, right)</h2>\r\n");
      out.write("\t<input v-model=\"message\" @keyup.enter=\"enter\"/>\r\n");
      out.write("\t\r\n");
      out.write("\t<br/><h2>필터</h2>\r\n");
      out.write("\t<br/><input v-model=\"filter\">\r\n");
      out.write("\t<ul>\r\n");
      out.write("\t\t<li v-for=\"list in listBy(filter)\">\r\n");
      out.write("\t\t\t{{ list.id }} - {{ list.name }}\r\n");
      out.write("\t\t</li>\r\n");
      out.write("\t</ul>\r\n");
      out.write("\t<br/>날짜 : {{ day }} -> {{ day | year }}\r\n");
      out.write("\t\r\n");
      out.write("\t<br/><h2>정렬</h2>\r\n");
      out.write("\t<select v-model=\"orderKey\">\r\n");
      out.write("\t\t<option value=\"id\">id</option>\r\n");
      out.write("\t\t<option value=\"name\">name</option>\r\n");
      out.write("\t</select>\r\n");
      out.write("\t<ul>\r\n");
      out.write("\t\t<li v-for=\"list in _.orderBy(list, [orderKey], [orderType])\" >\r\n");
      out.write("\t\t\t{{ list.id }} - {{ list.name }}\r\n");
      out.write("\t\t</li>\r\n");
      out.write("\t</ul>\r\n");
      out.write("\t\r\n");
      out.write("\t<br/><h2>컴포넌트</h2>\r\n");
      out.write("\t<cp-test></cp-test>\r\n");
      out.write("\t<cp-test plot=\" - abc\"></cp-test>\r\n");
      out.write("\t<cp-test plot=\" - 가나다\"></cp-test>\r\n");
      out.write("\t\r\n");
      out.write("\t<cp-test2 v-bind:user=\"{id:'abc', name:'에이비씨'}\"></cp-test2>\r\n");
      out.write("\t<cp-test2 :user=\"{id:'abc', name:'에이비씨'}\"></cp-test2>\r\n");
      out.write("\t\r\n");
      out.write("\t<ul>\r\n");
      out.write("\t\t<cp-list v-for=\"l in list\" :list=\"l\" :key=\"l.id\"></cp-list>\r\n");
      out.write("\t</ul>\r\n");
      out.write("\t\r\n");
      out.write("\t<br/><h2>data확인</h2>\r\n");
      out.write("\t<pre>{{ $data }}</pre>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<template id=\"list-template\">\r\n");
      out.write("\t<li>{{ list.id }} - {{ list.name }}</li>\r\n");
      out.write("</template>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/template\" id=\"cd-template\">\r\n");
      out.write("\t<div>테스트{{ plot }}</div>\r\n");
      out.write("</script>\r\n");
      out.write("<script type=\"text/template\" id=\"cd-template2\">\r\n");
      out.write("\t<div>테스트 : {{ user.id }} / {{ user.name }}</div>\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<br/>\r\n");
      out.write("\r\n");
      out.write("<div id=\"appCss\">\r\n");
      out.write("\t<br/><h2>:class (v-bind:class)</h2>\r\n");
      out.write("\t<div class=\"box\" :class=\"{'red':color, 'blue':!color}\"></div>\r\n");
      out.write("\t<div :class=\"['box', color ? 'blue' : 'purple']\"></div>\r\n");
      out.write("\t<button @click=\"flipColor\">Flip color</button>\r\n");
      out.write("\t\r\n");
      out.write("\t<br/><br/><br/><h2>:style (v-bind:style)</h2>\r\n");
      out.write("\t<div :style=\"{color:'red'}\">abc</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div id=\"appData\">\r\n");
      out.write("\t전체조회페이징\r\n");
      out.write("\t<ul>\r\n");
      out.write("\t\t<li v-for=\"list in pagingList\">\r\n");
      out.write("\t\t\t{{ list.codeId }} - {{ list.codeNm }}\r\n");
      out.write("\t\t</li>\r\n");
      out.write("\t</ul>\r\n");
      out.write("\t<paginator ref=\"paginator\" :go-fn=\"getPagingList\"></paginator>\r\n");
      out.write("\trows변경을 하고 싶을때는 paginator에 :init-rows=\"10\" 형식으로 작업 (기본은 50)\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<br/>\r\n");
      out.write("\r\n");
      out.write("<div id=\"appData2\">\r\n");
      out.write("\tDB페이징\r\n");
      out.write("\t<ul>\r\n");
      out.write("\t\t<li v-for=\"list in codeList\">\r\n");
      out.write("\t\t\t{{ list.codeId }} - {{ list.codeNm }}\r\n");
      out.write("\t\t</li>\r\n");
      out.write("\t</ul>\r\n");
      out.write("\t<paginator ref=\"paginator2\" :go-fn=\"getList\"></paginator>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div id=\"search\">\r\n");
      out.write("\t<user-select ref=\"userSelect\" user-group-select-name=\"userGroupId\" user-group-select-id=\"userGroupId\"\r\n");
      out.write("\t\t\t\tuser-select-name=\"userId\" user-select-id=\"userId\"\r\n");
      out.write("\t\t\t\tuser-group-id-model=\"userGroupId\" user-id-model=\"userId\" ></user-select>\r\n");
      out.write("\t{{ userGroupId }} / {{ userId }}\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<!-- \r\n");
      out.write("<div id=\"batch\">\r\n");
      out.write("\t배치테스트\r\n");
      out.write("\t<button @click=\"sendBotStat\">상태이력</button>\r\n");
      out.write("\t<button @click=\"sendBotPing\">PING</button>\r\n");
      out.write("</div>\r\n");
      out.write(" -->\r\n");
      out.write(" \r\n");
      out.write("<script>\r\n");
      out.write("\tVue.filter('year', function(d) {\r\n");
      out.write("\t\tif (d.length>=4) \r\n");
      out.write("\t\t\treturn d.substring(0,4) + \"년\";\r\n");
      out.write("\t\telse \r\n");
      out.write("\t\t\treturn \"\";\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tVue.component('cp-test', {\r\n");
      out.write("\t\ttemplate: '#cd-template'\r\n");
      out.write("\t\t, props: ['plot']\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tVue.component('cp-test2', {\r\n");
      out.write("\t\ttemplate: '#cd-template2'\r\n");
      out.write("\t\t, props: ['user']\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tVue.component('cp-list', {\r\n");
      out.write("\t\ttemplate: '#list-template'\r\n");
      out.write("\t\t, props: ['list']\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tnew Vue({\r\n");
      out.write("\t\t// 엘레멘트지시자\r\n");
      out.write("\t\tel: '#app'\r\n");
      out.write("\t\t// 데이터\r\n");
      out.write("\t\t, data: {\r\n");
      out.write("\t\t\tday: \"2017-11-16\"\r\n");
      out.write("\t\t\t, message: '테스트메시지'\r\n");
      out.write("\t\t\t, num1: 1\r\n");
      out.write("\t\t\t, filter: ''\r\n");
      out.write("\t\t\t, map: {abc: '에이비씨', efg: '이에프쥐', id:'map', name:'맵'}\r\n");
      out.write("\t\t\t, list: [\r\n");
      out.write("\t\t\t\t{id:'a', name:'에이'}\r\n");
      out.write("\t\t\t\t, {id:'b', name:'비'}\r\n");
      out.write("\t\t\t\t, {id:'c', name:'씨'}\r\n");
      out.write("\t\t\t\t, {id:'ab', name:'에이비'}\r\n");
      out.write("\t\t\t\t, {id:'bc', name:'비씨'}\r\n");
      out.write("\t\t\t\t, {id:'abc', name:'에이비씨'}\r\n");
      out.write("\t\t\t]\r\n");
      out.write("\t\t\t, orderKey: 'id'\r\n");
      out.write("\t\t\t, orderType: 'asc'\r\n");
      out.write("\t\t\t, upvotes: 0\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t// 데이터 계산\r\n");
      out.write("\t\t, computed: {\r\n");
      out.write("\t\t\tnum2: function() {\r\n");
      out.write("\t\t\t\treturn this.num1 + 1;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, orderList: function() {\r\n");
      out.write("\t\t\t\treturn this.list.sort(function(a, b) {\r\n");
      out.write("\t\t\t\t\treturn a.name;\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t// 펑션\r\n");
      out.write("\t\t, methods: {\r\n");
      out.write("\t\t\tupvote: function() {\r\n");
      out.write("\t\t\t\tthis.upvotes++;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, enter: function() {\r\n");
      out.write("\t\t\t\talert(this.message);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, listBy: function(id) {\r\n");
      out.write("\t\t\t\treturn this.list.filter(function(v) {\r\n");
      out.write("// \t\t\t\t\treturn v.id === id;\r\n");
      out.write("\t\t\t\t\treturn v.id.indexOf(id) > -1;\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tnew Vue({\r\n");
      out.write("\t\tel: '#appCss'\r\n");
      out.write("\t\t, data: {\r\n");
      out.write("\t\t\tcolor: true\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, methods: {\r\n");
      out.write("\t\t\tflipColor: function() {\r\n");
      out.write("\t\t\t\tthis.color = !this.color;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tvar list = new Vue({\r\n");
      out.write("\t\tel: '#appData'\r\n");
      out.write("\t\t, data: {\r\n");
      out.write("\t\t\tcodeList: []\r\n");
      out.write("\t\t\t, pagingList: []\r\n");
      out.write("\t\t\t, orderKey: 'codeNm'\r\n");
      out.write("\t\t\t, orderType: 'asc'\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, mounted: function() {\r\n");
      out.write("\t\t\t// nextTick은 모든 el 로드 후 동작\r\n");
      out.write("\t\t\tthis.$nextTick(function() {\r\n");
      out.write("\t\t\t\tthis.getList();\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, methods: {\r\n");
      out.write("\t\t\tgetList: function() {\r\n");
      out.write("\t\t\t\t$.get('/test/testListJson', function(data) {\r\n");
      out.write("\t\t\t\t\tlist.codeList = _.orderBy(data.codeList, list.orderKey, list.orderType);\r\n");
      out.write("\t\t\t\t\tlist.getPagingList();\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, getPagingList: function () {\r\n");
      out.write("\t\t\t\tthis.pagingList = this.$refs.paginator.pagingList(this.codeList);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tvar list2 = new Vue({\r\n");
      out.write("\t\tel: '#appData2'\r\n");
      out.write("\t\t, data: {\r\n");
      out.write("\t\t\tcodeList: []\r\n");
      out.write("\t\t\t, orderKey: 'codeNm'\r\n");
      out.write("\t\t\t, orderType: 'asc'\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, mounted: function() {\r\n");
      out.write("\t\t\t// nextTick은 모든 el 로드 후 동작\r\n");
      out.write("\t\t\tthis.$nextTick(function() {\r\n");
      out.write("\t\t\t\tthis.getList(1);\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, methods: {\r\n");
      out.write("\t\t\tgetList: function(page) {\r\n");
      out.write("\t\t\t\t$.get('/test/testPagingListJson?page='+page, function(data) {\r\n");
      out.write("\t\t\t\t\tlist2.codeList = data.pageList.list;\r\n");
      out.write("\t\t\t\t\tlist2.$refs.paginator2.setPagingInit(data.pageList.pagingVo);\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tvar search = new Vue({\r\n");
      out.write("\t\tel: '#search'\r\n");
      out.write("\t\t, data: {\r\n");
      out.write("\t\t\tuserGroupId: ''\r\n");
      out.write("\t\t\t, userId: ''\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tvar batch = new Vue({\r\n");
      out.write("\t\tel: '#batch'\r\n");
      out.write("\t\t, data: {\r\n");
      out.write("\t\t\tbotStat: {\r\n");
      out.write("\t\t\t\tbotSno: 'S17ABC001'\r\n");
      out.write("\t\t\t\t, botStat: 'C702'\r\n");
      out.write("\t\t\t\t, message: '테스트'\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, botPing: {\r\n");
      out.write("\t\t\t\tbotSno : 'S17ABC001'\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, methods: {\r\n");
      out.write("\t\t\tsendBotStat: function() {\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\ttype: \"post\"\r\n");
      out.write("\t\t\t\t\t, url : \"http://local.mngbot.co.kr:8090/bmt/botStatHst\"\r\n");
      out.write("\t\t\t\t\t, contentType: \"application/json\"\r\n");
      out.write("\t\t\t\t\t, data : JSON.stringify(this.botStat)\r\n");
      out.write("\t\t\t\t\t, success: function(data) {\r\n");
      out.write("\t\t\t\t\t\tconsole.log(data);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t, error: function(xhr, status, error) {\r\n");
      out.write("\t\t\t\t\t\tconsole.log(error);\r\n");
      out.write("\t\t\t\t\t\talert($(xhr.responseText).text());\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, sendBotPing: function() {\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\ttype: \"post\"\r\n");
      out.write("\t\t\t\t\t, url : \"http://local.mngbot.co.kr:8090/bmt/botPing\"\r\n");
      out.write("\t\t\t\t\t, contentType: \"application/json\"\r\n");
      out.write("\t\t\t\t\t, data : JSON.stringify(this.botPing)\r\n");
      out.write("\t\t\t\t\t, success: function(data) {\r\n");
      out.write("\t\t\t\t\t\tconsole.log(data);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t, error: function(xhr, status, error) {\r\n");
      out.write("\t\t\t\t\t\tconsole.log(error);\r\n");
      out.write("\t\t\t\t\t\talert($(xhr.responseText).text());\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("\t.red {\r\n");
      out.write("\t\tbackground: #FF0000;\r\n");
      out.write("\t}\r\n");
      out.write("\t.blue {\r\n");
      out.write("\t\tbackground: #0000FF;\r\n");
      out.write("\t}\r\n");
      out.write("\t.purple {\r\n");
      out.write("\t\tbackground: #7B1FA2;\r\n");
      out.write("\t}\r\n");
      out.write("\t.green {\r\n");
      out.write("\t\tbackground: #4CAF50;\r\n");
      out.write("\t}\r\n");
      out.write("\t.box {\r\n");
      out.write("\t\tfloat: left;\r\n");
      out.write("\t\twidth: 50px;\r\n");
      out.write("\t\theight: 50px;\r\n");
      out.write("\t\tmargin: 4px;\r\n");
      out.write("\t\tborder: 1px solid rgba(0, 0, 0, .2);\r\n");
      out.write("\t}\r\n");
      out.write("</style>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
