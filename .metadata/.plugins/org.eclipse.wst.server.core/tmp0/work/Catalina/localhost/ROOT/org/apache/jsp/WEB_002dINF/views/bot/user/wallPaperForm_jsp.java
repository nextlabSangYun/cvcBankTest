/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.30
 * Generated at: 2018-05-02 05:53:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.bot.user;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class wallPaperForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/D:/cvcbank/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/mngbot/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1524211722455L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"pop_wrap\" style=\"width:480px;\">\r\n");
      out.write("\t<form method=\"post\" enctype=\"multipart/form-data\" onsubmit=\"return false;\">\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"orgFileNm\" v-model=\"vo.orgFileNm\">\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"wallpaperFileNm\" v-model=\"vo.wallpaperFileNm\">\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"filePath\" v-model=\"vo.filePath\">\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"userId\" v-model=\"vo.userId\">\r\n");
      out.write("\t<div class=\"pop_tit\">\r\n");
      out.write("\t\t<p>배경화면 설정</p>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"pop_cont\">\r\n");
      out.write("\t\t<div class=\"bg_chg_area\">\r\n");
      out.write("\t\t\t<span class=\"bg_img\" style=\"background-image:url('/images/bot/bg_main.png')\"></span>\r\n");
      out.write("\t\t\t<div class=\"ctrl\">\r\n");
      out.write("\t\t\t\t<input type=\"file\" id=\"photo_upload\" class=\"ir\" name=\"uploadFile\" @change=\"btnFileUpload\" accept=\".jpg, .png\">\r\n");
      out.write("\t\t\t\t<label for=\"photo_upload\">사진업로드</label>\r\n");
      out.write("\t\t\t\t<button class=\"del\" @click=\"btnFileDel\">사진삭제</button>\r\n");
      out.write("\t\t\t\t<p>16:9 크기의 사진에 최적화되어 있습니다</p>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"btn_wrap\">\r\n");
      out.write("\t\t<button class=\"g_btn01\" @click=\"btnSave\">적용</button>\r\n");
      out.write("\t\t<button class=\"g_btn02\" onclick=\"hidePopupLayer(); return false\">닫기</button>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t</form>\r\n");
      out.write("</div>\r\n");
      out.write("<script>\r\n");
      out.write("\tvar wallPaper = new Vue({\r\n");
      out.write("\t\tel: '.pop_wrap'\r\n");
      out.write("\t\t, data: {\r\n");
      out.write("\t\t\tvo:{\r\n");
      out.write("\t\t\t\twallpaperFileNm: ''\r\n");
      out.write("\t\t\t\t, orgFileNm: ''\r\n");
      out.write("\t\t\t\t, filePath: ''\r\n");
      out.write("\t\t\t\t, delChk: false\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, img: '/images/bot/bg_main.png'\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, updated: function(){\r\n");
      out.write("\t\t\tsetPopup(2);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, mounted: function(){\r\n");
      out.write("\t\t\tthis.getImg();\r\n");
      out.write("\t\t\tsetPopup(2);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, methods: {\r\n");
      out.write("\t\t\tgetImg: function(){\r\n");
      out.write("\t\t\t\t$.get(\"/bot/user/getWallpaperView\",function(data){\r\n");
      out.write("\t\t\t\t\tif (data.wallpaperView.filePath != '' && data.wallpaperView.orgFileNm != \"\" && data.wallpaperView.wallpaperFileNm != \"\"){\r\n");
      out.write("\t\t\t\t\t\twallPaper.img = \"/file/download?savePath=\" + data.wallpaperView.filePath + \"&saveName=\" + data.wallpaperView.wallpaperFileNm + \"&realName=\" + data.wallpaperView.orgFileNm;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\telse {\r\n");
      out.write("\t\t\t\t\t\twallPaper.img = '/images/bot/bg_main.png';\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t$(\".bg_chg_area .bg_img\").attr(\"style\", \"background-image:url('\" + wallPaper.img +\"')\");\r\n");
      out.write("\t\t\t\t});\t\t\t\t\t\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, btnFileUpload: function(){\t\r\n");
      out.write("\t\t\t\t$(\"form\").ajaxSubmit({\r\n");
      out.write("\t\t\t\t\turl: '/bot/user/regWallPaperUpload'\r\n");
      out.write("\t\t\t\t\t, dataType: 'json'\r\n");
      out.write("\t\t\t\t\t, type: \"post\"\r\n");
      out.write("\t\t\t\t\t, success: function(data){\r\n");
      out.write("\t\t\t\t\t\twallPaper.vo.wallpaperFileNm = data.fileVo.saveFileNm;\r\n");
      out.write("\t\t\t\t\t\twallPaper.vo.orgFileNm = data.fileVo.realFileNm;\r\n");
      out.write("\t\t\t\t\t\twallPaper.vo.filePath = data.fileVo.saveFilePath;\r\n");
      out.write("\t\t\t\t\t\tvar imgUrl = \"/file/download?savePath=\" + data.fileVo.saveFilePath + \"&saveName=\" + data.fileVo.saveFileNm + \"&realName=\" + data.fileVo.realFileNm;\r\n");
      out.write("\t\t\t\t\t\twallPaper.img = imgUrl;\r\n");
      out.write("\t\t\t\t\t\t$(\".bg_img\").attr(\"style\",\"background-image:url('\"+imgUrl+\"')\");\r\n");
      out.write("\t\t\t\t\t\twallPaper.delChk = true;\r\n");
      out.write("\t\t\t\t\t\t$(\"form\").resetForm();\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, btnFileDel: function() {\r\n");
      out.write("\t\t\t\tif (wallPaper.img != \"/images/bot/bg_main.png\"){\r\n");
      out.write("\t\t\t\t\tif (confirm(\"사진을 삭제 하시겠습니까?\")) {\r\n");
      out.write("\t\t\t\t\t\twallPaper.vo.wallpaperFileNm = '';\r\n");
      out.write("\t\t\t\t\t\twallPaper.vo.orgFileNm = '';\r\n");
      out.write("\t\t\t\t\t\twallPaper.vo.filePath = '';\r\n");
      out.write("\t\t\t\t\t\t$(\".bg_img\").attr(\"style\",\"background-image:url('/images/bot/bg_main.png')\");\r\n");
      out.write("\t\t\t\t\t\twallPaper.img = \"/images/bot/bg_main.png\";\r\n");
      out.write("\t\t\t\t\t\twallPaper.delChk = false;\r\n");
      out.write("\t\t\t\t\t}\t\t\t\t\t\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, btnSave: function() {\r\n");
      out.write("\t\t\t\tif (confirm(\"적용하시겠습니까?\")){\r\n");
      out.write("\t\t\t\t\t$(\"form\").ajaxSubmit({\r\n");
      out.write("\t\t\t\t\t\turl: '/bot/user/saveWallPaperPrc'\r\n");
      out.write("\t\t\t\t\t\t, dataType: 'json'\r\n");
      out.write("\t\t\t\t\t\t, type: 'post'\r\n");
      out.write("\t\t\t\t\t\t, success: function(data){\r\n");
      out.write("\t\t\t\t\t\t\tif (data.save){\r\n");
      out.write("\t\t\t\t\t\t\t\talert(\"적용되었습니다.\");\r\n");
      out.write("\t\t\t\t\t\t\t\tif (parent.parent.mainView == undefined){\r\n");
      out.write("\t\t\t\t\t\t\t\t\thidePopupLayer();\r\n");
      out.write("\t\t\t\t\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\tif (parent.parent.mainView.getBgImg){\r\n");
      out.write("\t\t\t\t\t\t\t\t\tparent.parent.mainView.getBgImg()\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\thidePopupLayer();\r\n");
      out.write("\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t, error: function(xhr, status, error) {\r\n");
      out.write("\t\t\t\t\t\t\talert($(xhr.responseText).text());\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
