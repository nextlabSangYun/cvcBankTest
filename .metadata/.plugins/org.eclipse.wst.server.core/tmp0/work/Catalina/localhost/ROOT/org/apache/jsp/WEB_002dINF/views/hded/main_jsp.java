/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.30
 * Generated at: 2018-11-19 05:14:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.hded;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class main_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(5);
    _jspx_dependants.put("/WEB-INF/nextlab.tld", Long.valueOf(1524211545637L));
    _jspx_dependants.put("/WEB-INF/lib/spring-webmvc-5.0.1.RELEASE.jar", Long.valueOf(1524211718482L));
    _jspx_dependants.put("jar:file:/D:/cvcbank/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/mngbot/WEB-INF/lib/spring-webmvc-5.0.1.RELEASE.jar!/META-INF/spring.tld", Long.valueOf(1508824370000L));
    _jspx_dependants.put("jar:file:/D:/cvcbank/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/mngbot/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1524211722455L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<link href=\"/css/fullcalendar.min.css\" rel=\"stylesheet\">\r\n");
      out.write("<link href=\"/css/fullcalendar.print.min.css\" rel=\"stylesheet\" media=\"print\">\r\n");
      out.write("<script src=\"/js/fullcalendar.min.js\"></script>\r\n");
      out.write("<script src=\"/js/locale-all.js\"></script>\r\n");
      out.write("<script src=\"/js/gcal.min.js\"></script>\r\n");
      out.write("<div class=\"content\">\r\n");
      out.write("\t<div class=\"sub_layout\">\r\n");
      out.write("\t\t<p class=\"cate_tit\">참여 프로젝트</p>\r\n");
      out.write("\t\t<div class=\"g_table\">\r\n");
      out.write("\t\t\t<table>\r\n");
      out.write("\t\t\t\t<caption>프로젝트 이름, 기간, 진행상태, 바로가기로 구성된 표 입니다.</caption>\r\n");
      out.write("\t\t\t\t<colgroup>\r\n");
      out.write("\t\t\t\t\t<col style=\"width:35%;\">\r\n");
      out.write("\t\t\t\t\t<col style=\"width:15%;\">\r\n");
      out.write("\t\t\t\t\t<col style=\"width:10%;\">\r\n");
      out.write("\t\t\t\t\t<col style=\"width:10%;\">\r\n");
      out.write("\t\t\t\t\t<col style=\"width:15%;\">\r\n");
      out.write("\t\t\t\t\t<col style=\"width:15%;\">\r\n");
      out.write("\t\t\t\t</colgroup>\r\n");
      out.write("\t\t\t\t<thead>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<th>프로젝트명</th>\r\n");
      out.write("\t\t\t\t\t\t<th>기간</th>\r\n");
      out.write("\t\t\t\t\t\t<th>시스템</th>\r\n");
      out.write("\t\t\t\t\t\t<th>차수</th>\r\n");
      out.write("\t\t\t\t\t\t<th>최초 작성</th>\r\n");
      out.write("\t\t\t\t\t\t<th>최종 수정</th>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t</thead>\r\n");
      out.write("\t\t\t\t<tbody>\r\n");
      out.write("\t\t\t\t\t<tr v-for=\"list in myProjectProgressList\">\r\n");
      out.write("\t\t\t\t\t\t<td><p class=\"ellips\"><a :href=\"pjUrl+list.pid\" class=\"link\">{{ list.projectNm }}</a></p></td>\r\n");
      out.write("\t\t\t\t\t\t<td>{{ list.projectStDt | dateFormat }} ~ {{ list.projectEndDt | dateFormat }}</td>\r\n");
      out.write("\t\t\t\t\t\t<td>{{ list.systemNm }}</td>\r\n");
      out.write("\t\t\t\t\t\t<td v-if=\"list.chasuStat == 'Y'\">{{ list.chasu }}차</td>\r\n");
      out.write("\t\t\t\t\t\t<td v-else>{{ list.chasu }}차 (수정개발)</td>\r\n");
      out.write("\t\t\t\t\t\t<td>{{ list.regNm }}<br/>({{ list.regDtm | dateTimeFormat }})</td>\r\n");
      out.write("\t\t\t\t\t\t<td>{{ list.modNm }}<br/>({{ list.modDtm | dateTimeFormat }})</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr v-if=\"myProjectProgressList.length == 0\">\r\n");
      out.write("\t\t\t\t\t\t<td colspan=\"6\">참여중인 프로젝트가 없습니다.</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t</tbody>\r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"btm_con con_col2\">\r\n");
      out.write("\t\t\t<div class=\"l_cont\">\r\n");
      out.write("\t\t\t\t<p class=\"cate_tit\">프로젝트 스케쥴</p>\r\n");
      out.write("\t\t\t\t<div class=\"prj_sch_frame\">\r\n");
      out.write("\t\t\t\t\t<div id=\"calendar\"></div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"r_cont\">\r\n");
      out.write("\t\t\t\t<p class=\"cate_tit prj_tc_title\">TC 변경이력(최근 30건)\r\n");
      out.write("\t\t\t\t\t<button class=\"btn_default\" @click=\"goTcChangeHist\">\r\n");
      out.write("\t\t\t\t\t\t<span>H/E TC 변경이력 전체 조회</span>\r\n");
      out.write("\t\t\t\t\t</button> \r\n");
      out.write("\t\t\t\t</p>\r\n");
      out.write("\t\t\t\t<div class=\"prj_tc_frame\">\r\n");
      out.write("\t\t\t\t\t<div class=\"tc_title\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"g_table\">\r\n");
      out.write("\t\t\t\t\t\t\t<table>\r\n");
      out.write("\t\t\t\t\t\t\t\t<caption>TC 최근 30건 변경이력으로 구성된 표입니다.</caption>\r\n");
      out.write("\t\t\t\t\t\t\t\t<colgroup>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<col style=\"width:95px;\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<col style=\"width:170px;\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<col style=\"width:175px;\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<col>\r\n");
      out.write("\t\t\t\t\t\t\t\t</colgroup>\r\n");
      out.write("\t\t\t\t\t\t\t\t<thead>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<th>변경일시</th>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<th>프로젝트명</th>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<th>TC</th>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<th>변경이력</th>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t</thead>\r\n");
      out.write("\t\t\t\t\t\t\t</table>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t<div class=\"tc_wrap\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"g_table\">\r\n");
      out.write("\t\t\t\t\t\t\t<table>\r\n");
      out.write("\t\t\t\t\t\t\t\t<caption>TC 최근 30건 변경이력으로 구성된 표입니다.</caption>\r\n");
      out.write("\t\t\t\t\t\t\t\t<colgroup>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<col style=\"width:95px;\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<col style=\"width:170px;\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<col style=\"width:175px;\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<col>\r\n");
      out.write("\t\t\t\t\t\t\t\t</colgroup>\r\n");
      out.write("\t\t\t\t\t\t\t\t<tbody>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<tr v-for=\"list in tcChangeHistList\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<td>{{ list.regDtm | dateTimeFormat }}</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<td class=\"prj_title\">{{ list.projectNm }}</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<td class=\"prj_title\">{{ list.tcNm }}</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<div class=\"tb_fixed_btns\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t<button class=\"smbtn_default\" @click=\"goTcChangeHistByGroupId(list.tcGroupId)\">변경이력</button>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<tr v-if=\"tcChangeHistList.length == 0\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<td colspan=\"4\">변경된 테스트케이스가 없습니다.</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t</tbody>\r\n");
      out.write("\t\t\t\t\t\t\t</table>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"top_fixed_btns\">\r\n");
      out.write("\t\t\t<div class=\"btn_link_all\" v-for=\"m in getHdedMenuList\" >\r\n");
      out.write("\t\t\t\t<button v-if=\"m.pageType == 'C103'\" @click=\"goShowPopupLayer(m.menuUrl)\"><img :src=\"'/images/hded/btn_' + m.menuId + '.png'\" :alt=\"m.menuNm\"></button>\r\n");
      out.write("\t\t\t\t<button v-else-if=\"m.pageType == 'C102'\" @click=\"goPopupView(m.menuUrl, m.menuNm)\"><img :src=\"'/images/hded/btn_' + m.menuId + '.png'\" :alt=\"m.menuNm\"></button>\r\n");
      out.write("\t\t\t\t<a v-else :href=\"m.menuUrl\"><img :src=\"'/images/hded/btn_' + m.menuId + '.png'\" :alt=\"m.menuNm\"></a>\r\n");
      out.write("\t\t\t\t<span class=\"tooltip\" v-if=\"currentLocale == 'en' && m.menuId == '000402'\">");
      if (_jspx_meth_spring_005fmessage_005f0(_jspx_page_context))
        return;
      out.write("</span>\r\n");
      out.write("\t\t\t\t<span class=\"tooltip\" v-else-if=\"currentLocale == 'en' && m.menuId == '000403'\">");
      if (_jspx_meth_spring_005fmessage_005f1(_jspx_page_context))
        return;
      out.write("</span>\r\n");
      out.write("\t\t\t\t<span class=\"tooltip\" v-else>{{m.menuNm}}</span>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\tvar mainView = new Vue({\r\n");
      out.write("\t\tel: '.content'\r\n");
      out.write("\t\t, data: {\r\n");
      out.write("\t\t\tcurrentLocale : '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.response.locale}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("'\r\n");
      out.write("\t\t\t, hdedMenuList: []\r\n");
      out.write("\t\t\t, hdedMenu: ['000402', '000403', '000404']\r\n");
      out.write("\t\t\t, pjUrl: '/hded/projectMain?pid='\r\n");
      out.write("\t\t\t, myProjectProgressList: []\r\n");
      out.write("\t\t\t, tcChangeHistList: []\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, mounted: function() {\r\n");
      out.write("\t\t\tthis.$nextTick(function() {\r\n");
      out.write("\t\t\t\tthis.hdedMenuList = JSON.parse(decodeURIComponent('");
      if (_jspx_meth_c_005fout_005f0(_jspx_page_context))
        return;
      out.write("').replace(/\\+/g, \" \"));\r\n");
      out.write("\t\t\t\tthis.getMyProjectProgressList();\r\n");
      out.write("\t\t\t\tthis.getCalendarView();\r\n");
      out.write("\t\t\t\tthis.getTcChangeHistList();\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, updated: function() {\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, computed: {\r\n");
      out.write("\t\t\tgetHdedMenuList: function() {\r\n");
      out.write("\t\t\t\tvar hdedMenu = this.hdedMenu;\r\n");
      out.write("\t\t\t\treturn this.hdedMenuList.filter(function(menuList) {\r\n");
      out.write("\t\t\t\t\treturn hdedMenu.some(function(m) {\r\n");
      out.write("\t\t\t\t\t\treturn menuList.menuId === m;\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t}).sort(function(a,b) {\r\n");
      out.write("\t\t\t\t\treturn a.menuOrder - b.menuOrder;\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, methods: {\r\n");
      out.write("\t\t\tgetMyProjectProgressList: function() {\r\n");
      out.write("\t\t\t\t$.get(\"/hded/project/getMyProjectProgressList\", function(data){\r\n");
      out.write("\t\t\t\t\tmainView.myProjectProgressList = data.myProjectProgressList;\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, getTcChangeHistList: function() {\r\n");
      out.write("\t\t\t\t$.get(\"/hded/tc/getTcChangeHistList\", function(data){\r\n");
      out.write("\t\t\t\t\tmainView.tcChangeHistList = data.tcChangeHistList;\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, goTcChangeHistByGroupId: function(groupId) {\r\n");
      out.write("\t\t\t\tpopup('/hded/tc/tcChangeHistByGroupId?groupId='+groupId, 'Test Case 변경 이력', 900, 500, 'yes');\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, goModalView: function(url) {\r\n");
      out.write("\t\t\t\tif (url) {\r\n");
      out.write("\t\t\t\t\tshowPopupLayer(url);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, goPopupView: function(url, menuNm) {\r\n");
      out.write("\t\t\t\tif (url) {\r\n");
      out.write("\t\t\t\t\tpopup(url, menuNm, 610, 400, 'yes');\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, goTcChangeHist: function() {\r\n");
      out.write("\t\t\t\tlocation.href = \"/hded/tc/tcChangeHist\"\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, getCalendarView: function() {\r\n");
      out.write("\t\t\t\t$('#calendar').fullCalendar({\r\n");
      out.write("\t\t\t\t\tcustomButtons: {\r\n");
      out.write("\t\t\t\t\t\tfullButton:{\r\n");
      out.write("\t\t\t\t\t\t\ttext: '크게보기',\r\n");
      out.write("\t\t\t\t\t\t\tclick: function(){\r\n");
      out.write("\t\t\t\t\t\t\t\tlocation.href = \"/hded/fullCalendar\"\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t, header: {\r\n");
      out.write("\t\t\t\t\t\tleft: 'prev,next',\r\n");
      out.write("\t\t\t\t\t\tcenter: 'title',\r\n");
      out.write("\t\t\t\t\t\tright: 'today fullButton'\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t, locale: 'ko'\r\n");
      out.write("\t\t\t\t\t, height: 693\r\n");
      out.write("\t\t\t\t\t, editable: false\r\n");
      out.write("\t\t\t\t\t, navLinks: false\r\n");
      out.write("\t\t\t\t\t, eventLimit: true\r\n");
      out.write("\t\t\t\t\t, eventLimitText: '더보기'\r\n");
      out.write("\t\t\t\t\t, googleCalendarApiKey: 'AIzaSyD54ma_Q0Tcnu-N6y978iiD8IA4QIk0phg'\r\n");
      out.write("\t\t\t\t\t, events: function(start, end, timezone, callback) {\r\n");
      out.write("\t\t\t\t\t\t$.get(\"/hded/project/getMyProjectChasuList\", function(data){\r\n");
      out.write("\t\t\t\t\t\t\tif (!isEmpty(data)) {\r\n");
      out.write("\t\t\t\t\t\t\t\tvar events = [];\r\n");
      out.write("\t\t\t\t\t\t\t\tvar cnt = 0;\r\n");
      out.write("\t\t\t\t\t\t\t\tvar icnt = 0;\r\n");
      out.write("\t\t\t\t\t\t\t\tvar _color = [\"#58c9b9\",\"#548687\",\"#4f86c6\",\"#aacd6e\",\"#1ec0ff\",\"#aaabd3\",\"#ff7473\",\"#ee6e9f\",\"#f3a632\",\"#c24f5d\"];\r\n");
      out.write("\t\t\t\t\t\t\t\tvar projectColor = new Map();\r\n");
      out.write("\t\t\t\t\t\t\t\t$(data.myProjectList).each(function(i,e) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar color = '';\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (projectColor.has(e.pid)) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tcolor = projectColor.get(e.pid);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tcolor = _color[cnt];\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tprojectColor.set(e.pid, color);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (cnt == _color.length-1) cnt = 0\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\telse cnt = cnt+1\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\tevents.push({\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\ttitle: e.projectNm+\"-\"+e.chasu+\"차 (\"+e.chasuStDtm.substring(5,10)+\"~\"+e.chasuEdDtm.substring(5,10)+\")\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t, start: e.chasuStDtm\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t, end: e.chasuEdDtm\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t, color: color\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t, url: '/hded/projectMain?pid='+e.pid\r\n");
      out.write("\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\tcallback(events);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t, eventSources : [\r\n");
      out.write("\t\t\t\t\t\t{\r\n");
      out.write("\t\t\t\t\t\t\tgoogleCalendarId : \"ko.south_korea#holiday@group.v.calendar.google.com\"\r\n");
      out.write("\t\t\t\t\t\t\t, color : \"#FFFFFF\"\r\n");
      out.write("\t\t\t\t\t\t\t, textColor : \"#DF0101\"\r\n");
      out.write("\t\t\t\t\t\t\t, className: \"googleCalendar\"\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t]\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_spring_005fmessage_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f0 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f0.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f0.setParent(null);
    // /WEB-INF/views/hded/main.jsp(121,79) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f0.setCode("000402");
    int[] _jspx_push_body_count_spring_005fmessage_005f0 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f0 = _jspx_th_spring_005fmessage_005f0.doStartTag();
      if (_jspx_th_spring_005fmessage_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f0[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f0.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f0.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f0);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f1 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f1.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f1.setParent(null);
    // /WEB-INF/views/hded/main.jsp(122,84) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f1.setCode("000403");
    int[] _jspx_push_body_count_spring_005fmessage_005f1 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f1 = _jspx_th_spring_005fmessage_005f1.doStartTag();
      if (_jspx_th_spring_005fmessage_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f1[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f1.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f1.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f1);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fout_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f0 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    _jspx_th_c_005fout_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fout_005f0.setParent(null);
    // /WEB-INF/views/hded/main.jsp(142,55) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fout_005f0.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${hdedMenuList}", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
    int _jspx_eval_c_005fout_005f0 = _jspx_th_c_005fout_005f0.doStartTag();
    if (_jspx_th_c_005fout_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
    return false;
  }
}
