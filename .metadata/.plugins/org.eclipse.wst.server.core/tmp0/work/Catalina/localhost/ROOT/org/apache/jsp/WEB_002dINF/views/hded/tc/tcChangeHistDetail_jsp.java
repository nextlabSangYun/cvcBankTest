/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.30
 * Generated at: 2018-07-11 08:59:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.hded.tc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class tcChangeHistDetail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/WEB-INF/nextlab.tld", Long.valueOf(1524211545637L));
    _jspx_dependants.put("jar:file:/D:/cvcbank/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/mngbot/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1524211722455L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.release();
    _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"pop_wrap win_pop\">\r\n");
      out.write("\t<div class=\"pop_tit\">\r\n");
      out.write("\t\t<p>변경이력 상세</p>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"pop_cont\">\r\n");
      out.write("\t\t<div class=\"g_table\">\r\n");
      out.write("\t\t\t<table>\r\n");
      out.write("\t\t\t\t<caption>Test Case 변경 이력을 비교해서 보여주는 표 입니다.</caption>\r\n");
      out.write("\t\t\t\t<colgroup>\r\n");
      out.write("\t\t\t\t\t<col style=\"width:16%\">\r\n");
      out.write("\t\t\t\t\t<col style=\"width:42%\">\r\n");
      out.write("\t\t\t\t\t<col style=\"width:42%\">\r\n");
      out.write("\t\t\t\t</colgroup>\r\n");
      out.write("\t\t\t\t<thead>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<th></th>\r\n");
      out.write("\t\t\t\t\t\t<th>선택 데이터</th>\r\n");
      out.write("\t\t\t\t\t\t<th>현재 데이터</th>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t</thead>\r\n");
      out.write("\t\t\t\t<tbody>\r\n");
      out.write("\t\t\t\t\t<tr :class=\"tcInputValChange ? 'edited' : ''\">\r\n");
      out.write("\t\t\t\t\t\t<th>Input<br/>(테스트 입력 값)</th>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"l_align\">{{selectTc.tcInputVal}}</td>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"l_align\">{{currentTc.tcInputVal}}</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr :class=\"tcOutputValChange ? 'edited' : ''\">\r\n");
      out.write("\t\t\t\t\t\t<th>Output<br/>(예상 결과 값)</th>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"l_align\">{{selectTc.tcOutputVal}}</td>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"l_align\">{{currentTc.tcOutputVal}}</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr :class=\"normalCriterionChange ? 'edited' : ''\">\r\n");
      out.write("\t\t\t\t\t\t<th>정상판단기준</th>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"l_align\">{{selectTc.normalCriterion}}</td>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"l_align\">{{currentTc.normalCriterion}}</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr :class=\"beforeResultCdChange ? 'edited' : ''\">\r\n");
      out.write("\t\t\t\t\t\t<th>사전 테스트 결과</th>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"l_align\">{{selectTc.beforeResultCd | code(codeListB300)}}</td>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"l_align\">{{currentTc.beforeResultCd | code(codeListB300)}}</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<th>변경일시</th>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"l_align\">{{selectTc.regDtm | dateTimeFormat}}</td>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"l_align\">{{currentTc.regDtm | dateTimeFormat}}</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<th>비고</th>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"l_align\">{{selectTc.bigo}}</td>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"l_align\">{{currentTc.bigo}}</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<th>수정내역/사유</th>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"l_align\">{{selectTc.tcChangeReason}}</td>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"l_align\">{{currentTc.tcChangeReason}}</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<th>작업자</th>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"l_align\">{{selectTc.regNm}}</td>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"l_align\">{{currentTc.regNm}}</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t</tbody>\r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"btn_wrap\">\r\n");
      out.write("\t\t<button class=\"btn_cancel\" onclick=\"window.close(); return false\">닫기</button>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("<script>\r\n");
      out.write("var view = new Vue(\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tel : '.pop_wrap',\r\n");
      out.write("\t\t\tdata : {\r\n");
      out.write("\t\t\t\ttcId: '");
      if (_jspx_meth_c_005fout_005f0(_jspx_page_context))
        return;
      out.write("'\r\n");
      out.write("\t\t\t\t, tcChangeHistDetailList: []\r\n");
      out.write("\t\t\t\t, selectTc: []\r\n");
      out.write("\t\t\t\t, currentTc: []\r\n");
      out.write("\t\t\t\t, tcInputValChange: false\r\n");
      out.write("\t\t\t\t, tcOutputValChange: false\r\n");
      out.write("\t\t\t\t, normalCriterionChange: false\r\n");
      out.write("\t\t\t\t, beforeResultCdChange: false\r\n");
      out.write("\t\t\t\t, codeListB300: '");
      if (_jspx_meth_nl_005fcodeListJson_005f0(_jspx_page_context))
        return;
      out.write("'\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tmounted : function() {\r\n");
      out.write("\t\t\t\tthis.$nextTick(function(){\r\n");
      out.write("\t\t\t\t\tthis.getTcChangeHistDetail(view.tcId);\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tupdated : function() {\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tmethods : {\r\n");
      out.write("\t\t\t\tgetTcChangeHistDetail: function(tcId) {\r\n");
      out.write("\t\t\t\t\t$.get(\"/hded/tc/getTcChangeHistDetail?tcId=\"+tcId, function(data){\r\n");
      out.write("\t\t\t\t\t\tview.tcChangeHistDetailList = data.tcChangeHistDetailList;\r\n");
      out.write("\t\t\t\t\t\tview.selectTc = view.tcChangeHistDetailList[0];\r\n");
      out.write("\t\t\t\t\t\tview.currentTc = view.tcChangeHistDetailList[1];\r\n");
      out.write("\t\t\t\t\t\tview.checkChangeColumn();\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t, checkChangeColumn: function() {\r\n");
      out.write("\t\t\t\t\tif (this.currentTc.tcInputVal !== this.selectTc.tcInputVal) {\r\n");
      out.write("\t\t\t\t\t\tthis.tcInputValChange = true;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif (this.currentTc.tcOutputVal !== this.selectTc.tcOutputVal) {\r\n");
      out.write("\t\t\t\t\t\tthis.tcOutputValChange = true;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif (this.currentTc.normalCriterion !== this.selectTc.normalCriterion) {\r\n");
      out.write("\t\t\t\t\t\tthis.normalCriterionChange = true;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif (this.currentTc.beforeResultCd !== this.selectTc.beforeResultCd) {\r\n");
      out.write("\t\t\t\t\t\tthis.beforeResultCdChange = true;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fout_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f0 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    _jspx_th_c_005fout_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fout_005f0.setParent(null);
    // /WEB-INF/views/hded/tc/tcChangeHistDetail.jsp(79,11) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fout_005f0.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${tcId}", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
    int _jspx_eval_c_005fout_005f0 = _jspx_th_c_005fout_005f0.doStartTag();
    if (_jspx_th_c_005fout_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
    return false;
  }

  private boolean _jspx_meth_nl_005fcodeListJson_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  nl:codeListJson
    kr.co.nextlab.tag.CodeListJsonTag _jspx_th_nl_005fcodeListJson_005f0 = (kr.co.nextlab.tag.CodeListJsonTag) _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.get(kr.co.nextlab.tag.CodeListJsonTag.class);
    _jspx_th_nl_005fcodeListJson_005f0.setPageContext(_jspx_page_context);
    _jspx_th_nl_005fcodeListJson_005f0.setParent(null);
    // /WEB-INF/views/hded/tc/tcChangeHistDetail.jsp(87,21) name = codeType type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_nl_005fcodeListJson_005f0.setCodeType("B300");
    int _jspx_eval_nl_005fcodeListJson_005f0 = _jspx_th_nl_005fcodeListJson_005f0.doStartTag();
    if (_jspx_th_nl_005fcodeListJson_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.reuse(_jspx_th_nl_005fcodeListJson_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.reuse(_jspx_th_nl_005fcodeListJson_005f0);
    return false;
  }
}
