/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.30
 * Generated at: 2018-05-02 09:12:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.bot.app;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class appAuthMngForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/D:/cvcbank/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/mngbot/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1524211722455L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"pop_wrap\" style=\"width:580px\">\r\n");
      out.write("\t<div class=\"pop_tit\">\r\n");
      out.write("\t\t<p>APP권한관리 정보수정</p>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"pop_cont\">\r\n");
      out.write("\t\t<div class=\"g_table02\">\r\n");
      out.write("\t\t\t<table>\r\n");
      out.write("\t\t\t\t<caption>앱이름, 권한그룹명 등 권한그룹 정보 확인 및 수정하는 표 입니다.</caption>\r\n");
      out.write("\t\t\t\t<colgroup>\r\n");
      out.write("\t\t\t\t\t<col style=\"width:120px;\">\r\n");
      out.write("\t\t\t\t\t<col>\r\n");
      out.write("\t\t\t\t</colgroup>\r\n");
      out.write("\t\t\t\t<tbody>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<th>앱이름</th>\r\n");
      out.write("\t\t\t\t\t\t<td>{{ appAuthView.appNm }}</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<th>권한그룹명</th>\r\n");
      out.write("\t\t\t\t\t\t<td>{{ appAuthView.authNm }}</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<th>메뉴할당권한</th>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"sel_tree\">\r\n");
      out.write("\t\t\t\t\t\t\t<ul class=\"sel_tree_list\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<li v-for=\"(m, index) in authMenuList\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<div class=\"list\" :class=\"[(m.lvl==4) ? 'top' : ('sub'+(m.lvl/2-2))]\"><label :for=\"'chk'+index\" class=\"auth_name\">{{ m.menuNm }}</label> <input type=\"checkbox\" :id=\"'chk'+index\" :value=\"m.menuId\" v-model=\"checkMenu\" @click=\"menuCheck(event, m.menuParId, m.sort)\"></div>\r\n");
      out.write("\t\t\t\t\t\t\t\t</li>\r\n");
      out.write("\t\t\t\t\t\t\t</ul>\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t</tbody>\r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"btn_wrap\">\r\n");
      out.write("\t\t<button class=\"g_btn01\" @click=\"saveAuthMenu\">저장</button>\r\n");
      out.write("\t\t<button class=\"g_btn02\" onclick=\"hidePopupLayer(); return false\">닫기</button>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("<script>\r\n");
      out.write("\tvar cont = new Vue({\r\n");
      out.write("\t\tel: '.pop_wrap'\r\n");
      out.write("\t\t, data: {\r\n");
      out.write("\t\t\tappAuthView: {}\r\n");
      out.write("\t\t\t, authMenuList: []\r\n");
      out.write("\t\t\t, checkMenu: []\r\n");
      out.write("\t\t\t, menuChecked: false\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, beforeMount: function() {\r\n");
      out.write("\t\t\tvar param = {\r\n");
      out.write("\t\t\t\tappId: '");
      if (_jspx_meth_c_005fout_005f0(_jspx_page_context))
        return;
      out.write("'\r\n");
      out.write("\t\t\t\t, authId: '");
      if (_jspx_meth_c_005fout_005f1(_jspx_page_context))
        return;
      out.write("'\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tthis.getView(param);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, updated: function() {\r\n");
      out.write("\t\t\tsetPopup(2);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, methods: {\r\n");
      out.write("\t\t\tgetView: function(param) {\r\n");
      out.write("\t\t\t\t$.get('/bot/app/getAuthMngView', param, function(data) {\r\n");
      out.write("\t\t\t\t\tif (data.appAuthView)\r\n");
      out.write("\t\t\t\t\t\tcont.appAuthView = data.appAuthView;\r\n");
      out.write("\t\t\t\t\tif (data.authMenuList) {\r\n");
      out.write("\t\t\t\t\t\tcont.authMenuList = data.authMenuList;\r\n");
      out.write("\t\t\t\t\t\tcont.authMenuList.forEach(function(menu){\r\n");
      out.write("\t\t\t\t\t\t\tif (menu.authMenuId)\r\n");
      out.write("\t\t\t\t\t\t\t\tcont.checkMenu.push(menu.menuId);\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, menuCheck: function(event, menuParId, sort) {\r\n");
      out.write("\t\t\t\t// 하위메뉴체크\r\n");
      out.write("\t\t\t\tthis.groupCheck(event, sort);\r\n");
      out.write("\t\t\t\t// 상위메뉴체크\r\n");
      out.write("\t\t\t\tthis.parentCheck(event, sort);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, groupCheck: function(event, sort) {\r\n");
      out.write("\t\t\t\tvar checked = event.target.checked;\r\n");
      out.write("\t\t\t\tthis.authMenuList.forEach(function(menu){\r\n");
      out.write("\t\t\t\t\tif (menu.sort.indexOf(sort) == 0) {\r\n");
      out.write("\t\t\t\t\t\tif (checked \r\n");
      out.write("\t\t\t\t\t\t\t\t&& cont.checkMenu.indexOf(menu.menuId)==-1) {\r\n");
      out.write("\t\t\t\t\t\t\tcont.checkMenu.push(menu.menuId);\r\n");
      out.write("\t\t\t\t\t\t} else if (!checked \r\n");
      out.write("\t\t\t\t\t\t\t\t&& cont.checkMenu.indexOf(menu.menuId)!=-1) {\r\n");
      out.write("\t\t\t\t\t\t\tcont.checkMenu.splice(cont.checkMenu.indexOf(menu.menuId), 1);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, parentCheck: function(event, sort) {\r\n");
      out.write("\t\t\t\tvar checked = event.target.checked;\r\n");
      out.write("\t\t\t\tif (!checked) return;\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tvar parentMenuList = sort.split(\"/\");\r\n");
      out.write("\t\t\t\tvar menuList = this.authMenuList;\r\n");
      out.write("\t\t\t\tvar len = this.authMenuList.length;\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tparentMenuList.forEach(function(menuParId) {\r\n");
      out.write("\t\t\t\t\tfor (var i=0; i<len; i++) {\r\n");
      out.write("\t\t\t\t\t\tif (menuList[i].menuId == menuParId) {\r\n");
      out.write("\t\t\t\t\t\t\tif (cont.checkMenu.indexOf(menuParId)==-1)\r\n");
      out.write("\t\t\t\t\t\t\t\tcont.checkMenu.push(menuParId);\r\n");
      out.write("\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, saveAuthMenu: function() {\r\n");
      out.write("\t\t\t\tvar param = {\r\n");
      out.write("\t\t\t\t\tmenuIdArray: cont.checkMenu\r\n");
      out.write("\t\t\t\t\t, appId: cont.appAuthView.appId\r\n");
      out.write("\t\t\t\t\t, authId: cont.appAuthView.authId\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tjQuery.ajaxSettings.traditional = true;\r\n");
      out.write("\t\t\t\t$.post('/bot/app/saveAuthMenuPrc', param, function(data) {\r\n");
      out.write("\t\t\t\t\tif (data.save) \r\n");
      out.write("\t\t\t\t\t\talert(\"저장되었습니다.\");\r\n");
      out.write("\t\t\t\t\telse {\r\n");
      out.write("\t\t\t\t\t\tif (data.message) alert(data.message);\r\n");
      out.write("\t\t\t\t\t\telse alert(\"저장이 실패하였습니다.\");\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fout_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f0 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    _jspx_th_c_005fout_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fout_005f0.setParent(null);
    // /WEB-INF/views/bot/app/appAuthMngForm.jsp(54,12) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fout_005f0.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.appId}", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
    int _jspx_eval_c_005fout_005f0 = _jspx_th_c_005fout_005f0.doStartTag();
    if (_jspx_th_c_005fout_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
    return false;
  }

  private boolean _jspx_meth_c_005fout_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f1 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    _jspx_th_c_005fout_005f1.setPageContext(_jspx_page_context);
    _jspx_th_c_005fout_005f1.setParent(null);
    // /WEB-INF/views/bot/app/appAuthMngForm.jsp(55,15) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fout_005f1.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.authId}", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
    int _jspx_eval_c_005fout_005f1 = _jspx_th_c_005fout_005f1.doStartTag();
    if (_jspx_th_c_005fout_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f1);
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f1);
    return false;
  }
}
