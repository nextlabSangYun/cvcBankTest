/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.30
 * Generated at: 2018-12-04 08:04:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.bmt.issue;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class issueView_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/WEB-INF/nextlab.tld", Long.valueOf(1524211545637L));
    _jspx_dependants.put("jar:file:/D:/cvcbank/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/mngbot/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1524211722455L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fnl_005fselect_0026_005fv_002dmodel_005fcodeType_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fnl_005fselect_0026_005fv_002dmodel;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fnl_005foption_0026_005fvalue;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fnl_005foptions_0026_005fcodeType_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fnl_005ftcCateListJson_0026_005fpid_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fnl_005fselect_0026_005fv_002dmodel_005fcodeType_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fnl_005fselect_0026_005fv_002dmodel = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fnl_005foption_0026_005fvalue = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fnl_005foptions_0026_005fcodeType_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fnl_005ftcCateListJson_0026_005fpid_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fnl_005fselect_0026_005fv_002dmodel_005fcodeType_005fnobody.release();
    _005fjspx_005ftagPool_005fnl_005fselect_0026_005fv_002dmodel.release();
    _005fjspx_005ftagPool_005fnl_005foption_0026_005fvalue.release();
    _005fjspx_005ftagPool_005fnl_005foptions_0026_005fcodeType_005fnobody.release();
    _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.release();
    _005fjspx_005ftagPool_005fnl_005ftcCateListJson_0026_005fpid_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"pop_wrap\" style=\"width: 1080px;\">\r\n");
      out.write("\t<div class=\"pop_tit\">\r\n");
      out.write("\t\t<p>이슈 이력 보기</p>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"pop_cont\">\r\n");
      out.write("\t\t<div class=\"g_table02\">\r\n");
      out.write("\t\t\t<table>\r\n");
      out.write("\t\t\t\t<colgroup>\r\n");
      out.write("\t\t\t\t\t<col style=\"width: 120px;\">\r\n");
      out.write("\t\t\t\t\t<col>\r\n");
      out.write("\t\t\t\t</colgroup>\r\n");
      out.write("\t\t\t\t<tbody>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<th>이슈 제목</th>\r\n");
      out.write("\t\t\t\t\t\t<td v-if=\"(issueView.progressStat == 'B201' || issueView.progressStat == 'B202' || issueView.progressStat == 'B204' || issueView.progressStat == 'B205' || issueView.progressStat == 'B206') && projectView.projectStat !='C304'\"><input\r\n");
      out.write("\t\t\t\t\t\t\ttype=\"text\" class=\"full\" id=\"issueSubject\"\r\n");
      out.write("\t\t\t\t\t\t\tv-model=\"issueView.issueSubject\" maxlength=\"100\"></td>\r\n");
      out.write("\t\t\t\t\t\t<td v-else>{{issueView.issueSubject}}</td>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<th>중요도</th>\r\n");
      out.write("\t\t\t\t\t\t<td v-if=\"(issueView.progressStat == 'B201' || issueView.progressStat == 'B202' || issueView.progressStat == 'B204' || issueView.progressStat == 'B205' || issueView.progressStat == 'B206') && projectView.projectStat!='C304'\">");
      if (_jspx_meth_nl_005fselect_005f0(_jspx_page_context))
        return;
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td v-else><span\r\n");
      out.write("\t\t\t\t\t\t\t:class=\"[issueView.importance=='B101' ? 'state05' : issueView.importance=='B103' ? 'state01' : issueView.importance=='B102' ? 'state07' : 'state04']\">{{\r\n");
      out.write("\t\t\t\t\t\t\t\tissueView.importance | code(importanceCode) }}</span></td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<th>대분류</th>\r\n");
      out.write("\t\t\t\t\t\t<td v-if=\"(issueView.progressStat == 'B201' || issueView.progressStat == 'B202' || issueView.progressStat == 'B204' || issueView.progressStat == 'B205' || issueView.progressStat == 'B206') && projectView.projectStat!='C304'\">\r\n");
      out.write("\t\t\t\t\t\t\t");
      //  nl:select
      kr.co.nextlab.tag.CustomSelectTag _jspx_th_nl_005fselect_005f1 = (kr.co.nextlab.tag.CustomSelectTag) _005fjspx_005ftagPool_005fnl_005fselect_0026_005fv_002dmodel.get(kr.co.nextlab.tag.CustomSelectTag.class);
      _jspx_th_nl_005fselect_005f1.setPageContext(_jspx_page_context);
      _jspx_th_nl_005fselect_005f1.setParent(null);
      // /WEB-INF/views/bmt/issue/issueView.jsp(35,7) null
      _jspx_th_nl_005fselect_005f1.setDynamicAttribute(null, "v-model", "issueView.issueLcateCd");
      int[] _jspx_push_body_count_nl_005fselect_005f1 = new int[] { 0 };
      try {
        int _jspx_eval_nl_005fselect_005f1 = _jspx_th_nl_005fselect_005f1.doStartTag();
        if (_jspx_eval_nl_005fselect_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("\t\t\t\t\t\t\t\t");
            //  nl:option
            org.springframework.web.servlet.tags.form.OptionTag _jspx_th_nl_005foption_005f0 = (org.springframework.web.servlet.tags.form.OptionTag) _005fjspx_005ftagPool_005fnl_005foption_0026_005fvalue.get(org.springframework.web.servlet.tags.form.OptionTag.class);
            _jspx_th_nl_005foption_005f0.setPageContext(_jspx_page_context);
            _jspx_th_nl_005foption_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_nl_005fselect_005f1);
            // /WEB-INF/views/bmt/issue/issueView.jsp(36,8) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
            _jspx_th_nl_005foption_005f0.setValue("");
            int[] _jspx_push_body_count_nl_005foption_005f0 = new int[] { 0 };
            try {
              int _jspx_eval_nl_005foption_005f0 = _jspx_th_nl_005foption_005f0.doStartTag();
              if (_jspx_eval_nl_005foption_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
                java.lang.Object value = null;
                java.lang.String displayValue = null;
                if (_jspx_eval_nl_005foption_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
                  out = _jspx_page_context.pushBody();
                  _jspx_push_body_count_nl_005foption_005f0[0]++;
                  _jspx_th_nl_005foption_005f0.setBodyContent((javax.servlet.jsp.tagext.BodyContent) out);
                  _jspx_th_nl_005foption_005f0.doInitBody();
                }
                value = (java.lang.Object) _jspx_page_context.findAttribute("value");
                displayValue = (java.lang.String) _jspx_page_context.findAttribute("displayValue");
                do {
                  out.write("- 선택 -");
                  int evalDoAfterBody = _jspx_th_nl_005foption_005f0.doAfterBody();
                  value = (java.lang.Object) _jspx_page_context.findAttribute("value");
                  displayValue = (java.lang.String) _jspx_page_context.findAttribute("displayValue");
                  if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                    break;
                } while (true);
                if (_jspx_eval_nl_005foption_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
                  out = _jspx_page_context.popBody();
                  _jspx_push_body_count_nl_005foption_005f0[0]--;
                }
              }
              if (_jspx_th_nl_005foption_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
                return;
              }
            } catch (java.lang.Throwable _jspx_exception) {
              while (_jspx_push_body_count_nl_005foption_005f0[0]-- > 0)
                out = _jspx_page_context.popBody();
              _jspx_th_nl_005foption_005f0.doCatch(_jspx_exception);
            } finally {
              _jspx_th_nl_005foption_005f0.doFinally();
              _005fjspx_005ftagPool_005fnl_005foption_0026_005fvalue.reuse(_jspx_th_nl_005foption_005f0);
            }
            out.write("\r\n");
            out.write("\t\t\t\t\t\t\t\t");
            if (_jspx_meth_nl_005foptions_005f0(_jspx_th_nl_005fselect_005f1, _jspx_page_context, _jspx_push_body_count_nl_005fselect_005f1))
              return;
            out.write("\r\n");
            out.write("\t\t\t\t\t\t\t");
            int evalDoAfterBody = _jspx_th_nl_005fselect_005f1.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_nl_005fselect_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_nl_005fselect_005f1[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_nl_005fselect_005f1.doCatch(_jspx_exception);
      } finally {
        _jspx_th_nl_005fselect_005f1.doFinally();
        _005fjspx_005ftagPool_005fnl_005fselect_0026_005fv_002dmodel.reuse(_jspx_th_nl_005fselect_005f1);
      }
      out.write("\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t<td v-else><span>{{issueView.issueLcateCd | code(lCateNm)}}</span></td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<th>측정모델</th>\r\n");
      out.write("\t\t\t\t\t\t<td v-if=\"(issueView.progressStat == 'B201' || issueView.progressStat == 'B202' || issueView.progressStat == 'B204' || issueView.progressStat == 'B205' || issueView.progressStat == 'B206') && projectView.projectStat!='C304'\">\r\n");
      out.write("\t\t\t\t\t\t\t<project-model-select ref=\"modelSelect\" :change-fn=\"addModelList\" :pid=\"pid\"></project-model-select>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"msm_list\" v-if=\"modelList.length > 0\" >\r\n");
      out.write("\t\t\t\t\t\t\t\t<ul>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<li v-for=\"(list, index) in modelList\" >\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<span>{{list.modelNm}}({{list.modelVer}})</span>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<button class=\"del\" @click=\"delModelList(index)\"></button>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t</li>\r\n");
      out.write("\t\t\t\t\t\t\t\t</ul>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t<td v-else>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"reg_list\" v-if=\"modelList.length > 0\" >\r\n");
      out.write("\t\t\t\t\t\t\t\t<ul>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<li v-for=\"(list, index) in modelList\" class=\"gr\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<span>{{list.modelNm}}({{list.modelVer}})</span>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t</li>\r\n");
      out.write("\t\t\t\t\t\t\t\t</ul>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<th>이슈내용</th>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"issue_cont_txt\" v-if=\"(issueView.progressStat == 'B201' || issueView.progressStat == 'B202' || issueView.progressStat == 'B204' || issueView.progressStat == 'B205' || issueView.progressStat == 'B206') && projectView.projectStat!='C304'\">\r\n");
      out.write("\t\t\t\t\t\t\t<textarea class=\"full\" v-model=\"issueView.issueCont\"></textarea>\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"issue_cont_txt\" v-else>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"txt\" v-html=\"issueView.issueCont\"></div>\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<th>파일 첨부</th>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"file\" v-if=\"(issueView.progressStat == 'B201' || issueView.progressStat == 'B202' || issueView.progressStat == 'B204' || issueView.progressStat == 'B205' || issueView.progressStat == 'B206') && projectView.projectStat!='C304'\">\r\n");
      out.write("\t\t\t\t\t\t\t<p class=\"note\">최대 10MB까지 첨부 가능합니다</p> <input type=\"file\"\r\n");
      out.write("\t\t\t\t\t\t\tclass=\"ir\" id=\"file\" name=\"file\" @change=\"regFile\"><label\r\n");
      out.write("\t\t\t\t\t\t\tfor=\"file\" class=\"sch_file\">파일찾기</label>\r\n");
      out.write("\t\t\t\t\t\t\t<ul class=\"file_list\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<li class=\"full\" v-for=\"(fl, index) in issueView.fileList\"><a\r\n");
      out.write("\t\t\t\t\t\t\t\t\t@click=\"getFileDown(fl)\">{{fl.orgFileNm}}</a>\r\n");
      out.write("\t\t\t\t\t\t\t\t<button class=\"del\" @click=\"delFile(index)\"></button></li>\r\n");
      out.write("\t\t\t\t\t\t\t</ul>\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"file\" v-else>\r\n");
      out.write("\t\t\t\t\t\t\t<ul class=\"file_list\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<li class=\"full\" v-for=\"(fl, index) in issueView.fileList\"><a\r\n");
      out.write("\t\t\t\t\t\t\t\t\t@click=\"getFileDown(fl)\">{{fl.orgFileNm}}</a></li>\r\n");
      out.write("\t\t\t\t\t\t\t</ul>\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<th>이슈할당 대상</th>\r\n");
      out.write("\t\t\t\t\t\t<td v-if=\"(issueView.progressStat == 'B201' || issueView.progressStat == 'B202' || issueView.progressStat == 'B204' || issueView.progressStat == 'B205' || issueView.progressStat == 'B206') && projectView.projectStat!='C304'\" class=\"sel_target02\">\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"sel_sort\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<user-select ref=\"userSelect\" :add-fn=\"addPartiList\"></user-select>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"reg_list\" v-show=\"issueView.partiList.length>0\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<ul>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<li v-for=\"(p, index) in issueView.partiList\"><span>{{p.userNm}}({{p.userGroupNm}})</span>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<button class=\"del\" @click=\"delPartiList(index)\"></button></li>\r\n");
      out.write("\t\t\t\t\t\t\t\t</ul>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t<td\tv-else>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"reg_list\" v-show=\"issueView.partiList.length>0\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<ul>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<li v-for=\"(p, index) in issueView.partiList\" class=\"gr\"><span>{{p.userNm}}({{p.userGroupNm}})</span></li>\r\n");
      out.write("\t\t\t\t\t\t\t\t</ul>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t</tbody>\r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"tit_wrap mgtop40\">\r\n");
      out.write("\t\t\t<p class=\"cate_tit\">선택된 Test Case</p>\r\n");
      out.write("\t\t\t<div class=\"btn_wrap\">\r\n");
      out.write("\t\t\t\t<button class=\"g_btn01\" @click=\"delIssueTc\">삭제</button>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"g_table\">\r\n");
      out.write("\t\t\t<table>\r\n");
      out.write("\t\t\t\t<colgroup>\r\n");
      out.write("\t\t\t\t\t<col style=\"width: 3%;\">\r\n");
      out.write("\t\t\t\t\t<col style=\"width: 10%;\">\r\n");
      out.write("\t\t\t\t\t<col style=\"width: 10%;\">\r\n");
      out.write("\t\t\t\t\t<col style=\"width: 10%;\">\r\n");
      out.write("\t\t\t\t\t<col style=\"width: 12%;\">\r\n");
      out.write("\t\t\t\t\t<col style=\"width: 10%;\">\r\n");
      out.write("\t\t\t\t\t<col>\r\n");
      out.write("\t\t\t\t</colgroup>\r\n");
      out.write("\t\t\t\t<thead>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<th><input type=\"checkbox\" v-model=\"selectAll\"></th>\r\n");
      out.write("\t\t\t\t\t\t<th>구분</th>\r\n");
      out.write("\t\t\t\t\t\t<th>대분류</th>\r\n");
      out.write("\t\t\t\t\t\t<th>중분류</th>\r\n");
      out.write("\t\t\t\t\t\t<th>소분류</th>\r\n");
      out.write("\t\t\t\t\t\t<th>중요도</th>\r\n");
      out.write("\t\t\t\t\t\t<th>Test Case</th>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t</thead>\r\n");
      out.write("\t\t\t\t<tbody>\r\n");
      out.write("\t\t\t\t\t<tr v-for=\"list in issueView.tcList\">\r\n");
      out.write("\t\t\t\t\t\t<td @click=\"chk(list.seq)\"><input type=\"checkbox\" :value=\"list.seq\" v-model=\"chkArray\"  @click.stop></td>\r\n");
      out.write("\t\t\t\t\t\t<td>{{ list.tcDivision | code(tcDivisionCodeNm) }}</td>\r\n");
      out.write("\t\t\t\t\t\t<td>{{ list.bigCateId | tcCategory(tcCategoryList) }}</td>\r\n");
      out.write("\t\t\t\t\t\t<td>{{ list.middleCateId | tcCategory(tcCategoryList) }}</td>\r\n");
      out.write("\t\t\t\t\t\t<td>{{ list.smallCateId | tcCategory(tcCategoryList) }}</td>\r\n");
      out.write("\t\t\t\t\t\t<td>{{ list.importance | code(importanceCode) }}</td>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"l_align\"><span v-html=\"list.tc\"></span></td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr v-if=\"issueView.tcList.length == 0\">\r\n");
      out.write("\t\t\t\t\t\t<td colspan=\"7\">선택된 Test Case가 없습니다.</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t</tbody>\r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<p class=\"cate_tit\">코멘트</p>\r\n");
      out.write("\t\t<div class=\"search_area with_select\" v-if=\"projectView.projectStat!='C304'\" >\r\n");
      out.write("\t\t\t<select v-if=\"buttonFlag==false\" v-model=\"issueView.chkProgressStat\">\r\n");
      out.write("\t\t\t\t<option value=\"\">- 선택 -</option>\r\n");
      out.write("\t\t\t\t<option v-for=\"list in getProgressStatMenuList\" :value=\"list.codeId\">{{list.codeId | code(testProgressStatNm)}}</option>\r\n");
      out.write("\t\t\t</select> \r\n");
      out.write("\t\t\t<span v-else >{{issueView.progressStat | code(testProgressStatNm)}}</span>\r\n");
      out.write("\t\t\t<textarea class=\"issue_comment\" v-model.trim=\"comment\"></textarea>\r\n");
      out.write("\t\t\t<button v-if=\"buttonFlag==false\" class=\"g_btn01\" @click=\"regComment(issueView.chkProgressStat)\">등록</button>\r\n");
      out.write("\t\t\t<button v-else class=\"g_btn01\" @click=\"modComment\">수정</button>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"g_table\">\r\n");
      out.write("\t\t\t<table>\r\n");
      out.write("\t\t\t\t<colgroup>\r\n");
      out.write("\t\t\t\t\t<col style=\"width: 15%;\">\r\n");
      out.write("\t\t\t\t\t<col>\r\n");
      out.write("\t\t\t\t\t<col style=\"width: 20%;\">\r\n");
      out.write("\t\t\t\t\t<col style=\"width: 10%;\">\r\n");
      out.write("\t\t\t\t</colgroup>\r\n");
      out.write("\t\t\t\t<thead>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<th>등록일시</th>\r\n");
      out.write("\t\t\t\t\t\t<th>코멘트</th>\r\n");
      out.write("\t\t\t\t\t\t<th>작성자</th>\r\n");
      out.write("\t\t\t\t\t\t<th>관리</th>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t</thead>\r\n");
      out.write("\t\t\t\t<tbody>\r\n");
      out.write("\t\t\t\t\t<tr v-for=\"list in pagingCommentList\">\r\n");
      out.write("\t\t\t\t\t\t<td>{{ list.regDtm | dateTimeFormat }}</td>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"l_align\"><span v-html=\"list.comment\"></span></td>\r\n");
      out.write("\t\t\t\t\t\t<td>{{ list.regNm }}({{ list.regGroupNm }})</td>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"tb_fixed_btns\">\r\n");
      out.write("\t\t\t\t\t\t\t<button class=\"tb_btn04\" v-if=\"list.regId == userId\" @click=\"commentEdit(list.comment, list.seq)\">수정</button>\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr v-if=\"pagingCommentList.length==0\">\r\n");
      out.write("\t\t\t\t\t\t<td colspan=\"4\">등록된 코멘트가 없습니다.</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t</tbody>\r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("\t\t\t<paginator ref=\"paginatorComment\" :go-fn=\"getPagingCommentList\"\r\n");
      out.write("\t\t\t\tinit-rows=\"5\"></paginator>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"btn_wrap\">\r\n");
      out.write("\t\t<button class=\"g_btn01\" @click=\"modIssue\"\r\n");
      out.write("\t\t\tv-if=\"issueView.progressStat != 'B203' && projectView.projectStat=='C301'\">저장</button>\r\n");
      out.write("\t\t<button class=\"g_btn02\" onclick=\"parent.list.goCurrentPageList(); hidePopupLayer(); return false\">닫기</button>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("<script>\r\n");
      out.write("\tvar frm = new Vue({\r\n");
      out.write("\t\tel: '.pop_wrap'\r\n");
      out.write("\t\t, data: {\r\n");
      out.write("\t\t\timportanceCode: '");
      if (_jspx_meth_nl_005fcodeListJson_005f0(_jspx_page_context))
        return;
      out.write("'\r\n");
      out.write("\t\t\t, tcDivisionCodeNm: '");
      if (_jspx_meth_nl_005fcodeListJson_005f1(_jspx_page_context))
        return;
      out.write("'\r\n");
      out.write("\t\t\t, tcCategoryList: getListFromJsonStr('");
      if (_jspx_meth_nl_005ftcCateListJson_005f0(_jspx_page_context))
        return;
      out.write("')\r\n");
      out.write("\t\t\t, issueView: {\r\n");
      out.write("\t\t\t\tpartiList: []\r\n");
      out.write("\t\t\t\t, tcList: []\r\n");
      out.write("\t\t\t\t,chkProgressStat:''\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, comment: ''\r\n");
      out.write("\t\t\t, seq: ''\r\n");
      out.write("\t\t\t, procChk: false\r\n");
      out.write("\t\t\t, issueId: '");
      if (_jspx_meth_c_005fout_005f0(_jspx_page_context))
        return;
      out.write("'\r\n");
      out.write("\t\t\t, pid: '");
      if (_jspx_meth_c_005fout_005f1(_jspx_page_context))
        return;
      out.write("'\r\n");
      out.write("\t\t\t, fileSaveList: []\r\n");
      out.write("\t\t\t, partiSaveList: []\r\n");
      out.write("\t\t\t, pagingCommentList: []\r\n");
      out.write("\t\t\t, tcCateNm: ''\r\n");
      out.write("\t\t\t, cateList: []\r\n");
      out.write("\t\t\t, modelList: []\r\n");
      out.write("\t\t\t, projectView: {}\r\n");
      out.write("\t\t\t, userId: '");
      if (_jspx_meth_c_005fout_005f2(_jspx_page_context))
        return;
      out.write("'\r\n");
      out.write("\t\t\t, buttonFlag: false\r\n");
      out.write("\t\t\t, setPopupChk: false\r\n");
      out.write("\t\t\t, lCateNm: '");
      if (_jspx_meth_nl_005fcodeListJson_005f2(_jspx_page_context))
        return;
      out.write("'\r\n");
      out.write("\t\t\t, testProgressStatNm: '");
      if (_jspx_meth_nl_005fcodeListJson_005f3(_jspx_page_context))
        return;
      out.write("'\r\n");
      out.write("\t\t\t, testProgressStatNmList: []\r\n");
      out.write("\t\t\t, testProgressStatFilter:['B202', 'B204', 'B205', 'B206']\r\n");
      out.write("\t\t\t, chkArray: []\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, updated: function() {\r\n");
      out.write("\t\t\tif(this.setPopupChk == false){\r\n");
      out.write("\t\t\t\tsetIssuePopup(2);\r\n");
      out.write("\t\t\t\tthis.setPopupChk = true;\r\n");
      out.write("\t\t\t}else {\r\n");
      out.write("\t\t\t\tsetPopup(2);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, beforeMount: function () {\r\n");
      out.write("\t\t\tthis.testProgressStatNmList = JSON.parse(decodeURIComponent(this.testProgressStatNm));\r\n");
      out.write("\t\t\tthis.getIssueView();\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, mounted: function() {\r\n");
      out.write("\t\t\tsetIssuePopup(2);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, computed: {\r\n");
      out.write("\t\t\tgetProgressStatMenuList: function() {\r\n");
      out.write("\t\t\t\tvar testProgressStatFilter = this.testProgressStatFilter;\r\n");
      out.write("\t\t\t\treturn this.testProgressStatNmList.filter(function(testProgressStatMenu) {\r\n");
      out.write("\t\t\t\t\treturn testProgressStatFilter.some(function(m) {\r\n");
      out.write("\t\t\t\t\t\treturn testProgressStatMenu.codeId === m;\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t}).sort(function(a,b) {\r\n");
      out.write("\t\t\t\t\treturn a.menuOrder - b.menuOrder;\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, selectAll:{\r\n");
      out.write("\t\t\t\tget: function(){\r\n");
      out.write("\t\t\t\t\tvar total = this.issueView.tcList.length;\r\n");
      out.write("\t\t\t\t\tvar cnt = 0;\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tfor(var i=0; i < total; i++){\r\n");
      out.write("\t\t\t\t\t\tfor(var j=0; j< this.chkArray.length; j++){\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\tif(this.issueView.tcList[i].seq == this.chkArray[j]){\r\n");
      out.write("\t\t\t\t\t\t\t\tcnt++;\r\n");
      out.write("\t\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\treturn total == cnt && cnt > 0;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t, set: function(value){\r\n");
      out.write("\t\t\t\t\tvar chkArray = [];\r\n");
      out.write("\t\t\t\t\tif(value){\r\n");
      out.write("\t\t\t\t\t\tthis.issueView.tcList.forEach(function(tc){\r\n");
      out.write("\t\t\t\t\t\t\tchkArray.push(tc.seq);\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tthis.chkArray = chkArray;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, methods: {\r\n");
      out.write("\t\t\tgetIssueView: function() {\r\n");
      out.write("\t\t\t\t$.post('/bmt/issue/getIssueView?issueId='+this.issueId, function(data){\r\n");
      out.write("\t\t\t\t\tfrm.issueView = data.issueView;\r\n");
      out.write("\t\t\t\t\tif(isEmpty(frm.issueView.issueLcateCd)){\r\n");
      out.write("\t\t\t\t\t\tfrm.issueView.issueLcateCd = \"\";\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif(frm.issueView.progressStat == 'B201' || frm.issueView.progressStat == 'B203'){\r\n");
      out.write("\t\t\t\t\t\tfrm.issueView.chkProgressStat = \"\";\r\n");
      out.write("\t\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t\tfrm.issueView.chkProgressStat = frm.issueView.progressStat;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tfrm.issueView.tcList.forEach(function(o, i){\r\n");
      out.write("\t\t\t\t\t\tfrm.issueView.tcList[i].tc = o.tc.replace(/(?:\\n)/g, '<br>');\t\r\n");
      out.write("\t\t\t\t\t\tfrm.issueView.tcList[i].tc.split('\\n').join('<br>');\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tfrm.projectView = data.projectView;\r\n");
      out.write("\t\t\t\t\tfrm.partiSaveList = data.issueView.partiList.slice();\r\n");
      out.write("\t\t\t\t\tfrm.modelList = data.issueView.modelList;\r\n");
      out.write("\t\t\t\t\tfrm.getPagingCommentList();\r\n");
      out.write("\t\t\t\t\tfrm.goPageComment(1);\r\n");
      out.write("\t\t\t\t\t// 줄바꿈\r\n");
      out.write("\t\t\t\t\tif (frm.issueView.progressStat == 'B203' && frm.projectView.projectStat != 'C304') {\r\n");
      out.write("\t\t\t\t\t\tfrm.issueView.issueCont = data.issueView.issueCont.replace(/(?:\\n)/g, '<br>');\r\n");
      out.write("\t\t\t\t\t\tfrm.issueView.issueCont.split('\\n').join('<br>');\r\n");
      out.write("\t\t\t\t\t} else if(frm.projectView.projectStat == 'C304'){\r\n");
      out.write("\t\t\t\t\t\tfrm.issueView.issueCont = data.issueView.issueCont.replace(/(?:\\n)/g, '<br>');\r\n");
      out.write("\t\t\t\t\t\tfrm.issueView.issueCont.split('\\n').join('<br>');\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, chk: function(seq) {\r\n");
      out.write("\t\t\t\tvar _chkArray = this.chkArray;\r\n");
      out.write("\t\t\t\tif (_chkArray.indexOf(seq) == -1) { // 배열에 존재 하지 않으면\r\n");
      out.write("\t\t\t\t\t_chkArray.push(seq);\r\n");
      out.write("\t\t\t\t} else if (_chkArray.indexOf(seq) != -1) { // 배열에 존재 하면\r\n");
      out.write("\t\t\t\t\t_chkArray.splice(_chkArray.indexOf(seq), 1);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, delIssueTc: function(){\r\n");
      out.write("\t\t\t\tvar paramStr = '';\r\n");
      out.write("\t\t\t\tif(frm.chkArray.length < 1){\r\n");
      out.write("\t\t\t\t\talert(\"Test Case 삭제를 위해 선택된 Test Case가 없습니다. \");\r\n");
      out.write("\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tfor(var i=0; i<frm.chkArray.length; i++){\r\n");
      out.write("\t\t\t\t\tparamStr += frm.chkArray[i] + \";\";\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tvar cmsg = \"삭제하시겠습니까?\";\r\n");
      out.write("\t\t\t\tif(confirm(cmsg)){\r\n");
      out.write("\t\t\t\t\t$.post(\"/bmt/issue/delIssueTcPrc\",{param: paramStr, issueId: frm.issueId}, function(data){\r\n");
      out.write("\t\t\t\t\t\tif(data.del){\r\n");
      out.write("\t\t\t\t\t\t\tfrm.issueView.tcList = data.tcList;\t\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}); \r\n");
      out.write("\t\t\t\t} \r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, addModelList: function(data){\r\n");
      out.write("\t\t\t\tvar chk = true;\r\n");
      out.write("\t\t\t\tvar modelList = this.modelList;\r\n");
      out.write("\t\t\t\tfor (var i=0; i < modelList.length; i++){\r\n");
      out.write("\t\t\t\t\tif (modelList[i].modelId === data.modelId && modelList[i].modelVer === data.modelVer){\r\n");
      out.write("\t\t\t\t\t\tchk = false;\r\n");
      out.write("\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tif (chk) {\r\n");
      out.write("\t\t\t\t\tthis.modelList.push(data);\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\talert(\"이미 추가된 측정모델입니다.\");\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, delModelList: function(index){\r\n");
      out.write("\t\t\t\tthis.modelList.splice(index,1);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, commentEdit: function(comment, commentSeq){\r\n");
      out.write("\t\t\t\tif(this.buttonFlag == false){\r\n");
      out.write("\t\t\t\t\tthis.buttonFlag = true;\r\n");
      out.write("\t\t\t\t\tfrm.comment = comment.replace(/(<br>|<br\\/>|<br \\/>)/g, '\\r\\n');\r\n");
      out.write("\t\t\t\t\tfrm.seq = commentSeq;\r\n");
      out.write("\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\tthis.buttonFlag = false;\r\n");
      out.write("\t\t\t\t\tfrm.comment = '';\r\n");
      out.write("\t\t\t\t\tfrm.seq = '';\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, addPartiList: function(data) {\r\n");
      out.write("\t\t\t\tvar chk = this.issueView.partiList.some(function(p) {\r\n");
      out.write("\t\t\t\t\treturn p.partiId == data.userId;\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif (!chk) {\r\n");
      out.write("\t\t\t\t\tdata.partiId = data.userId;\r\n");
      out.write("\t\t\t\t\tthis.issueView.partiList.push(data);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\telse {\r\n");
      out.write("\t\t\t\t\talert(\"이미 추가된 참여인력입니다.\");\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, delPartiList: function(index) {\r\n");
      out.write("\t\t\t\tthis.issueView.partiList.splice(index, 1);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, regFile: function() {\r\n");
      out.write("\t\t\t\tfileUpload($(\"#file\"), {saveFilePath: \"bmt/issue\"}, function(data) {\r\n");
      out.write("\t\t\t\t\tvar file = {\r\n");
      out.write("\t\t\t\t\t\tfileNm: data.saveFileNm\r\n");
      out.write("\t\t\t\t\t\t, orgFileNm: data.realFileNm\r\n");
      out.write("\t\t\t\t\t\t, filePath: data.saveFilePath\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tfrm.issueView.fileList.push(file);\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, delFile: function(index) {\r\n");
      out.write("\t\t\t\tthis.issueView.fileList.splice(index, 1);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, modIssue: function(){\r\n");
      out.write("\t\t\t\tif (this.issueView.progressStat == 'B203') return;\r\n");
      out.write("\t\t\t\tvar param = {\r\n");
      out.write("\t\t\t\t\tissueId: this.issueView.issueId\r\n");
      out.write("\t\t\t\t\t, issueSubject: this.issueView.issueSubject\r\n");
      out.write("\t\t\t\t\t, importance: this.issueView.importance\r\n");
      out.write("\t\t\t\t\t, issueCont: this.issueView.issueCont\r\n");
      out.write("\t\t\t\t\t, partiList: this.issueView.partiList\r\n");
      out.write("\t\t\t\t\t, fileList: this.issueView.fileList\r\n");
      out.write("\t\t\t\t\t, modelList: this.modelList\r\n");
      out.write("\t\t\t\t\t, issueLcateCd : this.issueView.issueLcateCd\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t//이슈 할당 맴버 체크\r\n");
      out.write("\t\t\t\tparam.addPartiArray = [];\r\n");
      out.write("\t\t\t\tparam.partiList.forEach(function(p) {\r\n");
      out.write("\t\t\t\t\tvar chk = frm.partiSaveList.some(function(ps) {\r\n");
      out.write("\t\t\t\t\t\treturn p.partiId == ps.partiId;\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\tif (!chk) param.addPartiArray.push(p.partiId);\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t//file 체크\t\r\n");
      out.write("\t\t\t\tparam.addFileArray = [];\r\n");
      out.write("\t\t\t\tparam.fileList.forEach(function(fl) {\r\n");
      out.write("\t\t\t\t\tvar fChk = frm.fileSaveList.some(function(fs) {\r\n");
      out.write("\t\t\t\t\t\treturn fl.seq == fs.seq;\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\tif (!fChk) param.addFileArray.push(fl.seq);\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif (param.partiList.length == 0) {\r\n");
      out.write("\t\t\t\t\talert(\"이슈할당 대상을 추가하세요.\");\r\n");
      out.write("\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif(param.issueLcateCd == \"\"){\r\n");
      out.write("\t\t\t\t\talert(\"대분류를 선택하세요.\");\r\n");
      out.write("\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tif (this.procChk) return;\r\n");
      out.write("\t\t\t\tthis.procChk = true;\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\ttype: \"post\"\r\n");
      out.write("\t\t\t\t\t, url : \"/bmt/issue/modIssuePrc\"\r\n");
      out.write("\t\t\t\t\t, contentType: \"application/json\"\r\n");
      out.write("\t\t\t\t\t, data : JSON.stringify(param)\r\n");
      out.write("\t\t\t\t\t, beforeSend: function() { \r\n");
      out.write("\t\t\t\t\t\tfrm.procChk = true;\r\n");
      out.write("\t\t\t\t\t\tparent.startLoading();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t, success: function(data) {\r\n");
      out.write("\t\t\t\t\t\tif (data.save) {\r\n");
      out.write("\t\t\t\t\t\t\talert(\"이슈가 수정 되었습니다.\");\r\n");
      out.write("\t\t\t\t\t\t\tfrm.fileSaveList = param.fileList.slice();\r\n");
      out.write("\t\t\t\t\t\t\tfrm.partiSaveList = param.partiList.slice();\r\n");
      out.write("\t\t\t\t\t\t\tparent.list.goCurrentPageList();\r\n");
      out.write("\t\t\t\t\t\t\thidePopupLayer();\r\n");
      out.write("\t\t\t\t\t\t} else if (data.message) {\r\n");
      out.write("\t\t\t\t\t\t\talert(data.message);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t, error: function(xhr, status, error) {\r\n");
      out.write("\t\t\t\t\t\talert($(xhr.responseText).text());\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t, complete : function() {\r\n");
      out.write("\t\t\t\t\t\tfrm.procChk = false;\r\n");
      out.write("\t\t\t\t\t\tparent.endLoading();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, modComment: function(){\r\n");
      out.write("\t\t\t\tvar param = {\r\n");
      out.write("\t\t\t\t\tissueId: this.issueView.issueId\r\n");
      out.write("\t\t\t\t\t, comment: this.comment\r\n");
      out.write("\t\t\t\t\t, seq: this.seq\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tif (param.issueId == \"\") {\r\n");
      out.write("\t\t\t\t\talert(\"이슈 정보를 찾을 수 없습니다.\");\r\n");
      out.write("\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif (param.comment == \"\") {\r\n");
      out.write("\t\t\t\t\talert(\"코멘트를 입력하세요.\");\r\n");
      out.write("\t\t\t\t\t$(\"#comment\").focus();\r\n");
      out.write("\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif (this.procChk) return;\r\n");
      out.write("\t\t\t\tthis.procChk = true;\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$.post('/bmt/issue/modIssueCommentPrc', param, function(data){\r\n");
      out.write("\t\t\t\t\tif (data.save) {\r\n");
      out.write("\t\t\t\t\t\tfrm.issueView.commentList = data.commentList;\r\n");
      out.write("\t\t\t\t\t\tfrm.getPagingCommentList();\r\n");
      out.write("\t\t\t\t\t} else if (data.message) {\r\n");
      out.write("\t\t\t\t\t\talert(data.message);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tfrm.procChk = false;\r\n");
      out.write("\t\t\t\t\tfrm.comment = \"\";\r\n");
      out.write("\t\t\t\t\tfrm.seq = \"\";\r\n");
      out.write("\t\t\t\t\tfrm.buttonFlag = false;\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, regComment: function(issueStat) {\r\n");
      out.write("\t\t\t\tvar param = {\r\n");
      out.write("\t\t\t\t\tissueId: this.issueView.issueId\r\n");
      out.write("\t\t\t\t\t, comment: this.comment\r\n");
      out.write("\t\t\t\t\t, issueStat: issueStat\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tvar issueId = this.issueView.issueId;\r\n");
      out.write("\t\t\t\tif (param.issueId == \"\") {\r\n");
      out.write("\t\t\t\t\talert(\"이슈 정보를 찾을 수 없습니다.\");\r\n");
      out.write("\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif (param.comment == \"\") {\r\n");
      out.write("\t\t\t\t\talert(\"코멘트를 입력하세요.\");\r\n");
      out.write("\t\t\t\t\t$(\"#comment\").focus();\r\n");
      out.write("\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif(param.issueStat == \"\"){\r\n");
      out.write("\t\t\t\t\talert(\"진행상황을 선택하세요.\")\r\n");
      out.write("\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tvar statNm = this.testProgressStatNmList.filter(function(testProgressStatMenu) {\r\n");
      out.write("\t\t\t\t\treturn testProgressStatMenu.codeId === issueStat;\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif (this.procChk) return;\r\n");
      out.write("\t\t\t\tthis.procChk = true;\r\n");
      out.write("\t\t\t\tif(this.issueView.progressStat == \"B203\"){\r\n");
      out.write("\t\t\t\t\tvar cmsg = \"현재 완료처리된 상태입니다. 코멘트 등록시 \"+statNm[0].codeNm.replace(/\\+/g, \" \")+\"상태로 변경됩니다. 저장하시겠습니까?\";\r\n");
      out.write("\t\t\t\t\tif (confirm(cmsg)){\r\n");
      out.write("\t\t\t\t\t\t$.post('/bmt/issue/regIssueCommentPrc', {issueId:param.issueId, comment:param.comment, issueStat: param.issueStat}, function(data){\r\n");
      out.write("\t\t\t\t\t\t\tif (data.save) {\r\n");
      out.write("\t\t\t\t\t\t\t\tfrm.issueView.commentList = data.commentList;\r\n");
      out.write("\t\t\t\t\t\t\t\tfrm.getPagingCommentList();\r\n");
      out.write("\t\t\t\t\t\t\t\tfrm.goPageComment(1);\r\n");
      out.write("\t\t\t\t\t\t\t} else if (data.message) {\r\n");
      out.write("\t\t\t\t\t\t\t\talert(data.message);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\tfrm.procChk = false;\r\n");
      out.write("\t\t\t\t\t\t\tfrm.comment = \"\";\r\n");
      out.write("\t\t\t\t\t\t\tfrm.getIssueView();\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t\tfrm.procChk = false;\r\n");
      out.write("\t\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t$.post('/bmt/issue/regIssueCommentPrc', {issueId:param.issueId, comment:param.comment, issueStat: param.issueStat}, function(data){\r\n");
      out.write("\t\t\t\t\t\tif (data.save) {\r\n");
      out.write("\t\t\t\t\t\t\tfrm.issueView.commentList = data.commentList;\r\n");
      out.write("\t\t\t\t\t\t\tfrm.getPagingCommentList();\r\n");
      out.write("\t\t\t\t\t\t\tfrm.goPageComment(1);\r\n");
      out.write("\t\t\t\t\t\t} else if (data.message) {\r\n");
      out.write("\t\t\t\t\t\t\talert(data.message);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\tfrm.procChk = false;\r\n");
      out.write("\t\t\t\t\t\tfrm.comment = \"\";\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, getFileDown: function(f) {\r\n");
      out.write("\t\t\t\tfileDown(f.filePath, f.fileNm, f.orgFileNm);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, getPagingCommentList: function() {\r\n");
      out.write("\t\t\t\tvar tempList = [];\r\n");
      out.write("\t\t\t\ttempList =  this.$refs.paginatorComment.pagingList(this.issueView.commentList);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\ttempList.forEach(function(o,i){\r\n");
      out.write("\t\t\t\t\ttempList[i].comment = o.comment.replace(/(?:\\n)/g, '<br>');\r\n");
      out.write("\t\t\t\t\ttempList[i].comment.split('\\n').join('<br>');\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tthis.pagingCommentList = tempList;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, goPageComment: function(page) {\r\n");
      out.write("\t\t\t\tthis.$refs.paginatorComment.goPage(page);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_nl_005fselect_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  nl:select
    kr.co.nextlab.tag.CustomSelectTag _jspx_th_nl_005fselect_005f0 = (kr.co.nextlab.tag.CustomSelectTag) _005fjspx_005ftagPool_005fnl_005fselect_0026_005fv_002dmodel_005fcodeType_005fnobody.get(kr.co.nextlab.tag.CustomSelectTag.class);
    _jspx_th_nl_005fselect_005f0.setPageContext(_jspx_page_context);
    _jspx_th_nl_005fselect_005f0.setParent(null);
    // /WEB-INF/views/bmt/issue/issueView.jsp(26,231) name = codeType type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_nl_005fselect_005f0.setCodeType("B100");
    // /WEB-INF/views/bmt/issue/issueView.jsp(26,231) null
    _jspx_th_nl_005fselect_005f0.setDynamicAttribute(null, "v-model", "issueView.importance");
    int[] _jspx_push_body_count_nl_005fselect_005f0 = new int[] { 0 };
    try {
      int _jspx_eval_nl_005fselect_005f0 = _jspx_th_nl_005fselect_005f0.doStartTag();
      if (_jspx_th_nl_005fselect_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_nl_005fselect_005f0[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_nl_005fselect_005f0.doCatch(_jspx_exception);
    } finally {
      _jspx_th_nl_005fselect_005f0.doFinally();
      _005fjspx_005ftagPool_005fnl_005fselect_0026_005fv_002dmodel_005fcodeType_005fnobody.reuse(_jspx_th_nl_005fselect_005f0);
    }
    return false;
  }

  private boolean _jspx_meth_nl_005foptions_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_nl_005fselect_005f1, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_nl_005fselect_005f1)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  nl:options
    kr.co.nextlab.tag.CustomOptionsTag _jspx_th_nl_005foptions_005f0 = (kr.co.nextlab.tag.CustomOptionsTag) _005fjspx_005ftagPool_005fnl_005foptions_0026_005fcodeType_005fnobody.get(kr.co.nextlab.tag.CustomOptionsTag.class);
    _jspx_th_nl_005foptions_005f0.setPageContext(_jspx_page_context);
    _jspx_th_nl_005foptions_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_nl_005fselect_005f1);
    // /WEB-INF/views/bmt/issue/issueView.jsp(37,8) name = codeType type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_nl_005foptions_005f0.setCodeType("D500");
    int[] _jspx_push_body_count_nl_005foptions_005f0 = new int[] { 0 };
    try {
      int _jspx_eval_nl_005foptions_005f0 = _jspx_th_nl_005foptions_005f0.doStartTag();
      if (_jspx_th_nl_005foptions_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_nl_005foptions_005f0[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_nl_005foptions_005f0.doCatch(_jspx_exception);
    } finally {
      _jspx_th_nl_005foptions_005f0.doFinally();
      _005fjspx_005ftagPool_005fnl_005foptions_0026_005fcodeType_005fnobody.reuse(_jspx_th_nl_005foptions_005f0);
    }
    return false;
  }

  private boolean _jspx_meth_nl_005fcodeListJson_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  nl:codeListJson
    kr.co.nextlab.tag.CodeListJsonTag _jspx_th_nl_005fcodeListJson_005f0 = (kr.co.nextlab.tag.CodeListJsonTag) _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.get(kr.co.nextlab.tag.CodeListJsonTag.class);
    _jspx_th_nl_005fcodeListJson_005f0.setPageContext(_jspx_page_context);
    _jspx_th_nl_005fcodeListJson_005f0.setParent(null);
    // /WEB-INF/views/bmt/issue/issueView.jsp(216,20) name = codeType type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_nl_005fcodeListJson_005f0.setCodeType("B100");
    int _jspx_eval_nl_005fcodeListJson_005f0 = _jspx_th_nl_005fcodeListJson_005f0.doStartTag();
    if (_jspx_th_nl_005fcodeListJson_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.reuse(_jspx_th_nl_005fcodeListJson_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.reuse(_jspx_th_nl_005fcodeListJson_005f0);
    return false;
  }

  private boolean _jspx_meth_nl_005fcodeListJson_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  nl:codeListJson
    kr.co.nextlab.tag.CodeListJsonTag _jspx_th_nl_005fcodeListJson_005f1 = (kr.co.nextlab.tag.CodeListJsonTag) _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.get(kr.co.nextlab.tag.CodeListJsonTag.class);
    _jspx_th_nl_005fcodeListJson_005f1.setPageContext(_jspx_page_context);
    _jspx_th_nl_005fcodeListJson_005f1.setParent(null);
    // /WEB-INF/views/bmt/issue/issueView.jsp(217,24) name = codeType type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_nl_005fcodeListJson_005f1.setCodeType("B900");
    int _jspx_eval_nl_005fcodeListJson_005f1 = _jspx_th_nl_005fcodeListJson_005f1.doStartTag();
    if (_jspx_th_nl_005fcodeListJson_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.reuse(_jspx_th_nl_005fcodeListJson_005f1);
      return true;
    }
    _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.reuse(_jspx_th_nl_005fcodeListJson_005f1);
    return false;
  }

  private boolean _jspx_meth_nl_005ftcCateListJson_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  nl:tcCateListJson
    kr.co.nextlab.tag.TcCateListJsonTag _jspx_th_nl_005ftcCateListJson_005f0 = (kr.co.nextlab.tag.TcCateListJsonTag) _005fjspx_005ftagPool_005fnl_005ftcCateListJson_0026_005fpid_005fnobody.get(kr.co.nextlab.tag.TcCateListJsonTag.class);
    _jspx_th_nl_005ftcCateListJson_005f0.setPageContext(_jspx_page_context);
    _jspx_th_nl_005ftcCateListJson_005f0.setParent(null);
    // /WEB-INF/views/bmt/issue/issueView.jsp(218,41) name = pid type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_nl_005ftcCateListJson_005f0.setPid((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.pid}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
    int _jspx_eval_nl_005ftcCateListJson_005f0 = _jspx_th_nl_005ftcCateListJson_005f0.doStartTag();
    if (_jspx_th_nl_005ftcCateListJson_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fnl_005ftcCateListJson_0026_005fpid_005fnobody.reuse(_jspx_th_nl_005ftcCateListJson_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fnl_005ftcCateListJson_0026_005fpid_005fnobody.reuse(_jspx_th_nl_005ftcCateListJson_005f0);
    return false;
  }

  private boolean _jspx_meth_c_005fout_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f0 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    _jspx_th_c_005fout_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fout_005f0.setParent(null);
    // /WEB-INF/views/bmt/issue/issueView.jsp(227,15) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fout_005f0.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.issueId}", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
    int _jspx_eval_c_005fout_005f0 = _jspx_th_c_005fout_005f0.doStartTag();
    if (_jspx_th_c_005fout_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
    return false;
  }

  private boolean _jspx_meth_c_005fout_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f1 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    _jspx_th_c_005fout_005f1.setPageContext(_jspx_page_context);
    _jspx_th_c_005fout_005f1.setParent(null);
    // /WEB-INF/views/bmt/issue/issueView.jsp(228,11) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fout_005f1.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${issueView.pid}", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
    int _jspx_eval_c_005fout_005f1 = _jspx_th_c_005fout_005f1.doStartTag();
    if (_jspx_th_c_005fout_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f1);
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f1);
    return false;
  }

  private boolean _jspx_meth_c_005fout_005f2(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f2 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    _jspx_th_c_005fout_005f2.setPageContext(_jspx_page_context);
    _jspx_th_c_005fout_005f2.setParent(null);
    // /WEB-INF/views/bmt/issue/issueView.jsp(236,14) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fout_005f2.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userSession.userId}", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
    int _jspx_eval_c_005fout_005f2 = _jspx_th_c_005fout_005f2.doStartTag();
    if (_jspx_th_c_005fout_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f2);
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f2);
    return false;
  }

  private boolean _jspx_meth_nl_005fcodeListJson_005f2(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  nl:codeListJson
    kr.co.nextlab.tag.CodeListJsonTag _jspx_th_nl_005fcodeListJson_005f2 = (kr.co.nextlab.tag.CodeListJsonTag) _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.get(kr.co.nextlab.tag.CodeListJsonTag.class);
    _jspx_th_nl_005fcodeListJson_005f2.setPageContext(_jspx_page_context);
    _jspx_th_nl_005fcodeListJson_005f2.setParent(null);
    // /WEB-INF/views/bmt/issue/issueView.jsp(239,15) name = codeType type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_nl_005fcodeListJson_005f2.setCodeType("D500");
    int _jspx_eval_nl_005fcodeListJson_005f2 = _jspx_th_nl_005fcodeListJson_005f2.doStartTag();
    if (_jspx_th_nl_005fcodeListJson_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.reuse(_jspx_th_nl_005fcodeListJson_005f2);
      return true;
    }
    _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.reuse(_jspx_th_nl_005fcodeListJson_005f2);
    return false;
  }

  private boolean _jspx_meth_nl_005fcodeListJson_005f3(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  nl:codeListJson
    kr.co.nextlab.tag.CodeListJsonTag _jspx_th_nl_005fcodeListJson_005f3 = (kr.co.nextlab.tag.CodeListJsonTag) _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.get(kr.co.nextlab.tag.CodeListJsonTag.class);
    _jspx_th_nl_005fcodeListJson_005f3.setPageContext(_jspx_page_context);
    _jspx_th_nl_005fcodeListJson_005f3.setParent(null);
    // /WEB-INF/views/bmt/issue/issueView.jsp(240,26) name = codeType type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_nl_005fcodeListJson_005f3.setCodeType("B200");
    int _jspx_eval_nl_005fcodeListJson_005f3 = _jspx_th_nl_005fcodeListJson_005f3.doStartTag();
    if (_jspx_th_nl_005fcodeListJson_005f3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.reuse(_jspx_th_nl_005fcodeListJson_005f3);
      return true;
    }
    _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.reuse(_jspx_th_nl_005fcodeListJson_005f3);
    return false;
  }
}
