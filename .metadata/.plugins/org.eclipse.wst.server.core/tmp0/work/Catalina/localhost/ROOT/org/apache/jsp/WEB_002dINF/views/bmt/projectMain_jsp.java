/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.30
 * Generated at: 2018-12-04 07:54:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.bmt;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class projectMain_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/WEB-INF/nextlab.tld", Long.valueOf(1524211545637L));
    _jspx_dependants.put("jar:file:/D:/cvcbank/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/mngbot/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1524211722455L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fnl_005fgubunListJson_0026_005fgubunKey_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fnl_005fgubunListJson_0026_005fgubunKey_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.release();
    _005fjspx_005ftagPool_005fnl_005fgubunListJson_0026_005fgubunKey_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<link href=\"/css/kendo.common-material.min.css\" rel=\"stylesheet\">\r\n");
      out.write("<link href=\"/css/kendo.material.min.css\" rel=\"stylesheet\">\r\n");
      out.write("<script type=\"text/javascript\" src=\"/js/kendo.all.min.js\"></script>\r\n");
      out.write("<div class=\"content\">\r\n");
      out.write("\t<div class=\"sub_layout has_snb\">\r\n");
      out.write("\t\t<div class=\"cont_wrap\">\r\n");
      out.write("\t\t\t<p class=\"cate_tit\"></p>\r\n");
      out.write("\t\t\t<div class=\"g_table04\">\r\n");
      out.write("\t\t\t\t<table>\r\n");
      out.write("\t\t\t\t\t<caption>기간, 현재상태, 참여인력 등을 확인할 수 있는 표 입니다.</caption>\r\n");
      out.write("\t\t\t\t\t<colgroup>\r\n");
      out.write("\t\t\t\t\t\t<col style=\"width:170px;\">\r\n");
      out.write("\t\t\t\t\t\t<col>\r\n");
      out.write("\t\t\t\t\t</colgroup>\r\n");
      out.write("\t\t\t\t\t<tbody>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<th>프로젝트명</th>\r\n");
      out.write("\t\t\t\t\t\t\t<td>{{ projectView.projectNm }}</td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<th>기간</th>\r\n");
      out.write("\t\t\t\t\t\t\t<td>{{ projectView.projectStDt }} ~ {{ projectView.projectEndDt }}</td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<th>요청서</th>\r\n");
      out.write("\t\t\t\t\t\t\t<td v-if=\"reqId\">({{reqId}}) {{reqSubject}}</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td v-else></td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<th>등급</th>\r\n");
      out.write("\t\t\t\t\t\t\t<td>{{ projectView.projectGrade | code(projectGradeNm) }}</td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<th>테이블정보</th>\r\n");
      out.write("\t\t\t\t\t\t\t<td >{{tableList}}</td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<th>차수</th>\r\n");
      out.write("\t\t\t\t\t\t\t<td v-if=\"projectView.chasuWaitYn == 'Y'\">{{ projectView.projectChasu }}차 (대기중)</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td v-else>{{ projectView.projectChasu }}차</td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<th>현재상태</th>\r\n");
      out.write("\t\t\t\t\t\t\t<td>{{ projectView.projectStat | code(projectStatNm) }}</td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<th>검증결과</th>\r\n");
      out.write("\t\t\t\t\t\t\t<td>{{projectView.projectResult | code(codeListD100)}}</td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<th>참여인력</th>\r\n");
      out.write("\t\t\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"g_table inner\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<table>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<thead>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t<th>그룹명</th>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t<th>참여자</th>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t</thead>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<tbody>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<tr v-for=\"(list, index) in projectPartiList\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t<td>{{ list.userGroupNm }}</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t<td>{{ list.userNm }}</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t</tbody>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t</table>\r\n");
      out.write("\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<th>체크리스트</th>\r\n");
      out.write("\t\t\t\t\t\t\t<td><a @click=\"getFileDown(projectView)\" class=\"link\">{{ projectView.orgFileNm }}</a> {{projectView.tcBatchMsg}}</td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<th>개선 및 수정사항</th>\r\n");
      out.write("\t\t\t\t\t\t\t<td><div class=\"txt\" v-html=\"projectView.improveField\"></div></td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<th>비고</th>\r\n");
      out.write("\t\t\t\t\t\t\t<td>{{ projectView.bigo }}</td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t</tbody>\r\n");
      out.write("\t\t\t\t</table>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<p class=\"cate_tit\">측정환경</p>\r\n");
      out.write("\t\t\t<div class=\"g_table04\">\r\n");
      out.write("\t\t\t\t<table>\r\n");
      out.write("\t\t\t\t\t<caption>측정모델, 현재 연결구성 확인 표 입니다.</caption>\r\n");
      out.write("\t\t\t\t\t<colgroup>\r\n");
      out.write("\t\t\t\t\t\t<col style=\"width:170px;\">\r\n");
      out.write("\t\t\t\t\t\t<col>\r\n");
      out.write("\t\t\t\t\t</colgroup>\r\n");
      out.write("\t\t\t\t\t<tbody>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<th>테스트측정모델</th>\r\n");
      out.write("\t\t\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t\t\t\t<button v-for=\"(list, index) in projectBmtModelList\" class=\"tb_btn03_home\" @click=\"goShowPopupLayer('/bmt/project/projectModelHstList?modelSeq='+list.modelSeq); return false;\">{{ list.modelNm }}({{ list.modelVer }})</button>\r\n");
      out.write("\t\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<th>비교측정모델</th>\r\n");
      out.write("\t\t\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t\t\t\t<button v-for=\"(list, index) in projectBmtCompareModelList\" class=\"tb_btn02_home\" @click=\"goShowPopupLayer('/bmt/project/projectModelHstList?modelSeq='+list.modelSeq); return false;\">{{ list.modelNm }}({{ list.modelVer }})</button>\r\n");
      out.write("\t\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<th>현재 연결구성</th>\r\n");
      out.write("\t\t\t\t\t\t\t<td :class=\"{has_btn:projectView.nowJoinCompose}\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<button v-if=\"projectView.nowJoinCompose\" class=\"tb_btn02\" @click=\"goShowPopupLayer('/bmt/project/joinCompHstList?pid='+pid); return false;\">이력 보기</button>\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"frame\" id=\"diagram\"></div>\r\n");
      out.write("\t\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t</tbody>\r\n");
      out.write("\t\t\t\t</table>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"btm_con con_col2\">\r\n");
      out.write("\t\t\t\t<div class=\"l_cont\">\r\n");
      out.write("\t\t\t\t\t<p class=\"cate_tit\">TESTCASE 진행현황</p>\r\n");
      out.write("\t\t\t\t\t<div class=\"prj_sch_chart\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"chartPointer\" id=\"tcChart\"></div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"r_cont\">\r\n");
      out.write("\t\t\t\t\t<p class=\"cate_tit\">이슈 진행현황</p>\r\n");
      out.write("\t\t\t\t\t<div class=\"prj_sch_chart\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"chartPointer\" id=\"issueChart\"></div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"btm_con\">\r\n");
      out.write("\t\t\t\t<div>\r\n");
      out.write("\t\t\t\t\t<p class=\"cate_tit\">카테고리별 이슈 진행현황</p>\r\n");
      out.write("\t\t\t\t\t<div class=\"prj_sch_frame\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"chartPointer\" id=\"issueCateChart\"></div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\tvar cont = new Vue({\r\n");
      out.write("\t\tel: '.content'\r\n");
      out.write("\t\t, data: {\r\n");
      out.write("\t\t\tprojectView: {}\r\n");
      out.write("\t\t\t, projectPartiList: []\r\n");
      out.write("\t\t\t, projectBmtModelList: []\r\n");
      out.write("\t\t\t, projectBmtCompareModelList: []\r\n");
      out.write("\t\t\t, projectTableList: []\r\n");
      out.write("\t\t\t, projectBmtRequestList: []\r\n");
      out.write("\t\t\t, tableList: \"\"\r\n");
      out.write("\t\t\t, projectStatNm: '");
      if (_jspx_meth_nl_005fcodeListJson_005f0(_jspx_page_context))
        return;
      out.write("'\r\n");
      out.write("\t\t\t, projectGradeNm: '");
      if (_jspx_meth_nl_005fcodeListJson_005f1(_jspx_page_context))
        return;
      out.write("'\r\n");
      out.write("\t\t\t, projectTableNm: '");
      if (_jspx_meth_nl_005fcodeListJson_005f2(_jspx_page_context))
        return;
      out.write("'\r\n");
      out.write("\t\t\t, pid: '");
      if (_jspx_meth_c_005fout_005f0(_jspx_page_context))
        return;
      out.write("'\r\n");
      out.write("\t\t\t, passYnGubun: '");
      if (_jspx_meth_nl_005fgubunListJson_005f0(_jspx_page_context))
        return;
      out.write("'\r\n");
      out.write("\t\t\t, bmtTcChartList: []\r\n");
      out.write("\t\t\t, issueCntList: []\r\n");
      out.write("\t\t\t, shapesDataSource: {\r\n");
      out.write("\t\t\t\tbatch : false,\r\n");
      out.write("\t\t\t\tdata : [],\r\n");
      out.write("\t\t\t\tschema : { model : { children : \"items\" } }\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, nowDate : '");
      if (_jspx_meth_c_005fout_005f1(_jspx_page_context))
        return;
      out.write("'\r\n");
      out.write("\t\t\t, codeListD100: '");
      if (_jspx_meth_nl_005fcodeListJson_005f3(_jspx_page_context))
        return;
      out.write("'\r\n");
      out.write("\t\t\t, reqId: ''\r\n");
      out.write("\t\t\t, reqSubject: ''\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, mounted: function() {\r\n");
      out.write("\t\t\tthis.$nextTick(function() {\r\n");
      out.write("\t\t\t\tthis.getProjectView();\r\n");
      out.write("\t\t\t\tthis.getBmtTcChart();\r\n");
      out.write("\t\t\t\tthis.getIssueChart();\r\n");
      out.write("\t\t\t\tthis.getIssueCateChart();\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t, methods: {\r\n");
      out.write("\t\t\tgetProjectView: function() {\r\n");
      out.write("\t\t\t\t$.get(\"/bmt/project/getProjectEditInfoView?pid=\"+cont.pid, function(data){\r\n");
      out.write("\t\t\t\t\tcont.projectView = data.projectView;\r\n");
      out.write("\t\t\t\t\tif(cont.projectView.improveField != null){\r\n");
      out.write("\t\t\t\t\t\tcont.projectView.improveField = cont.projectView.improveField.replace(/(?:\\n)/g, '<br>');\r\n");
      out.write("\t\t\t\t\t\tcont.projectView.improveField.split('\\n').join('<br>');\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tcont.projectPartiList = data.projectPartiList;\r\n");
      out.write("\t\t\t\t\tcont.projectTableList = data.projectTableList;\r\n");
      out.write("\t\t\t\t\tcont.projectBmtModelList = data.projectBmtModelList;\r\n");
      out.write("\t\t\t\t\tcont.projectBmtCompareModelList = data.projectBmtCompareModelList;\r\n");
      out.write("\t\t\t\t\tcont.projectBmtRequestList = data.projectBmtRequestList;\r\n");
      out.write("\t\t\t\t\tcont.setJoinComposeDiagram();\r\n");
      out.write("\t\t\t\t\tcont.getTableList();\r\n");
      out.write("\t\t\t\t\tcont.getBmtRequestList();\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, getBmtRequestList: function(){\r\n");
      out.write("\t\t\t\tfor(var i=0; i< cont.projectBmtRequestList.length; i++){\r\n");
      out.write("\t\t\t\t\tthis.reqId = cont.projectBmtRequestList[i].reqId;\r\n");
      out.write("\t\t\t\t\tthis.reqSubject = cont.projectBmtRequestList[i].reqSubject; \r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t,getTableList: function(){\r\n");
      out.write("\t\t\t\tvar str = ''\r\n");
      out.write("\t\t\t\tfor(var i=0; i < cont.projectTableList.length; i++){\r\n");
      out.write("\t\t\t\t\tstr += cont.projectTableList[i].partTableNm + ', '\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tcont.tableList = str.substring(0, str.length-2)\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, getFileDown: function(f) {\r\n");
      out.write("\t\t\t\tfileDown(f.filePath, f.fileNm, f.orgFileNm);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, getIssueCateChart: function() {\r\n");
      out.write("\t\t\t\tvar obj = {\r\n");
      out.write("\t\t\t\t\t\tdata: []\r\n");
      out.write("\t\t\t\t\t\t, categories: []\r\n");
      out.write("\t\t\t\t\t\t, bigCateId: []\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$.post(\"/bmt/project/getIssueCateDataList\", this.$data, function(data){\r\n");
      out.write("\t\t\t\t\tif (!isEmpty(data.issueCateCntList)) {\r\n");
      out.write("\t\t\t\t\t\tdata.issueCateCntList.forEach(function(e){\r\n");
      out.write("\t\t\t\t\t\t\tobj.data.push(e.cdCount);\r\n");
      out.write("\t\t\t\t\t\t\tobj.categories.push(e.codeNm);\r\n");
      out.write("\t\t\t\t\t\t\tobj.bigCateId.push(e.issueLcateCd);\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tcont.getIssueCateChartView(obj);\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, getBmtTcChart: function() {\r\n");
      out.write("\t\t\t\t$.post(\"/bmt/project/getBmtTcChartList\", this.$data, function(data){\r\n");
      out.write("\t\t\t\t\tif (!isEmpty(data.bmtTcChartList)) {\r\n");
      out.write("\t\t\t\t\t\tcont.bmtTcChartList = data.bmtTcChartList;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\telse {\r\n");
      out.write("\t\t\t\t\t\tcont.bmtTcChartList = data.bmtTcChartList;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tcont.getBmtTcChartView();\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, getIssueChart: function() {\r\n");
      out.write("\t\t\t\t$.post(\"/bmt/project/getIssueDataList\", this.$data, function(data){\r\n");
      out.write("\t\t\t\t\tif (!isEmpty(data.issueCntList)) {\r\n");
      out.write("\t\t\t\t\t\tcont.updateIssue = true;\r\n");
      out.write("\t\t\t\t\t\tcont.issueCntList = data.issueCntList;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\telse {\r\n");
      out.write("\t\t\t\t\t\tcont.issueCntList = data.issueCntList;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tcont.getIssueChartView();\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("\t\t\t}\t\t\t\r\n");
      out.write("\t\t\t, getBmtTcChartView: function(){\r\n");
      out.write("\t\t\t\tvar _visible = false;\r\n");
      out.write("\t\t\t\tvar series, categories= [];\r\n");
      out.write("\t\t\t\tvar chartId;\r\n");
      out.write("\t\t\t\tvar tcData = [];\r\n");
      out.write("\t\t\t\tvar data = [];\r\n");
      out.write("\t\t\t\t\r\n");
      out.write(" \t\t\t\tfor (var i=0; i < cont.bmtTcChartList.length; i++){\r\n");
      out.write("\t\t\t\t\tvar object = new Object();\r\n");
      out.write("\t\t\t\t\tobject.xqms = cont.bmtTcChartList[i].autoCnt;\r\n");
      out.write("\t\t\t\t\tobject.manual = cont.bmtTcChartList[i].manualCnt;\r\n");
      out.write("\t\t\t\t\tobject.ing = cont.bmtTcChartList[i].tcIngCnt;\r\n");
      out.write("\t\t\t\t\tobject.total = cont.bmtTcChartList[i].tcTotalCnt;\r\n");
      out.write("\t\t\t\t\tobject.xqmsPercent = cont.bmtTcChartList[i].xqmsPercent\r\n");
      out.write("\t\t\t\t\tobject.manualPercent = cont.bmtTcChartList[i].manualPercent\r\n");
      out.write("\t\t\t\t\tobject.ingPercent = cont.bmtTcChartList[i].ingPercent\r\n");
      out.write("\t\t\t\t\ttcData.push(object);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write(" \t\t\t\t\r\n");
      out.write("\t\t\t\tif (tcData[0].total != 0) _visible = true;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\t\tcategories = [cont.nowDate]\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif (tcData[0].xqms != 0) {\r\n");
      out.write("\t\t\t\t\tdata.push({ \"source\": \"XQMS\"\r\n");
      out.write("\t\t\t\t\t\t\t\t, \"percentage\": tcData[0].xqmsPercent + \"% \\n\" + \"(\" + tcData[0].xqms + \"건\" + \")\" });\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif (tcData[0].manual != 0) {\r\n");
      out.write("\t\t\t\t\tdata.push({ \"source\": \"수동테스트\"\r\n");
      out.write("\t\t\t\t\t\t\t\t, \"percentage\": tcData[0].manualPercent + \"% \\n\" + \"(\" + tcData[0].manual + \"건\" + \")\" });\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\tif (tcData[0].ing != 0) {\r\n");
      out.write("\t\t\t\t\tdata.push({ \"source\": \"미진행\"\r\n");
      out.write("\t\t\t\t\t\t\t\t, \"percentage\": tcData[0].ingPercent + \"% \\n\" + \"(\" + tcData[0].ing + \"건\" + \")\" });\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$(\"#tcChart\").kendoChart({\r\n");
      out.write("\t\t\t\t\tdataSource: {\r\n");
      out.write("\t\t\t\t\t\tdata: data\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\tlegend: {\r\n");
      out.write("\t\t\t\t\t\tposition: \"bottom\"\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\tseriesDefaults: {\r\n");
      out.write("\t\t\t\t\t\tlabels: {\r\n");
      out.write("\t\t\t\t\t\t\tvisible: _visible\r\n");
      out.write("\t\t\t\t\t\t\t, background: \"transparent\"\r\n");
      out.write("\t\t\t\t\t\t\t, template: \"#= category # \\n #= value#\"\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t, chartArea: {\r\n");
      out.write("\t\t\t\t\t\theight: 470\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t, series: [{\r\n");
      out.write("\t\t\t\t\t\ttype: \"pie\"\r\n");
      out.write("\t\t\t\t\t\t, field: \"percentage\"\r\n");
      out.write("\t\t\t\t\t\t, categoryField: \"source\"\r\n");
      out.write("\t\t\t\t\t\t, startAngle: 150\r\n");
      out.write("\t\t\t\t\t}],\r\n");
      out.write("\t\t\t\t\tseriesColors: [\"#aacd6e\",\"#548687\",\"#58c9b9\"],\r\n");
      out.write("\t\t\t\t\tseriesClick: function() {\r\n");
      out.write("\t\t\t\t\t\tlocation.href = \"/bmt/tc/tcList?pid=\"+cont.pid;\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\tvalueAxis: {\r\n");
      out.write("\t\t\t\t\t\tline: {\r\n");
      out.write("\t\t\t\t\t\t\tvisible: false\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t,min: 0\r\n");
      out.write("\t\t\t\t\t\t,max : 1\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\tcategoryAxis: {\r\n");
      out.write("\t\t\t\t\t\tcategories: categories,\r\n");
      out.write("\t\t\t\t\t\tmajorGridLines: {\r\n");
      out.write("\t\t\t\t\t\t\tvisible: false\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\ttooltip: {\r\n");
      out.write("\t\t\t\t\t\tvisible: true,\r\n");
      out.write("\t\t\t\t\t\ttemplate: \"#= category # - #= value #\"\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\toverlay: {\r\n");
      out.write("\t\t\t\t\t\tgradient: \"none\"\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("/* \t\t\t, processResponse: function(response) {\r\n");
      out.write("\t\t\t\tvar item;\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tfor (var i = 0; i < response.length; i++) {\r\n");
      out.write("\t\t\t\t\titem = response[i];\r\n");
      out.write("\t\t\t\t\tif (item.xqms == 0) {\r\n");
      out.write("\t\t\t\t\t\titem.persentXqms = '';\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\telse {\r\n");
      out.write("\t\t\t\t\t\titem.persentXqms = parseInt((item.xqms / item.total) * 100) + \"%\" + \" \" + \"(\" + item.xqms + \"건\" + \")\" ;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif (item.manual == 0) {\r\n");
      out.write("\t\t\t\t\t\titem.persentManual = '';\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\telse {\r\n");
      out.write("\t\t\t\t\t\titem.persentManual = parseInt((item.manual / item.total) * 100) + \"%\" + \" \" + \"(\" + item.manual + \"건\" + \")\";\t\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif (item.ing == 0) {\r\n");
      out.write("\t\t\t\t\t\titem.persentIng = '';\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\telse {\r\n");
      out.write("\t\t\t\t\t\titem.persentIng = parseInt((item.ing / item.total) * 100) + \"%\" + \" \" + \"(\" + item.ing + \"건\" + \")\";\t\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\treturn response;\r\n");
      out.write("\t\t\t} */\r\n");
      out.write("\t\t\t, issueSeriesFormat: function(value) {\r\n");
      out.write("\t\t\t\tif (value == 0){\r\n");
      out.write("\t\t\t\t\treturn \"\";\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\treturn value; \t\t\t\t\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, getIssueChartView: function() {\r\n");
      out.write("\t\t\t\tvar series, categories= [];\r\n");
      out.write("\t\t\t\tvar chartId;\r\n");
      out.write("\t\t\t\tvar chasu;\r\n");
      out.write("\t\t\t\tvar totCntList = [];\r\n");
      out.write("\t\t\t\tvar compCntList = [];\r\n");
      out.write("\t\t\t\tvar ingCntList = [];\r\n");
      out.write("\t\t\t\tvar openCntList = [];\r\n");
      out.write("\t\t\t\tvar fwCntList = [];\r\n");
      out.write("\t\t\t\tvar heCntList = [];\r\n");
      out.write("\t\t\t\tvar normalCntList = [];\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tfor (var i = 0; i < cont.issueCntList.length; i++){\r\n");
      out.write("\t\t\t\t\t// categories 추가\r\n");
      out.write("\t\t\t\t\tchasu = cont.issueCntList[i].chasu + \"차\";\r\n");
      out.write("\t\t\t\t\tcategories.push(chasu);\r\n");
      out.write("\t\t\t\t\t// issue Data 추가\r\n");
      out.write("\t\t\t\t\ttotCntList.push(cont.issueCntList[i].totCnt);\r\n");
      out.write("\t\t\t\t\tcompCntList.push(cont.issueCntList[i].compCnt);\r\n");
      out.write("\t\t\t\t\tingCntList.push(cont.issueCntList[i].ingCnt);\r\n");
      out.write("\t\t\t\t\topenCntList.push(cont.issueCntList[i].openCnt);\r\n");
      out.write("\t\t\t\t\tfwCntList.push(cont.issueCntList[i].fwCnt);\r\n");
      out.write("\t\t\t\t\theCntList.push(cont.issueCntList[i].heCnt);\r\n");
      out.write("\t\t\t\t\tnormalCntList.push(cont.issueCntList[i].normalCnt);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tchartId = $(\"#issueChart\");\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tseries = [\r\n");
      out.write("\t\t\t\t\t{name:\"전체\", color:\"#596e82\", data: totCntList}\r\n");
      out.write("\t\t\t\t\t, {name:\"오픈\", color:\"#ff7473\", data: openCntList}\r\n");
      out.write("\t\t\t\t\t, {name:\"H/E이슈\", color:\"#f99e53\", data: heCntList}\r\n");
      out.write("\t\t\t\t\t, {name:\"차기F/W적용\", color:\"#f4e134\", data: fwCntList}\r\n");
      out.write("\t\t\t\t\t, {name:\"정상시나리오\", color:\"#8be53c\", data: normalCntList}\r\n");
      out.write("\t\t\t\t\t, {name:\"수정중\", color:\"#41c4d6\", data: ingCntList}\r\n");
      out.write("\t\t\t\t\t, {name:\"수정완료\", color:\"#4f86c6\", data: compCntList}\r\n");
      out.write("\t\t\t\t]\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tchartId.kendoChart({\r\n");
      out.write("\t\t\t\t\tlegend: {\r\n");
      out.write("\t\t\t\t\t\tposition: \"bottom\"\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t, seriesDefaults: {\r\n");
      out.write("\t\t\t\t\t\ttype: \"column\"\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t, labels: {\r\n");
      out.write("\t\t\t\t\t\t\tvisible: true\r\n");
      out.write("\t\t\t\t\t\t\t, template: \"#= cont.issueSeriesFormat(value) #\"\r\n");
      out.write("\t\t\t\t\t\t\t, background: \"transparent\"\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t, valueAxis: {\r\n");
      out.write("\t\t\t\t\t\tline: {\r\n");
      out.write("\t\t\t\t\t\t\tvisible: false\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t, chartArea: {\r\n");
      out.write("\t\t\t\t\t\theight: 470\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t, series: series\r\n");
      out.write("\t\t\t\t\t, seriesClick: function(e) {\r\n");
      out.write("\t\t\t\t\t\t//statCheck 0전체, 1오픈, 2H/E이슈, 3차기F/W적용, 4정상시나리오, 5수정중, 6수정완료\r\n");
      out.write("\t\t\t\t\t\tvar statCheck = e.point.seriesIx\r\n");
      out.write("\t\t\t\t\t\tvar progressStat = ''\r\n");
      out.write("\t\t\t\t\t\tif(statCheck == 1){\r\n");
      out.write("\t\t\t\t\t\t\tprogressStat = 'B201';\r\n");
      out.write("\t\t\t\t\t\t\tlocation.href = \"/bmt/issue/issueList?pid=\"+cont.pid+\"&progressStat=\"+progressStat;\r\n");
      out.write("\t\t\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t\t\t}else if(statCheck == 2){\r\n");
      out.write("\t\t\t\t\t\t\tprogressStat = 'B205';\r\n");
      out.write("\t\t\t\t\t\t\tlocation.href = \"/bmt/issue/issueList?pid=\"+cont.pid+\"&progressStat=\"+progressStat;\r\n");
      out.write("\t\t\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t\t\t}else if(statCheck == 3){\r\n");
      out.write("\t\t\t\t\t\t\tprogressStat = 'B204';\r\n");
      out.write("\t\t\t\t\t\t\tlocation.href = \"/bmt/issue/issueList?pid=\"+cont.pid+\"&progressStat=\"+progressStat;\r\n");
      out.write("\t\t\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t\t\t}else if(statCheck == 4){\r\n");
      out.write("\t\t\t\t\t\t\tprogressStat = 'B206';\r\n");
      out.write("\t\t\t\t\t\t\tlocation.href = \"/bmt/issue/issueList?pid=\"+cont.pid+\"&progressStat=\"+progressStat;\r\n");
      out.write("\t\t\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t\t\t}else if(statCheck == 5){\r\n");
      out.write("\t\t\t\t\t\t\tprogressStat = 'B202';\r\n");
      out.write("\t\t\t\t\t\t\tlocation.href = \"/bmt/issue/issueList?pid=\"+cont.pid+\"&progressStat=\"+progressStat;\r\n");
      out.write("\t\t\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t\t\t}else if(statCheck == 6){\r\n");
      out.write("\t\t\t\t\t\t\tprogressStat = 'B203';\r\n");
      out.write("\t\t\t\t\t\t\tlocation.href = \"/bmt/issue/issueList?pid=\"+cont.pid+\"&progressStat=\"+progressStat;\r\n");
      out.write("\t\t\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t\t\tlocation.href = \"/bmt/issue/issueList?pid=\"+cont.pid+\"&progressStat=\"+progressStat;\r\n");
      out.write("\t\t\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t, categoryAxis: {\r\n");
      out.write("\t\t\t\t\t\tcategories: categories\r\n");
      out.write("\t\t\t\t\t\t, majorGridLines: {\r\n");
      out.write("\t\t\t\t\t\t\tvisible: false\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t, tooltip: {\r\n");
      out.write("\t\t\t\t\t\tvisible: true\r\n");
      out.write("\t\t\t\t\t\t, format: \"##,#\"\r\n");
      out.write("\t\t\t\t\t\t, template: \"#= series.name #: #= value #\"\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\t\t\t\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, setJoinComposeDiagram: function() {\r\n");
      out.write("\t\t\t\tvar nowJoinCompose = this.projectView.nowJoinCompose;\r\n");
      out.write("\t\t\t\tif (isEmpty(nowJoinCompose)) return;\r\n");
      out.write("\t\t\t\tvar array = JSON.parse(nowJoinCompose);\r\n");
      out.write("\t\t\t\tthis.shapesDataSource.data = convertJsonTree(array, \"id\", \"parentId\");\r\n");
      out.write("\t\t\t\tvar diagramElement = $(\"#diagram\").kendoDiagram({\r\n");
      out.write("\t\t\t\t\tdataSource : this.shapesDataSource\r\n");
      out.write("\t\t\t\t\t, layout : {\r\n");
      out.write("\t\t\t\t\t\ttype : \"tree\"\r\n");
      out.write("\t\t\t\t\t\t, subtype: \"down\"\r\n");
      out.write("\t\t\t\t\t\t, horizontalSeparation : 50\r\n");
      out.write("\t\t\t\t\t\t, verticalSeparation : 30\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t, shapeDefaults : {\r\n");
      out.write("\t\t\t\t\t\tvisual : this.visualTemplate\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tdiagram = diagramElement.data(\"kendoDiagram\");\r\n");
      out.write("\t\t\t\tdiagramElement.css(\"height\", \"450\");\r\n");
      out.write("\t\t\t\tdiagramElement.css(\"width\", \"922\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, visualTemplate: function(options) {\r\n");
      out.write("\t\t\t\tvar dataviz = kendo.dataviz;\r\n");
      out.write("\t\t\t\tvar g = new dataviz.diagram.Group();\r\n");
      out.write("\t\t\t\tvar dataItem = options.dataItem;\r\n");
      out.write("\t\t\t\tg.append(new dataviz.diagram.Rectangle({\r\n");
      out.write("\t\t\t\t\twidth : 170\r\n");
      out.write("\t\t\t\t\t, height : 60\r\n");
      out.write("\t\t\t\t\t, stroke : {\r\n");
      out.write("\t\t\t\t\t\twidth : 2\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t, fill : {\r\n");
      out.write("\t\t\t\t\t\tcolor : \"#fff\"\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}));\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tg.append(new dataviz.diagram.TextBlock({\r\n");
      out.write("\t\t\t\t\ttext : dataItem.model.modelGroupNm\r\n");
      out.write("\t\t\t\t\t, x : 60\r\n");
      out.write("\t\t\t\t\t, y : 8\r\n");
      out.write("\t\t\t\t\t, fill : \"#333\"\r\n");
      out.write("\t\t\t\t}));\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tg.append(new dataviz.diagram.TextBlock({\r\n");
      out.write("\t\t\t\t\ttext : \"(\" + dataItem.model.modelNm + \")\"\r\n");
      out.write("\t\t\t\t\t, x : 60\r\n");
      out.write("\t\t\t\t\t, y : 28\r\n");
      out.write("\t\t\t\t\t, fill : \"#333\"\r\n");
      out.write("\t\t\t\t}));\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif (!isEmpty(dataItem.model.icon)) {\r\n");
      out.write("\t\t\t\t\tg.append(new dataviz.diagram.Image({\r\n");
      out.write("\t\t\t\t\t\tsource : \"/images/bot/ico_model_\" + dataItem.model.icon + \".png\"\r\n");
      out.write("\t\t\t\t\t\t, x : 2\r\n");
      out.write("\t\t\t\t\t\t, y : 4\r\n");
      out.write("\t\t\t\t\t\t, width : 52\r\n");
      out.write("\t\t\t\t\t\t, height : 52\r\n");
      out.write("\t\t\t\t\t}));\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\treturn g;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t, getIssueCateChartView: function(obj) {\r\n");
      out.write("\t\t\t\t$(\"#issueCateChart\").kendoChart({\r\n");
      out.write("\t\t\t\t\tlegend: {\r\n");
      out.write("\t\t\t\t\t\tposition: \"bottom\"\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t, seriesDefaults: {\r\n");
      out.write("\t\t\t\t\t\ttype: \"column\"\r\n");
      out.write("\t\t\t\t\t\t, labels: {\r\n");
      out.write("\t\t\t\t\t\t\tvisible: true\r\n");
      out.write("\t\t\t\t\t\t\t, background: \"transparent\"\r\n");
      out.write("\t\t\t\t\t\t\t, margin: {\r\n");
      out.write("\t\t\t\t\t\t\t\ttop: 6\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t, series: [{\r\n");
      out.write("\t\t\t\t\t\tname: \"전체이슈\"\r\n");
      out.write("\t\t\t\t\t\t, data: obj.data\r\n");
      out.write("\t\t\t\t\t\t, color: \"#1ec0ff\"\r\n");
      out.write("\t\t\t\t\t}]\r\n");
      out.write("\t\t\t\t\t, seriesClick: function(e) {\r\n");
      out.write("\t\t\t\t\t\tvar issueLcateCd = obj.bigCateId[e.point.categoryIx];\r\n");
      out.write("\t\t\t\t\t\tif(isEmpty(issueLcateCd)){\r\n");
      out.write("\t\t\t\t\t\t\tissueLcateCd = \"\";\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\tlocation.href = \"/bmt/issue/issueList?pid=\"+cont.pid+\"&issueLcateCd=\"+issueLcateCd;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t, valueAxis: {\r\n");
      out.write("\t\t\t\t\t\tline: {\r\n");
      out.write("\t\t\t\t\t\t\tvisible: false\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t, axisCrossingValue: 0\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t, categoryAxis: {\r\n");
      out.write("\t\t\t\t\t\tcategories: obj.categories\r\n");
      out.write("\t\t\t\t\t\t, line: {\r\n");
      out.write("\t\t\t\t\t\t\tvisible: false\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t, majorGridLines: {\r\n");
      out.write("\t\t\t\t\t\t\tvisible: false\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t, tooltip: {\r\n");
      out.write("\t\t\t\t\t\tvisible: true\r\n");
      out.write("\t\t\t\t\t\t, template: \"#= value #\"\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_nl_005fcodeListJson_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  nl:codeListJson
    kr.co.nextlab.tag.CodeListJsonTag _jspx_th_nl_005fcodeListJson_005f0 = (kr.co.nextlab.tag.CodeListJsonTag) _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.get(kr.co.nextlab.tag.CodeListJsonTag.class);
    _jspx_th_nl_005fcodeListJson_005f0.setPageContext(_jspx_page_context);
    _jspx_th_nl_005fcodeListJson_005f0.setParent(null);
    // /WEB-INF/views/bmt/projectMain.jsp(157,21) name = codeType type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_nl_005fcodeListJson_005f0.setCodeType("C300");
    int _jspx_eval_nl_005fcodeListJson_005f0 = _jspx_th_nl_005fcodeListJson_005f0.doStartTag();
    if (_jspx_th_nl_005fcodeListJson_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.reuse(_jspx_th_nl_005fcodeListJson_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.reuse(_jspx_th_nl_005fcodeListJson_005f0);
    return false;
  }

  private boolean _jspx_meth_nl_005fcodeListJson_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  nl:codeListJson
    kr.co.nextlab.tag.CodeListJsonTag _jspx_th_nl_005fcodeListJson_005f1 = (kr.co.nextlab.tag.CodeListJsonTag) _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.get(kr.co.nextlab.tag.CodeListJsonTag.class);
    _jspx_th_nl_005fcodeListJson_005f1.setPageContext(_jspx_page_context);
    _jspx_th_nl_005fcodeListJson_005f1.setParent(null);
    // /WEB-INF/views/bmt/projectMain.jsp(158,22) name = codeType type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_nl_005fcodeListJson_005f1.setCodeType("B500");
    int _jspx_eval_nl_005fcodeListJson_005f1 = _jspx_th_nl_005fcodeListJson_005f1.doStartTag();
    if (_jspx_th_nl_005fcodeListJson_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.reuse(_jspx_th_nl_005fcodeListJson_005f1);
      return true;
    }
    _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.reuse(_jspx_th_nl_005fcodeListJson_005f1);
    return false;
  }

  private boolean _jspx_meth_nl_005fcodeListJson_005f2(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  nl:codeListJson
    kr.co.nextlab.tag.CodeListJsonTag _jspx_th_nl_005fcodeListJson_005f2 = (kr.co.nextlab.tag.CodeListJsonTag) _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.get(kr.co.nextlab.tag.CodeListJsonTag.class);
    _jspx_th_nl_005fcodeListJson_005f2.setPageContext(_jspx_page_context);
    _jspx_th_nl_005fcodeListJson_005f2.setParent(null);
    // /WEB-INF/views/bmt/projectMain.jsp(159,22) name = codeType type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_nl_005fcodeListJson_005f2.setCodeType("B600");
    int _jspx_eval_nl_005fcodeListJson_005f2 = _jspx_th_nl_005fcodeListJson_005f2.doStartTag();
    if (_jspx_th_nl_005fcodeListJson_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.reuse(_jspx_th_nl_005fcodeListJson_005f2);
      return true;
    }
    _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.reuse(_jspx_th_nl_005fcodeListJson_005f2);
    return false;
  }

  private boolean _jspx_meth_c_005fout_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f0 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    _jspx_th_c_005fout_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fout_005f0.setParent(null);
    // /WEB-INF/views/bmt/projectMain.jsp(160,11) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fout_005f0.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.pid}", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
    int _jspx_eval_c_005fout_005f0 = _jspx_th_c_005fout_005f0.doStartTag();
    if (_jspx_th_c_005fout_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
    return false;
  }

  private boolean _jspx_meth_nl_005fgubunListJson_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  nl:gubunListJson
    kr.co.nextlab.tag.GubunListJsonTag _jspx_th_nl_005fgubunListJson_005f0 = (kr.co.nextlab.tag.GubunListJsonTag) _005fjspx_005ftagPool_005fnl_005fgubunListJson_0026_005fgubunKey_005fnobody.get(kr.co.nextlab.tag.GubunListJsonTag.class);
    _jspx_th_nl_005fgubunListJson_005f0.setPageContext(_jspx_page_context);
    _jspx_th_nl_005fgubunListJson_005f0.setParent(null);
    // /WEB-INF/views/bmt/projectMain.jsp(161,19) name = gubunKey type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_nl_005fgubunListJson_005f0.setGubunKey("passYnboolean");
    int _jspx_eval_nl_005fgubunListJson_005f0 = _jspx_th_nl_005fgubunListJson_005f0.doStartTag();
    if (_jspx_th_nl_005fgubunListJson_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fnl_005fgubunListJson_0026_005fgubunKey_005fnobody.reuse(_jspx_th_nl_005fgubunListJson_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fnl_005fgubunListJson_0026_005fgubunKey_005fnobody.reuse(_jspx_th_nl_005fgubunListJson_005f0);
    return false;
  }

  private boolean _jspx_meth_c_005fout_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f1 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    _jspx_th_c_005fout_005f1.setPageContext(_jspx_page_context);
    _jspx_th_c_005fout_005f1.setParent(null);
    // /WEB-INF/views/bmt/projectMain.jsp(169,16) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fout_005f1.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${nowDate}", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
    int _jspx_eval_c_005fout_005f1 = _jspx_th_c_005fout_005f1.doStartTag();
    if (_jspx_th_c_005fout_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f1);
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f1);
    return false;
  }

  private boolean _jspx_meth_nl_005fcodeListJson_005f3(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  nl:codeListJson
    kr.co.nextlab.tag.CodeListJsonTag _jspx_th_nl_005fcodeListJson_005f3 = (kr.co.nextlab.tag.CodeListJsonTag) _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.get(kr.co.nextlab.tag.CodeListJsonTag.class);
    _jspx_th_nl_005fcodeListJson_005f3.setPageContext(_jspx_page_context);
    _jspx_th_nl_005fcodeListJson_005f3.setParent(null);
    // /WEB-INF/views/bmt/projectMain.jsp(170,20) name = codeType type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_nl_005fcodeListJson_005f3.setCodeType("D100");
    int _jspx_eval_nl_005fcodeListJson_005f3 = _jspx_th_nl_005fcodeListJson_005f3.doStartTag();
    if (_jspx_th_nl_005fcodeListJson_005f3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.reuse(_jspx_th_nl_005fcodeListJson_005f3);
      return true;
    }
    _005fjspx_005ftagPool_005fnl_005fcodeListJson_0026_005fcodeType_005fnobody.reuse(_jspx_th_nl_005fcodeListJson_005f3);
    return false;
  }
}
