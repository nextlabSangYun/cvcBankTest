<%@ page contentType="text/html" pageEncoding="UTF-8" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ taglib uri="http://www.nextlab.co.kr/tags/nextlab" prefix="nl"%>
<div class="pop_wrap" style="width:610px;">
	<div class="pop_tit">
		<p v-if="projectView.pid">프로젝트 정보수정</p>
		<p v-else>새 프로젝트</p>
	</div>
	<div class="pop_cont">
		<div class="g_table02">
			<table>
				<caption>프로젝트 이름. 기간, checklist 등의 정보를 입력하는 표 입니다.</caption>
				<colgroup>
					<col style="width:120px;">
					<col>
				</colgroup>
				<tbody>
					<tr>
						<th>프로젝트 이름*</th>
						<td>
							<input type="text" class="full" v-model.trim="projectView.projectNm" id="projectNm" maxlength="50">
						</td>
					</tr>
					<tr class="period">
						<th>기간*</th>
						<td>
							<input type="text" class="input_date" id="projectStDt" name="projectStDt" readonly v-model="projectView.projectStDt">
							<span class="bar">~</span>
							<input type="text" class="input_date" id="projectEndDt" name="projectEndDt" readonly v-model="projectView.projectEndDt">
						</td>
					</tr>
					<tr>
						<th>요청서</th>
						<td v-if="projectView.pid">
							<span v-if="projectView.projectBmtRequestList.length > 0">({{projectView.projectBmtRequestList[0].reqId}}) {{projectView.projectBmtRequestList[0].reqSubject}}</span>
						</td>
						<td v-else>
							<select v-model="projectView.reqId">
								<option value="">선택</option>
								<option v-for="list in bmtReqList" :value="list.reqId">({{list.reqId}}){{list.reqSubject}}</option>
							</select>
						</td>
					</tr>
					<tr>
						<th>등급*</th>
						<td>
							<nl:select v-model="projectView.projectGrade">
								<nl:option value="">선택</nl:option>
								<nl:options codeType="B500" />
							</nl:select>
						</td>
					</tr>
					<tr>
						<th>테이블정보*</th>
						<td class="reg">
							<nl:select v-model="projectView.projectTable" id="ptl">
								<nl:option value="">선택</nl:option>
								<nl:options codeType="B600" />
							</nl:select>
							<button class="g_btn01" @click="addTableList(projectView.projectTable)">추가</button>
							<div class="reg_list" v-show="projectView.tableList.length>0">
								<ul>
									<li v-for="(t, index) in projectView.tableList"><span>{{t.partTableNm}}</span><button class="del" @click="delTableList(index)"></button> </li>
								</ul>
							</div>
						</td>
					</tr>
					<tr>
						<th>체크리스트</th>
						<td>
							<p class="note">최대 10MB까지 첨부 가능합니다</p>
							<form id="fileForm" method="post" enctype="multipart/form-data" onsubmit="return false;">
							<input type="file" class="ir" id="file" name="file" @change="regFile" accept=".xlsx, .xls">
							<label for="file" class="sch_file">파일찾기</label>
							<ul class="file_list" v-show="projectView.orgFileNm">
								<li><a @click="fileDown">{{projectView.orgFileNm}}</a><button class="del" @click="delFile"></button></li>
							</ul>
							</form>
						</td>
					</tr>
					<tr>
						<th>테스트측정모델*</th>
						<td class="reg">
							<model-select ref="modelSelect" :input-model-version="true" :add-fn="addModelList"></model-select>
							<div class="reg_list" v-show="projectView.modelSaveList.length>0 || projectView.modelList.length>0">
								<ul>
									<li v-for="m in projectView.modelSaveList" class="gr"><span>{{m.modelNm}}({{m.modelVer}})</span></li>
									<li v-for="(m, index) in projectView.modelList"><span>{{m.modelNm}}({{m.modelVer}})</span><button class="del" @click="delModelList(index)"></button></li>
								</ul>
							</div>
						</td>
					</tr>
					<tr>
						<th>비교측정모델</th>
						<td class="reg">
							<model-select ref="modelSelect" :input-model-version="true" :add-fn="addCompareModelList"></model-select>
							<div class="reg_list" v-show="projectView.compareModelSaveList.length>0 || projectView.compareModelList.length>0">
								<ul>
									<li v-for="m in projectView.compareModelSaveList" class="gr"><span>{{m.modelNm}}({{m.modelVer}})</span></li>
									<li v-for="(m, index) in projectView.compareModelList"><span>{{m.modelNm}}({{m.modelVer}})</span><button class="del" @click="delCompareModelList(index)"></button></li>
								</ul>
							</div>
						</td>
					</tr>
					<tr>
						<th>참여인력*</th>
						<td class="reg">
							<user-select ref="userSelect" :add-fn="addPartiList"></user-select>
							<div class="reg_list" v-show="projectView.partiList.length>0">
								<ul>
									<li v-for="(p, index) in projectView.partiList"><span>{{p.userNm}}({{p.userGroupNm}})</span><button class="del" @click="delPartiList(index)"></button></li>
								</ul>
							</div>
						</td>
					</tr>
					<tr>
						<th>개선 및 <br>수정사항</th>
						<td>
							<textarea class="full" style="height: 58px;" placeholder="개선 및 수정사항" v-model="projectView.improveField"></textarea>
						</td>
					</tr>
					<tr>
						<th>비고</th>
						<td>
							<input type="text" class="full" placeholder="선택입력항목" v-model.trim="projectView.bigo" maxlength="300">
							<br/>
						</td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>
	<div class="btn_wrap">
		<button v-if="projectView.pid" class="g_btn01" @click="modProject">수정</button>
		<button v-else class="g_btn01" @click="regProject">등록</button>
		<button class="g_btn02" onclick="hidePopupLayer(); return false">닫기</button>
	</div>
</div>
<script>
	var frm = new Vue({
		el: '.pop_wrap'
		, data: {
			projectView: {
				projectNm: ''
				, projectStDt: ''
				, projectEndDt: ''
				, fileNm: ''
				, filePath: ''
				, orgFileNm: ''
				, bigo: ''
				, tableList: []
				, modelList: []
				, compareModelList: []
				, reqId: ''
				, partiList: [
					{
						userGroupId: '<c:out value="${userSession.userGroupId}"/>'
						, userId: '<c:out value="${userSession.userId}"/>'
						, partiId: '<c:out value="${userSession.userId}"/>'
						, userGroupNm: '<c:out value="${userSession.userGroupNm}"/>'
						, userNm: '<c:out value="${userSession.userNm}"/>'
					}
				]
				, tableSaveList: []
				, modelSaveList: []
				, compareModelSaveList: []
				, partiSaveList: []
				, projectGrade: ''
				, projectTable: ''
				, projectBmtRequestList: []
				, improveField: ''
			}
			, bmtReqList: []
			, file: {}
			, procChk : false
			, pid: '<c:out value="${param.pid}"/>'
			, changeFile: false
			, uid:'<c:out value="${userSession.userId}"/>'
		}
		, updated: function() {
			setPopup(2);
		}
		, mounted: function() {
			$(".input_date").on("change", function() {
				frm['projectView'][this.name] = $(this).val();
			});
		
			if (!isEmpty(this.pid)){
				this.getProjectView(this.pid);
			}else{
				var ps = 'D203';
				this.getProjectBmtList(ps);
			}
			setPopup(2);
		}
		, methods: {
			chkModelList: function(data, type){
				// 저장된값 확인
				var chkT = this.projectView.modelSaveList.some(function(m) {
					return (m.modelId + m.modelVer) == (data.modelId + data.modelVer);
				});
				var chkC = this.projectView.compareModelSaveList.some(function(m) {
					return (m.modelId + m.modelVer) == (data.modelId + data.modelVer);
				});
				// 세미콜론확인
				if(data.modelVer.match(";")){
					alert("모델 버전에는 세미콜론(;)을 입력하실 수 없습니다.");
					return data.modelVer = "";
				}
				// 새로추가된값 확인
				if (!chkT && !chkC) {
					chkT = this.projectView.modelList.some(function(m) {
						return (m.modelId + m.modelVer) == (data.modelId + data.modelVer);
					});
					chkC = this.projectView.compareModelList.some(function(m) {
						return (m.modelId + m.modelVer) == (data.modelId + data.modelVer);
					});
				}
				//모델관리 코드값 추가 및 modelList에 데이터 추가
				if (!chkT && !chkC)
					if(type == 'D701'){
						data.modelDiviCd = "D701";
						this.projectView.modelList.push(data);
						return true;
					}else{
						data.modelDiviCd = "D702";
						this.projectView.compareModelList.push(data);
						return true;
					}
				else {
					alert("이미 추가된 측정모델입니다.");
					return false;
				}
			}
			, addModelList: function(data) {
				this.chkModelList(data, 'D701');
			}
			,addCompareModelList: function(data) {
				this.chkModelList(data, 'D702');
			}
			, delModelList: function(index) {
				this.projectView.modelList.splice(index, 1);
			}
			, delCompareModelList: function(index) {
				this.projectView.compareModelList.splice(index, 1);
			}
			, addTableList: function(table_id){
				var table_nm = $("#ptl option:selected").text();
				var data = {partInfo:table_id, partTableNm:table_nm};
				if(this.projectView.projectTable == ""){
					alert("테이블 정보를 선택해주세요.");
					this.projectView.projectTable = "";
					return;
				}
				//새로추가된값 확인
				var chk = this.projectView.tableList.some(function(t) {
					return t.partInfo == table_id;
				});
				if(!chk){
					this.projectView.tableList.push(data);
					this.projectView.projectTable = "";
				}
				else {
					alert("이미 추가된 테이블입니다.");
					this.projectView.projectTable = "";
				}
			}
			, delTableList: function(index) {
				this.projectView.tableList.splice(index, 1);
			}
			, addPartiList: function(data) {
				var chk = this.projectView.partiList.some(function(p) {
					return p.partiId == data.userId;
				});
				
				if (!chk) {
					data.partiId = data.userId;
					this.projectView.partiList.push(data);
				}
				else {
					alert("이미 추가된 참여인력입니다.");
				}
			}
			, delPartiList: function(index) {
				this.projectView.partiList.splice(index, 1);
			}
			, regProject: function() {
				var param = this.projectView;
				
				if (!this.chkModel(param, 'reg')) return;
				if (this.procChk) return;
				
				param.yyyymmdd = param.projectStDt.substring(0, 4);
				$.ajax({
					type: "post"
					, url : "/bmt/project/regProjectPrc"
					, contentType: "application/json"
					, data : JSON.stringify(param)
					, beforeSend: function() { 
						frm.procChk = true;
						parent.startLoading();
					}
					, success: function(data) {
						if (data.save) {
							if(frm.changeFile)
							{
								var fileExcelParsingUrl='<nl:property key="file.excel-parsing-url" />';
								var turl = fileExcelParsingUrl+frm.projectView.filePath+"/"+frm.projectView.fileNm+"/"+ data.pid+"/"+frm.uid;
								$.get(turl);
								var url = "/bmt/project/autoScriptWorkRequest?pid=" + data.pid + "&projectNm=" + frm.projectView.projectNm;
								goShowPopupLayer(url);
							}else{
								alert("새 프로젝트가 등록 되었습니다.");
								parent.window.location.reload();
								hidePopupLayer();	
							}
						} else if (data.message) {
							alert(data.message);
						}
					}
					, error: function(xhr, status, error) {
						alert($(xhr.responseText).text());
					}
					, complete : function() {
						parent.endLoading();
					}
				});
			}
			, regFile: function() {
				fileUpload($("#file"), {saveFilePath: "bmt/project"}, function(data) {
					frm.projectView.fileNm = data.saveFileNm;
					frm.projectView.orgFileNm = data.realFileNm;
					frm.projectView.filePath = data.saveFilePath;
					frm.changeFile = true;
				});
			}
			, delFile: function() {
				this.projectView.fileNm = "";
				this.projectView.orgFileNm = "";
				this.projectView.filePath = "";
				this.fileDow = "";
			}
			, getProjectView: function(pid) {
				$.get("/bmt/project/getProjectInfoView?pid=" + pid, function(data){
					frm.projectView = data.projectView;
					//개선 및 수정사항 replace로 변경
					if(frm.projectView.improveField != null){
						frm.projectView.improveField = frm.projectView.improveField.replace(/(<br>|<br\/>|<br \/>)/g, '\r\n');
					}
					frm.projectView.partiList = data.projectPartiList;
					frm.projectView.partiSaveList = data.projectPartiList.slice();
					frm.projectView.modelList = [];
					frm.projectView.modelSaveList = data.projectBmtModelList;
					frm.projectView.compareModelList = [];
					frm.projectView.compareModelSaveList = data.projectBmtCompareModelList;
					frm.projectView.tableList = data.projectTableList;
					frm.projectView.tableSvaeList = data.projectTableList.slice();
					frm.projectView.projectTable = "";
					frm.projectView.projectBmtRequestList = data.projectBmtRequestList;
				});
			}
			, getProjectBmtList: function(ps){
				$.get("/bmt/project/getProjectBmtList?ps=" + ps, function(data){
					frm.bmtReqList = data.projectBmtReqList;
				});
			}
			, modProject: function() {
				var param = this.projectView;
				param.addPartiArray = [];
				param.partiList.forEach(function(p) {
					var chk = param.partiSaveList.some(function(ps) {
						return p.partiId == ps.partiId;
					});
					if (!chk) param.addPartiArray.push(p.partiId);
				});
				
				if (!this.chkModel(param, 'mod')) return;
				if (this.procChk) return;
				
				$.ajax({
					type: "post"
					, url : "/bmt/project/modProjectPrc"
					, contentType: "application/json"
					, data : JSON.stringify(param)
					, beforeSend: function() { 
						frm.procChk = true;
						parent.startLoading();
					}
					, success: function(data) {
						if (data.save) {
							var mes = "";
							if(frm.changeFile)
							{
								var fileExcelParsingUrl='<nl:property key="file.excel-parsing-url" />';
								var turl = fileExcelParsingUrl+frm.projectView.filePath+"/"+frm.projectView.fileNm+"/"+ data.pid+"/"+frm.uid;
								$.get(turl);
							}
							alert("프로젝트가 수정 되었습니다."+mes);
							parent.location.reload();
						} else if (data.message) {
							alert(data.message);
						}
					}
					, error: function(xhr, status, error) {
						alert($(xhr.responseText).text());
					}
					, complete : function() {
						frm.procChk = false;
						parent.endLoading();
					}
				});
			}
			, fileDown: function() {
				fileDown(this.projectView.filePath, this.projectView.fileNm, this.projectView.orgFileNm);
			}
			, chkModel: function(param, type) {
				if (param.projectNm == "") {
					alert("프로젝트 이름을 입력하세요.");
					$("#projectNm").focus();
					return false;
				}
				if (param.projectStDt == "") {
					alert("프로젝트 시작일자를 입력하세요.");
					$("#projectStDt").focus();
					return false;
				}
				if (param.projectEndDt == "") {
					alert("프로젝트 종료일자를 입력하세요.");
					$("#projectEndDt").focus();
					return false;
				}
				if (param.projectStDt > param.projectEndDt) {
					alert("시작일자와 종료일자를 확인해주세요.");
					return false;
				}
				if (param.projectGrade == "") {
					alert("등급을 선택하세요.");
					$("#projectGrade").focus();
					return false;
				}
				if (param.tableList.length == 0) {
					alert("테이블정보를 선택하세요.");
					$("#projectTable").focus();
					return false;
				}
				if (type=="reg" && param.modelList.length == 0) {
					alert("테스트측정모델을 등록하세요.");
					return false;
				}
				if (param.partiList.length == 0) {
					alert("참여인력을 등록하세요.");
					return false;
				}
				return true;
			}
		}
	});
</script>